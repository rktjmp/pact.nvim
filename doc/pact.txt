*pact* semver-focused package manger
>
                                                .o8
               oo.ooooo.   .oooo.    .ooooo.  .o888oo
                888' `88b `P  )88b  d88' `"Y8   888
                888   888  .oP"888  888         888
                888   888 d8(  888  888   .o8   888 .
                888bod8P' `Y888""8o `Y8bod8P'   "888"
                888
                o888o



          > pact [pakt]
          > An agreement, covenant, or compact.

          A pesimistic, semver-focused package manger for Neovim.

====================================================================== *pact-toc*

Install .......................................................... |pact-install|
Usage .............................................................. |pact-usage|
Commands ........................................................ |pact-commands|
API .................................................................. |pact-api|

================================================================== *pact-install*

Install ~

To automatically install `pact`,

>lua
    -- in your init.lua
    local pact_path = vim.fn.stdpath('data') .. '/site/pack/pact/start/pact.nvim'
    if vim.fn.empty(vim.fn.glob(pact_path)) > 0 then
      print("Could not find pact.nvim, cloning new copy to", pact_path)
      vim.fn.system({
        'git',
        'clone',
        '--depth', '1',
        '--branch', 'v0.0.9',
        'https://github.com/rktjmp/pact.nvim',
        pact_path
      })
      vim.cmd("helptags " .. pact_path .. "/doc")
    end

And somewhere in your configuration,

>lua
    local pact = require("pact")
    local github = pact.github
    github("rktjmp/pact.nvim", ">= 0.0.0")

Then run `:Pact` to open `pact` (and probably update `pact`).

==================================================================== *pact-usage*

Usage ~

`pact` currently provides the following forge shortcuts:

- `github`
- `gitlab`
- `sourcehut` (alias: `srht`)

As well as the agnostic `git` function.

These functions should be called with a source argument (generally `user/repo`
for forges, or `https/ssh://...` for `git`) and either a string that describes
a semver constraint (`~ 3.0.1`) or a table containing options such as
`branch`, `tag`, `commit`, `verson`, as well as `after`, etc. See |pact-api-git|
for a description of supported options.

>lua
    local p = require("pact")
    p.github("rktjmp/hotpot.nvim", "~ 0.5.0")
    p.github("rktjmp/lush.nvim", {branch = "main",
                                  after = "sleep 2"})
    p.github("rktjmp/pact.nvim", {version = "> 0.0.0",
                                  after = function(p)
                                    p.yield("running long command")
                                    p.run("sleep", {"2"})
                                    return "all ok!"
                                  end})
    p.git("https://tpope.io/vim/fugitive.git", {name = "fugitive",
                                                tag = "v3.7"})

Running the command `:Pact` will open the `pact` interface, which is losely
familar to `fugitive`. It's usage is detailed at the bottom of the buffer.

You may also open `pact` in your own (non-split) window by passing `win` and
`buf` options to `open`, see |pact-api|.

>lua
    vim.keymap.set("n", "<leader>P", function()
      require("pact").open({
        win = 0,
        buf = 0,
        concurrency_limit = 10
      })
    end)

Limitations

- `pact` only suports unix systems.
- `pact` uses git tags to detect plugin versions. Remote repositories must
  correctly tag their releases with as either `v<major>.<minor>.<patch>` or
  `<major>.<minor>.<patch>`, [partial versioning is not
  supported](https://semver.org/#spec-item-2) (i.e `<major>.<minor>`).
- Pinned `commit`s must be given in full, as we are unable to fetch or remotely
  inspect partial hashes.
- `pact` can not guess a repositories "primary branch" (i.e `main` or
  `master`), you must explicitly define it when pinning to a branch.

================================================================= *pact-commands*

Commands ~

....................................................... *:Pact* *pact-command-pact*

:Pact

Open `pact` UI in a horizontal split. `pact` is operated via keybinds inside
the buffer, usage is described at the bottom of the view.

====================================================================== *pact-api*

API ~

`pact` provides a number of functions, avaliable via `require("pact")`.

See |pact-api-git| for a desciption of commonly supported options, most other
functions pass up to it.

................................................................. *pact-api-open*

`open` opens the pact UI. By default it opens a horizontal split below the
current window, or you may pass in BOTH a 'win' and 'buf' option to attach pact
to your own window and buffer.

`open` also supports the 'concurrency-limit' or 'concurrency_limit' option
which defines the number of jobs to run concurrently. High values for this
will be faster but may cause some forges to return surious results due to rate
limiting.

>lua
    -- open pact in the current window and buffer
    pact.open({win=0, buf=0})

............................................................... *pact-api-github*

`github` is a shortcut to use the github forge. It expects a `user/repo`
string as the first argument, and either a version constraint or options table
as the second.

See also |pact-api-git|

>lua
    pact.github("rktjmp/pact.nvim", ">= 0.0.0")

............................................................... *pact-api-gitlab*

`gitlab` is a shortcut to use the gitlab forge. It expects a `user/repo`
string as the first argument, and either a version constraint or options table
as the second.

See also |pact-api-git|>

>lua
    pact.gitlab("rktjmp/pact.nvim", ">= 0.0.0")
.............................................. *ct-api-sourcehut* *pact-api-srht*

`sourcehut` is a shortcut to use the sourcehut forge. It expects a `user/repo`
string as the first argument, and either a version constraint or options table
as the second.

`srht` is an alias to `sourcehut`.

See also |pact-api-git|.

>lua
    pact.sourcehut("rktjmp/pact.nvim", ">= 0.0.0")
    pact.srht("rktjmp/pact.nvim", ">= 0.0.0")

.................................................................. *pact-api-git*

`git` defines a plugin retrieved from a git source. It expects either a
`http(s)` or `ssh` url as the first argument, and either a version constraint
or options table as the second argument.

>lua
    pact.git("https://github.com/rktjmp/pact.nvim", ">= 0.0.0")

`options`, when provided as a table may contain the following keys and values:

- MUST contain ONE of 'branch', 'tag', 'commit' or 'version'. 'branch' and
  'tag' should match an upstream branch or tag name. 'commit' must be the full
  length sha. 'version' may be any valid semver spec, following `npm` style.
  Currently `-alpha` suffixes are not supported.

- 'after', either a string or function to run after a plugin is cloned or
  synced. See below.

- 'name', only required for raw `git` calls (not forge shortcuts), which
  defines the name to use in the `pact` ui.

When 'after' is a string value are run as given via `uv.spawn`, so they must be
limited to one command/binary and its arguments.

When 'after' is a function value, it's passed a table single argument containing
the following key-values:

- 'path', the absolute path to the plugin.
- 'run', a function that accepts a 'cmd', and 'args' list and optionally a
  'cwd'. The command will be run asyncronously but may be treated as
  syncronous inside the function. `run` returns `exit-code` `std-out`
  `std-err` or `nil err` when the process could not be started.
- 'yield', a function that may be used to pass SINGLE LINE string messages
  back up to `pact` for display.

Function values should return `nil, err` (or `error(err)`) on failure, or
any other value to render in the `pact` UI.

>lua
    function (p)
      p.yield("Running long process")
      p.run("sleep" {"2"}) -- returns exit-code std-out std-err
      p.yield("Ran long process")
      return "slept for 2 second"
    end
