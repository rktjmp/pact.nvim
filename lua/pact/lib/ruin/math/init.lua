


 local _local_2_ do local _1_ local function _3_(...) local full_mod_path_2_auto = ... local _4_ = full_mod_path_2_auto local function _5_(...) local path_3_auto = _4_ return ("string" == type(path_3_auto)) end if ((nil ~= _4_) and _5_(...)) then local path_3_auto = _4_ if string.find(full_mod_path_2_auto, "math") then local _6_ = string.match(full_mod_path_2_auto, ("(.+%.)" .. "math")) if (_6_ == nil) then return "" elseif (nil ~= _6_) then local root_4_auto = _6_ return root_4_auto else return nil end else return error(string.format("relative-root: no match in &from %q for %q", full_mod_path_2_auto, "math")) end elseif (_4_ == nil) then return "" else return nil end end _1_ = require(((_3_(...) or "") .. "type")) _local_2_ = _1_ end local _local_10_ = _local_2_ local number_3f = _local_10_["number?"] do local _ = {nil, nil} end


 local __fn_2a_add_dispatch = {bodies = {}, help = {}} local add local function _16_(...) if (0 == #(__fn_2a_add_dispatch).bodies) then error(("multi-arity function " .. "add" .. " has no bodies")) else end local _18_ do local f_78_auto = nil for __79_auto, match_3f_80_auto in ipairs((__fn_2a_add_dispatch).bodies) do if f_78_auto then break end f_78_auto = match_3f_80_auto(...) end _18_ = f_78_auto end if (nil ~= _18_) then local f_78_auto = _18_ return f_78_auto(...) elseif (_18_ == nil) then local view_81_auto do local _19_, _20_ = pcall(require, "fennel") if ((_19_ == true) and ((_G.type(_20_) == "table") and (nil ~= (_20_).view))) then local view_81_auto0 = (_20_).view view_81_auto = view_81_auto0 elseif ((_19_ == false) and true) then local __79_auto = _20_ view_81_auto = (_G.vim.inspect or print) else view_81_auto = nil end end local msg_82_auto local _22_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_83_auto = 1, select("#", ...) do local val_19_auto = view_81_auto(({...})[i_83_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _22_ = tbl_17_auto end msg_82_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "add", table.concat(_22_, ", "), table.concat((__fn_2a_add_dispatch).help, "\n")) return error(msg_82_auto) else return nil end end add = _16_ local function _25_() local _26_ do table.insert((__fn_2a_add_dispatch).help, "(where [a b] (and (number? a) (number? b)))") local function _27_(...) if (2 == select("#", ...)) then local _28_ = {...} local function _29_(...) local a_11_ = (_28_)[1] local b_12_ = (_28_)[2] return (number_3f(a_11_) and number_3f(b_12_)) end if (((_G.type(_28_) == "table") and (nil ~= (_28_)[1]) and (nil ~= (_28_)[2])) and _29_(...)) then local a_11_ = (_28_)[1] local b_12_ = (_28_)[2] local function _30_(a, b)

 return (a + b) end return _30_ else return nil end else return nil end end table.insert((__fn_2a_add_dispatch).bodies, _27_) _26_ = add end local function _33_() table.insert((__fn_2a_add_dispatch).help, "(where [a b c ...] (and (number? a) (number? b) (number? c)))") local function _34_(...) if (3 <= select("#", ...)) then local _35_ = {...} local function _36_(...) local a_13_ = (_35_)[1] local b_14_ = (_35_)[2] local c_15_ = (_35_)[3] return (number_3f(a_13_) and number_3f(b_14_) and number_3f(c_15_)) end if (((_G.type(_35_) == "table") and (nil ~= (_35_)[1]) and (nil ~= (_35_)[2]) and (nil ~= (_35_)[3])) and _36_(...)) then local a_13_ = (_35_)[1] local b_14_ = (_35_)[2] local c_15_ = (_35_)[3] local function _37_(a, b, c, ...)

 return add(add(a, b), c, ...) end return _37_ else return nil end else return nil end end table.insert((__fn_2a_add_dispatch).bodies, _34_) return add end do local _ = {_26_, _33_()} end return add end setmetatable({nil, nil}, {__call = _25_})()

 local __fn_2a_sub_dispatch = {bodies = {}, help = {}} local sub local function _45_(...) if (0 == #(__fn_2a_sub_dispatch).bodies) then error(("multi-arity function " .. "sub" .. " has no bodies")) else end local _47_ do local f_78_auto = nil for __79_auto, match_3f_80_auto in ipairs((__fn_2a_sub_dispatch).bodies) do if f_78_auto then break end f_78_auto = match_3f_80_auto(...) end _47_ = f_78_auto end if (nil ~= _47_) then local f_78_auto = _47_ return f_78_auto(...) elseif (_47_ == nil) then local view_81_auto do local _48_, _49_ = pcall(require, "fennel") if ((_48_ == true) and ((_G.type(_49_) == "table") and (nil ~= (_49_).view))) then local view_81_auto0 = (_49_).view view_81_auto = view_81_auto0 elseif ((_48_ == false) and true) then local __79_auto = _49_ view_81_auto = (_G.vim.inspect or print) else view_81_auto = nil end end local msg_82_auto local _51_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_83_auto = 1, select("#", ...) do local val_19_auto = view_81_auto(({...})[i_83_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _51_ = tbl_17_auto end msg_82_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "sub", table.concat(_51_, ", "), table.concat((__fn_2a_sub_dispatch).help, "\n")) return error(msg_82_auto) else return nil end end sub = _45_ local function _54_() local _55_ do table.insert((__fn_2a_sub_dispatch).help, "(where [a b] (and (number? a) (number? b)))") local function _56_(...) if (2 == select("#", ...)) then local _57_ = {...} local function _58_(...) local a_40_ = (_57_)[1] local b_41_ = (_57_)[2] return (number_3f(a_40_) and number_3f(b_41_)) end if (((_G.type(_57_) == "table") and (nil ~= (_57_)[1]) and (nil ~= (_57_)[2])) and _58_(...)) then local a_40_ = (_57_)[1] local b_41_ = (_57_)[2] local function _59_(a, b)

 return (a - b) end return _59_ else return nil end else return nil end end table.insert((__fn_2a_sub_dispatch).bodies, _56_) _55_ = sub end local function _62_() table.insert((__fn_2a_sub_dispatch).help, "(where [a b c ...] (and (number? a) (number? b) (number? c)))") local function _63_(...) if (3 <= select("#", ...)) then local _64_ = {...} local function _65_(...) local a_42_ = (_64_)[1] local b_43_ = (_64_)[2] local c_44_ = (_64_)[3] return (number_3f(a_42_) and number_3f(b_43_) and number_3f(c_44_)) end if (((_G.type(_64_) == "table") and (nil ~= (_64_)[1]) and (nil ~= (_64_)[2]) and (nil ~= (_64_)[3])) and _65_(...)) then local a_42_ = (_64_)[1] local b_43_ = (_64_)[2] local c_44_ = (_64_)[3] local function _66_(a, b, c, ...)

 return sub(sub(a, b), c, ...) end return _66_ else return nil end else return nil end end table.insert((__fn_2a_sub_dispatch).bodies, _63_) return sub end do local _ = {_55_, _62_()} end return sub end setmetatable({nil, nil}, {__call = _54_})()

 local __fn_2a_mul_dispatch = {bodies = {}, help = {}} local mul local function _74_(...) if (0 == #(__fn_2a_mul_dispatch).bodies) then error(("multi-arity function " .. "mul" .. " has no bodies")) else end local _76_ do local f_78_auto = nil for __79_auto, match_3f_80_auto in ipairs((__fn_2a_mul_dispatch).bodies) do if f_78_auto then break end f_78_auto = match_3f_80_auto(...) end _76_ = f_78_auto end if (nil ~= _76_) then local f_78_auto = _76_ return f_78_auto(...) elseif (_76_ == nil) then local view_81_auto do local _77_, _78_ = pcall(require, "fennel") if ((_77_ == true) and ((_G.type(_78_) == "table") and (nil ~= (_78_).view))) then local view_81_auto0 = (_78_).view view_81_auto = view_81_auto0 elseif ((_77_ == false) and true) then local __79_auto = _78_ view_81_auto = (_G.vim.inspect or print) else view_81_auto = nil end end local msg_82_auto local _80_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_83_auto = 1, select("#", ...) do local val_19_auto = view_81_auto(({...})[i_83_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _80_ = tbl_17_auto end msg_82_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "mul", table.concat(_80_, ", "), table.concat((__fn_2a_mul_dispatch).help, "\n")) return error(msg_82_auto) else return nil end end mul = _74_ local function _83_() local _84_ do table.insert((__fn_2a_mul_dispatch).help, "(where [a b] (and (number? a) (number? b)))") local function _85_(...) if (2 == select("#", ...)) then local _86_ = {...} local function _87_(...) local a_69_ = (_86_)[1] local b_70_ = (_86_)[2] return (number_3f(a_69_) and number_3f(b_70_)) end if (((_G.type(_86_) == "table") and (nil ~= (_86_)[1]) and (nil ~= (_86_)[2])) and _87_(...)) then local a_69_ = (_86_)[1] local b_70_ = (_86_)[2] local function _88_(a, b)

 return (a * b) end return _88_ else return nil end else return nil end end table.insert((__fn_2a_mul_dispatch).bodies, _85_) _84_ = mul end local function _91_() table.insert((__fn_2a_mul_dispatch).help, "(where [a b c ...] (and (number? a) (number? b) (number? c)))") local function _92_(...) if (3 <= select("#", ...)) then local _93_ = {...} local function _94_(...) local a_71_ = (_93_)[1] local b_72_ = (_93_)[2] local c_73_ = (_93_)[3] return (number_3f(a_71_) and number_3f(b_72_) and number_3f(c_73_)) end if (((_G.type(_93_) == "table") and (nil ~= (_93_)[1]) and (nil ~= (_93_)[2]) and (nil ~= (_93_)[3])) and _94_(...)) then local a_71_ = (_93_)[1] local b_72_ = (_93_)[2] local c_73_ = (_93_)[3] local function _95_(a, b, c, ...)

 return mul(mul(a, b), c, ...) end return _95_ else return nil end else return nil end end table.insert((__fn_2a_mul_dispatch).bodies, _92_) return mul end do local _ = {_84_, _91_()} end return mul end setmetatable({nil, nil}, {__call = _83_})()

 local __fn_2a_div_dispatch = {bodies = {}, help = {}} local div local function _103_(...) if (0 == #(__fn_2a_div_dispatch).bodies) then error(("multi-arity function " .. "div" .. " has no bodies")) else end local _105_ do local f_78_auto = nil for __79_auto, match_3f_80_auto in ipairs((__fn_2a_div_dispatch).bodies) do if f_78_auto then break end f_78_auto = match_3f_80_auto(...) end _105_ = f_78_auto end if (nil ~= _105_) then local f_78_auto = _105_ return f_78_auto(...) elseif (_105_ == nil) then local view_81_auto do local _106_, _107_ = pcall(require, "fennel") if ((_106_ == true) and ((_G.type(_107_) == "table") and (nil ~= (_107_).view))) then local view_81_auto0 = (_107_).view view_81_auto = view_81_auto0 elseif ((_106_ == false) and true) then local __79_auto = _107_ view_81_auto = (_G.vim.inspect or print) else view_81_auto = nil end end local msg_82_auto local _109_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_83_auto = 1, select("#", ...) do local val_19_auto = view_81_auto(({...})[i_83_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _109_ = tbl_17_auto end msg_82_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "div", table.concat(_109_, ", "), table.concat((__fn_2a_div_dispatch).help, "\n")) return error(msg_82_auto) else return nil end end div = _103_ local function _112_() local _113_ do table.insert((__fn_2a_div_dispatch).help, "(where [a b] (and (number? a) (number? b)))") local function _114_(...) if (2 == select("#", ...)) then local _115_ = {...} local function _116_(...) local a_98_ = (_115_)[1] local b_99_ = (_115_)[2] return (number_3f(a_98_) and number_3f(b_99_)) end if (((_G.type(_115_) == "table") and (nil ~= (_115_)[1]) and (nil ~= (_115_)[2])) and _116_(...)) then local a_98_ = (_115_)[1] local b_99_ = (_115_)[2] local function _117_(a, b)

 return (a / b) end return _117_ else return nil end else return nil end end table.insert((__fn_2a_div_dispatch).bodies, _114_) _113_ = div end local function _120_() table.insert((__fn_2a_div_dispatch).help, "(where [a b c ...] (and (number? a) (number? b) (number? c)))") local function _121_(...) if (3 <= select("#", ...)) then local _122_ = {...} local function _123_(...) local a_100_ = (_122_)[1] local b_101_ = (_122_)[2] local c_102_ = (_122_)[3] return (number_3f(a_100_) and number_3f(b_101_) and number_3f(c_102_)) end if (((_G.type(_122_) == "table") and (nil ~= (_122_)[1]) and (nil ~= (_122_)[2]) and (nil ~= (_122_)[3])) and _123_(...)) then local a_100_ = (_122_)[1] local b_101_ = (_122_)[2] local c_102_ = (_122_)[3] local function _124_(a, b, c, ...)

 return div(div(a, b), c, ...) end return _124_ else return nil end else return nil end end table.insert((__fn_2a_div_dispatch).bodies, _121_) return div end do local _ = {_113_, _120_()} end return div end setmetatable({nil, nil}, {__call = _112_})()

 local function inc(x) return (x + 1) end
 local function dec(x) return (x - 1) end

 local __fn_2a_rem_dispatch = {bodies = {}, help = {}} local rem local function _130_(...) if (0 == #(__fn_2a_rem_dispatch).bodies) then error(("multi-arity function " .. "rem" .. " has no bodies")) else end local _132_ do local f_78_auto = nil for __79_auto, match_3f_80_auto in ipairs((__fn_2a_rem_dispatch).bodies) do if f_78_auto then break end f_78_auto = match_3f_80_auto(...) end _132_ = f_78_auto end if (nil ~= _132_) then local f_78_auto = _132_ return f_78_auto(...) elseif (_132_ == nil) then local view_81_auto do local _133_, _134_ = pcall(require, "fennel") if ((_133_ == true) and ((_G.type(_134_) == "table") and (nil ~= (_134_).view))) then local view_81_auto0 = (_134_).view view_81_auto = view_81_auto0 elseif ((_133_ == false) and true) then local __79_auto = _134_ view_81_auto = (_G.vim.inspect or print) else view_81_auto = nil end end local msg_82_auto local _136_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_83_auto = 1, select("#", ...) do local val_19_auto = view_81_auto(({...})[i_83_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _136_ = tbl_17_auto end msg_82_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "rem", table.concat(_136_, ", "), table.concat((__fn_2a_rem_dispatch).help, "\n")) return error(msg_82_auto) else return nil end end rem = _130_ local function _139_() local _140_ do table.insert((__fn_2a_rem_dispatch).help, "(where [x 0])") local function _141_(...) if (2 == select("#", ...)) then local _142_ = {...} local function _143_(...) local x_127_ = (_142_)[1] return true end if (((_G.type(_142_) == "table") and (nil ~= (_142_)[1]) and ((_142_)[2] == 0)) and _143_(...)) then local x_127_ = (_142_)[1] local function _144_(x, _)
 return x end return _144_ else return nil end else return nil end end table.insert((__fn_2a_rem_dispatch).bodies, _141_) _140_ = rem end local function _147_() table.insert((__fn_2a_rem_dispatch).help, "(where [x n])") local function _148_(...) if (2 == select("#", ...)) then local _149_ = {...} local function _150_(...) local x_128_ = (_149_)[1] local n_129_ = (_149_)[2] return true end if (((_G.type(_149_) == "table") and (nil ~= (_149_)[1]) and (nil ~= (_149_)[2])) and _150_(...)) then local x_128_ = (_149_)[1] local n_129_ = (_149_)[2] local function _151_(x, n)
 return (x % n) end return _151_ else return nil end else return nil end end table.insert((__fn_2a_rem_dispatch).bodies, _148_) return rem end do local _ = {_140_, _147_()} end return rem end setmetatable({nil, nil}, {__call = _139_})()

 local function even_3f(x) return (0 == rem(x, 2)) end
 local function odd_3f(x) return (1 == rem(x, 2)) end
 local function divides_into_3f(x, n) return (0 == (x % n)) end

 return {inc = inc, dec = dec, add = add, sub = sub, mul = mul, div = div, rem = rem, ["odd?"] = odd_3f, ["even?"] = even_3f, ["divides-into?"] = divides_into_3f}