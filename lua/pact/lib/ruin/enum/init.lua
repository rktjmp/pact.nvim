

 local _local_3_, _local_4_ = nil, nil do local _2_ = string local _1_ local function _5_(...) local full_mod_path_2_auto = ... local _6_ = full_mod_path_2_auto local function _7_(...) local path_3_auto = _6_ return ("string" == type(path_3_auto)) end if ((nil ~= _6_) and _7_(...)) then local path_3_auto = _6_ if string.find(full_mod_path_2_auto, "enum") then local _8_ = string.match(full_mod_path_2_auto, ("(.+%.)" .. "enum")) if (_8_ == nil) then return "" elseif (nil ~= _8_) then local root_4_auto = _8_ return root_4_auto else return nil end else return error(string.format("relative-root: no match in &from %q for %q", full_mod_path_2_auto, "enum")) end elseif (_6_ == nil) then return "" else return nil end end _1_ = require(((_5_(...) or "") .. "type")) _local_3_, _local_4_ = _1_, _2_ end local _local_12_ = _local_3_ local t_assoc_3f = _local_12_["assoc?"]
 local function_3f = _local_12_["function?"] local nil_3f = _local_12_["nil?"] local number_3f = _local_12_["number?"] local t_seq_3f = _local_12_["seq?"] local t_table_3f = _local_12_["table?"] local _local_13_ = _local_4_

 local fmt = _local_13_["format"] do local _ = {nil, nil} end

 local M = {}

 local function stream_3f(s)
 local _14_ = s if ((_G.type(_14_) == "table") and (nil ~= (_14_).enum) and (nil ~= (_14_).funs)) then local enum = (_14_).enum local funs = (_14_).funs return true elseif true then local _ = _14_ return false else return nil end end





 local function seq_3f(t) return (t_seq_3f(t) and not stream_3f(t)) end
 local function assoc_3f(t) return (t_assoc_3f(t) and not stream_3f(t)) end
 local function table_3f(t) return (t_table_3f(t) and not stream_3f(t)) end

 local function enumerable_3f(v)

 return (((seq_3f(v) or assoc_3f(v)) and not stream_3f(v)) or function_3f(v)) end





 local stream_halt_marker = {}
 local stream_use_last_value_marker = {}
 local stream_use_new_value_marker = {}
 local reduced_marker = {}



 M.pack = function(...)


 local _16_ = {...} _16_["n"] = select("#", ...) return _16_ end

 local rawunpack = (_G.unpack or table.unpack)
 local __fn_2a_M__unpack_dispatch = {bodies = {}, help = {}} local function _23_(...) if (0 == #(__fn_2a_M__unpack_dispatch).bodies) then error(("multi-arity function " .. "M.unpack" .. " has no bodies")) else end local _25_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__unpack_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _25_ = f_74_auto end if (nil ~= _25_) then local f_74_auto = _25_ return f_74_auto(...) elseif (_25_ == nil) then local view_77_auto do local _26_, _27_ = pcall(require, "fennel") if ((_26_ == true) and ((_G.type(_27_) == "table") and (nil ~= (_27_).view))) then local view_77_auto0 = (_27_).view view_77_auto = view_77_auto0 elseif ((_26_ == false) and true) then local __75_auto = _27_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _29_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _29_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.unpack", table.concat(_29_, ", "), table.concat((__fn_2a_M__unpack_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.unpack = _23_ local function _32_() local _33_ do table.insert((__fn_2a_M__unpack_dispatch).help, "(where [t] (table? t))") local function _34_(...) if (1 == select("#", ...)) then local _35_ = {...} local function _36_(...) local t_17_ = (_35_)[1] return table_3f(t_17_) end if (((_G.type(_35_) == "table") and (nil ~= (_35_)[1])) and _36_(...)) then local t_17_ = (_35_)[1] local function _37_(t)





 return rawunpack(t, 1, t.n) end return _37_ else return nil end else return nil end end table.insert((__fn_2a_M__unpack_dispatch).bodies, _34_) _33_ = M.unpack end local _40_ do table.insert((__fn_2a_M__unpack_dispatch).help, "(where [t i] (and (table? t) (number? i)))") local function _41_(...) if (2 == select("#", ...)) then local _42_ = {...} local function _43_(...) local t_18_ = (_42_)[1] local i_19_ = (_42_)[2] return (table_3f(t_18_) and number_3f(i_19_)) end if (((_G.type(_42_) == "table") and (nil ~= (_42_)[1]) and (nil ~= (_42_)[2])) and _43_(...)) then local t_18_ = (_42_)[1] local i_19_ = (_42_)[2] local function _44_(t, i)

 return rawunpack(t, i, t.n) end return _44_ else return nil end else return nil end end table.insert((__fn_2a_M__unpack_dispatch).bodies, _41_) _40_ = M.unpack end local function _47_() table.insert((__fn_2a_M__unpack_dispatch).help, "(where [t i j] (and (table? t) (number? i) (number? j)))") local function _48_(...) if (3 == select("#", ...)) then local _49_ = {...} local function _50_(...) local t_20_ = (_49_)[1] local i_21_ = (_49_)[2] local j_22_ = (_49_)[3] return (table_3f(t_20_) and number_3f(i_21_) and number_3f(j_22_)) end if (((_G.type(_49_) == "table") and (nil ~= (_49_)[1]) and (nil ~= (_49_)[2]) and (nil ~= (_49_)[3])) and _50_(...)) then local t_20_ = (_49_)[1] local i_21_ = (_49_)[2] local j_22_ = (_49_)[3] local function _51_(t, i, j)

 return rawunpack(t, i, j) end return _51_ else return nil end else return nil end end table.insert((__fn_2a_M__unpack_dispatch).bodies, _48_) return M.unpack end do local _ = {_33_, _40_, _47_()} end return M.unpack end setmetatable({nil, nil}, {__call = _32_})()



 local __fn_2a_M__reduced_dispatch = {bodies = {}, help = {}} local function _55_(...) if (0 == #(__fn_2a_M__reduced_dispatch).bodies) then error(("multi-arity function " .. "M.reduced" .. " has no bodies")) else end local _57_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__reduced_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _57_ = f_74_auto end if (nil ~= _57_) then local f_74_auto = _57_ return f_74_auto(...) elseif (_57_ == nil) then local view_77_auto do local _58_, _59_ = pcall(require, "fennel") if ((_58_ == true) and ((_G.type(_59_) == "table") and (nil ~= (_59_).view))) then local view_77_auto0 = (_59_).view view_77_auto = view_77_auto0 elseif ((_58_ == false) and true) then local __75_auto = _59_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _61_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _61_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.reduced", table.concat(_61_, ", "), table.concat((__fn_2a_M__reduced_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.reduced = _55_ local function _64_() local _65_ do table.insert((__fn_2a_M__reduced_dispatch).help, "(where {})") local function _66_(...) if (0 == select("#", ...)) then local _67_ = {...} local function _68_(...) return true end if ((_G.type(_67_) == "table") and _68_(...)) then local function _69_()


 return reduced_marker end return _69_ else return nil end else return nil end end table.insert((__fn_2a_M__reduced_dispatch).bodies, _66_) _65_ = M.reduced end local _72_ do table.insert((__fn_2a_M__reduced_dispatch).help, "(where [?value])") local function _73_(...) if (1 == select("#", ...)) then local _74_ = {...} local function _75_(...) local _3fvalue_54_ = (_74_)[1] return true end if (((_G.type(_74_) == "table") and true) and _75_(...)) then local _3fvalue_54_ = (_74_)[1] local function _76_(_3fvalue)

 return reduced_marker, _3fvalue end return _76_ else return nil end else return nil end end table.insert((__fn_2a_M__reduced_dispatch).bodies, _73_) _72_ = M.reduced end local function _79_() table.insert((__fn_2a_M__reduced_dispatch).help, "(where _)") local function _80_(...) if true then local _81_ = {...} local function _82_(...) return true end if ((_G.type(_81_) == "table") and _82_(...)) then local function _83_(...)

 return error("reduced accepts only a single value") end return _83_ else return nil end else return nil end end table.insert((__fn_2a_M__reduced_dispatch).bodies, _80_) return M.reduced end do local _ = {_65_, _72_, _79_()} end return M.reduced end setmetatable({nil, nil}, {__call = _64_})()











 local function reduce_impl(f, acc, _86_) local _arg_87_ = _86_ local gen = _arg_87_[1] local invariant = _arg_87_[2] local ctrl = _arg_87_[3]
 local _let_88_ = M.pack(gen(invariant, ctrl)) local n = _let_88_["n"] local vals = _let_88_
 local _89_ = {n, vals} if ((_G.type(_89_) == "table") and ((_89_)[1] == 1) and ((_G.type((_89_)[2]) == "table") and (((_89_)[2])[1] == nil))) then


 return acc elseif ((_G.type(_89_) == "table") and ((_89_)[1] == 0) and true) then local _ = (_89_)[2]




 return acc elseif true then local _ = _89_

 local _let_90_ = vals local ctrl0 = _let_90_[1] local _0 = (function (t, k, e) local mt = getmetatable(t) if 'table' == type(mt) and mt.__fennelrest then return mt.__fennelrest(t, k) elseif e then local rest = {} for k, v in pairs(t) do if not e[k] then rest[k] = v end end return rest else return {(table.unpack or unpack)(t, k)} end end)(_let_90_, 2)
 local _91_, _92_ = f(acc, M.unpack(vals, 1, n)) if ((_91_ == reduced_marker) and true) then local _3fnew_acc = _92_


 return _3fnew_acc elseif true then local _3fnew_acc = _91_

 return reduce_impl(f, _3fnew_acc, {gen, invariant, ctrl0}) elseif true then local _1 = _91_
 return error("internal-error: reduce could not match next value") else return nil end else return nil end end

 local __fn_2a_M__reduce_dispatch = {bodies = {}, help = {}} local function _111_(...) if (0 == #(__fn_2a_M__reduce_dispatch).bodies) then error(("multi-arity function " .. "M.reduce" .. " has no bodies")) else end local _113_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__reduce_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _113_ = f_74_auto end if (nil ~= _113_) then local f_74_auto = _113_ return f_74_auto(...) elseif (_113_ == nil) then local view_77_auto do local _114_, _115_ = pcall(require, "fennel") if ((_114_ == true) and ((_G.type(_115_) == "table") and (nil ~= (_115_).view))) then local view_77_auto0 = (_115_).view view_77_auto = view_77_auto0 elseif ((_114_ == false) and true) then local __75_auto = _115_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _117_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _117_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.reduce", table.concat(_117_, ", "), table.concat((__fn_2a_M__reduce_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.reduce = _111_ local function _120_() local _121_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f] (function? f))") local function _122_(...) if (1 == select("#", ...)) then local _123_ = {...} local function _124_(...) local f_95_ = (_123_)[1] return function_3f(f_95_) end if (((_G.type(_123_) == "table") and (nil ~= (_123_)[1])) and _124_(...)) then local f_95_ = (_123_)[1] local function _125_(f)















 local function _126_(_241, _242) return M.reduce(f, _241, _242) end return _126_ end return _125_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _122_) _121_ = M.reduce end local _129_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f ?initial t] (and (function? f) (seq? t)))") local function _130_(...) if (3 == select("#", ...)) then local _131_ = {...} local function _132_(...) local f_96_ = (_131_)[1] local _3finitial_97_ = (_131_)[2] local t_98_ = (_131_)[3] return (function_3f(f_96_) and seq_3f(t_98_)) end if (((_G.type(_131_) == "table") and (nil ~= (_131_)[1]) and true and (nil ~= (_131_)[3])) and _132_(...)) then local f_96_ = (_131_)[1] local _3finitial_97_ = (_131_)[2] local t_98_ = (_131_)[3] local function _133_(f, _3finitial, t)


 return reduce_impl(f, _3finitial, M.pack(ipairs(t))) end return _133_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _130_) _129_ = M.reduce end local _136_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f ?initial t] (and (function? f) (assoc? t)))") local function _137_(...) if (3 == select("#", ...)) then local _138_ = {...} local function _139_(...) local f_99_ = (_138_)[1] local _3finitial_100_ = (_138_)[2] local t_101_ = (_138_)[3] return (function_3f(f_99_) and assoc_3f(t_101_)) end if (((_G.type(_138_) == "table") and (nil ~= (_138_)[1]) and true and (nil ~= (_138_)[3])) and _139_(...)) then local f_99_ = (_138_)[1] local _3finitial_100_ = (_138_)[2] local t_101_ = (_138_)[3] local function _140_(f, _3finitial, t)

 return reduce_impl(f, _3finitial, M.pack(pairs(t))) end return _140_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _137_) _136_ = M.reduce end local _143_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f ?initial generator] (and (function? f) (function? generator)))") local function _144_(...) if (3 == select("#", ...)) then local _145_ = {...} local function _146_(...) local f_102_ = (_145_)[1] local _3finitial_103_ = (_145_)[2] local generator_104_ = (_145_)[3] return (function_3f(f_102_) and function_3f(generator_104_)) end if (((_G.type(_145_) == "table") and (nil ~= (_145_)[1]) and true and (nil ~= (_145_)[3])) and _146_(...)) then local f_102_ = (_145_)[1] local _3finitial_103_ = (_145_)[2] local generator_104_ = (_145_)[3] local function _147_(f, _3finitial, generator)

 return reduce_impl(f, _3finitial, M.pack(generator())) end return _147_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _144_) _143_ = M.reduce end local _150_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f t] (and (function? f) (seq? t)))") local function _151_(...) if (2 == select("#", ...)) then local _152_ = {...} local function _153_(...) local f_105_ = (_152_)[1] local t_106_ = (_152_)[2] return (function_3f(f_105_) and seq_3f(t_106_)) end if (((_G.type(_152_) == "table") and (nil ~= (_152_)[1]) and (nil ~= (_152_)[2])) and _153_(...)) then local f_105_ = (_152_)[1] local t_106_ = (_152_)[2] local function _154_(f, t)


 local _let_155_ = ipairs(t) local iter = _let_155_[1] local a = _let_155_[2] local n = _let_155_[3]
 local nn, initial = iter(a, n)
 return reduce_impl(f, initial, M.pack(iter, a, nn)) end return _154_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _151_) _150_ = M.reduce end local _158_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f t] (and (function? f) (assoc? t)))") local function _159_(...) if (2 == select("#", ...)) then local _160_ = {...} local function _161_(...) local f_107_ = (_160_)[1] local t_108_ = (_160_)[2] return (function_3f(f_107_) and assoc_3f(t_108_)) end if (((_G.type(_160_) == "table") and (nil ~= (_160_)[1]) and (nil ~= (_160_)[2])) and _161_(...)) then local f_107_ = (_160_)[1] local t_108_ = (_160_)[2] local function _162_(f, t)

 local _let_163_ = pairs(t) local iter = _let_163_[1] local a = _let_163_[2] local n = _let_163_[3]
 local nn, initial = iter(a, n)
 return reduce_impl(f, initial, M.pack(iter, a, nn)) end return _162_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _159_) _158_ = M.reduce end local function _166_() table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f generator] (and (function? f) (function? generator)))") local function _167_(...) if (2 == select("#", ...)) then local _168_ = {...} local function _169_(...) local f_109_ = (_168_)[1] local generator_110_ = (_168_)[2] return (function_3f(f_109_) and function_3f(generator_110_)) end if (((_G.type(_168_) == "table") and (nil ~= (_168_)[1]) and (nil ~= (_168_)[2])) and _169_(...)) then local f_109_ = (_168_)[1] local generator_110_ = (_168_)[2] local function _170_(f, generator)

 local _let_171_ = generator() local iter = _let_171_[1] local a = _let_171_[2] local n = _let_171_[3]
 local nn, initial = iter(a, n)
 return reduce_impl(f, initial, M.pack(iter, a, nn)) end return _170_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _167_) return M.reduce end do local _ = {_121_, _129_, _136_, _143_, _150_, _158_, _166_()} end return M.reduce end setmetatable({nil, nil}, {__call = _120_})()



 local __fn_2a_M__map_dispatch = {bodies = {}, help = {}} local function _179_(...) if (0 == #(__fn_2a_M__map_dispatch).bodies) then error(("multi-arity function " .. "M.map" .. " has no bodies")) else end local _181_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__map_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _181_ = f_74_auto end if (nil ~= _181_) then local f_74_auto = _181_ return f_74_auto(...) elseif (_181_ == nil) then local view_77_auto do local _182_, _183_ = pcall(require, "fennel") if ((_182_ == true) and ((_G.type(_183_) == "table") and (nil ~= (_183_).view))) then local view_77_auto0 = (_183_).view view_77_auto = view_77_auto0 elseif ((_182_ == false) and true) then local __75_auto = _183_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _185_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _185_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.map", table.concat(_185_, ", "), table.concat((__fn_2a_M__map_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.map = _179_ local function _188_() local _189_ do table.insert((__fn_2a_M__map_dispatch).help, "(where [f] (function? f))") local function _190_(...) if (1 == select("#", ...)) then local _191_ = {...} local function _192_(...) local f_174_ = (_191_)[1] return function_3f(f_174_) end if (((_G.type(_191_) == "table") and (nil ~= (_191_)[1])) and _192_(...)) then local f_174_ = (_191_)[1] local function _193_(f)







 local function _194_(_241) return M.map(f, _241) end return _194_ end return _193_ else return nil end else return nil end end table.insert((__fn_2a_M__map_dispatch).bodies, _190_) _189_ = M.map end local _197_ do table.insert((__fn_2a_M__map_dispatch).help, "(where [f stream] (and (function? f) (stream? stream)))") local function _198_(...) if (2 == select("#", ...)) then local _199_ = {...} local function _200_(...) local f_175_ = (_199_)[1] local stream_176_ = (_199_)[2] return (function_3f(f_175_) and stream_3f(stream_176_)) end if (((_G.type(_199_) == "table") and (nil ~= (_199_)[1]) and (nil ~= (_199_)[2])) and _200_(...)) then local f_175_ = (_199_)[1] local stream_176_ = (_199_)[2] local function _201_(f, stream)


 local function _202_(...) return stream_use_new_value_marker, f(...) end table.insert(stream.funs, _202_)
 return stream end return _201_ else return nil end else return nil end end table.insert((__fn_2a_M__map_dispatch).bodies, _198_) _197_ = M.map end local function _205_() table.insert((__fn_2a_M__map_dispatch).help, "(where [f enumerable] (and (function? f) (enumerable? enumerable)))") local function _206_(...) if (2 == select("#", ...)) then local _207_ = {...} local function _208_(...) local f_177_ = (_207_)[1] local enumerable_178_ = (_207_)[2] return (function_3f(f_177_) and enumerable_3f(enumerable_178_)) end if (((_G.type(_207_) == "table") and (nil ~= (_207_)[1]) and (nil ~= (_207_)[2])) and _208_(...)) then local f_177_ = (_207_)[1] local enumerable_178_ = (_207_)[2] local function _209_(f, enumerable)

 local fx local function _210_(acc, ...)
 local _211_ = f(...) if (nil ~= _211_) then local val = _211_
 return M["insert$"](acc, -1, val) elseif (_211_ == nil) then
 return acc else return nil end end fx = _210_
 return M.reduce(fx, {}, enumerable) end return _209_ else return nil end else return nil end end table.insert((__fn_2a_M__map_dispatch).bodies, _206_) return M.map end do local _ = {_189_, _197_, _205_()} end return M.map end setmetatable({nil, nil}, {__call = _188_})()

 local __fn_2a_M__each_dispatch = {bodies = {}, help = {}} local function _220_(...) if (0 == #(__fn_2a_M__each_dispatch).bodies) then error(("multi-arity function " .. "M.each" .. " has no bodies")) else end local _222_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__each_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _222_ = f_74_auto end if (nil ~= _222_) then local f_74_auto = _222_ return f_74_auto(...) elseif (_222_ == nil) then local view_77_auto do local _223_, _224_ = pcall(require, "fennel") if ((_223_ == true) and ((_G.type(_224_) == "table") and (nil ~= (_224_).view))) then local view_77_auto0 = (_224_).view view_77_auto = view_77_auto0 elseif ((_223_ == false) and true) then local __75_auto = _224_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _226_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _226_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.each", table.concat(_226_, ", "), table.concat((__fn_2a_M__each_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.each = _220_ local function _229_() local _230_ do table.insert((__fn_2a_M__each_dispatch).help, "(where [f] (function? f))") local function _231_(...) if (1 == select("#", ...)) then local _232_ = {...} local function _233_(...) local f_215_ = (_232_)[1] return function_3f(f_215_) end if (((_G.type(_232_) == "table") and (nil ~= (_232_)[1])) and _233_(...)) then local f_215_ = (_232_)[1] local function _234_(f)




 local function _235_(_241) return M.each(f, _241) end return _235_ end return _234_ else return nil end else return nil end end table.insert((__fn_2a_M__each_dispatch).bodies, _231_) _230_ = M.each end local _238_ do table.insert((__fn_2a_M__each_dispatch).help, "(where [f stream] (and (function? f) (stream? stream)))") local function _239_(...) if (2 == select("#", ...)) then local _240_ = {...} local function _241_(...) local f_216_ = (_240_)[1] local stream_217_ = (_240_)[2] return (function_3f(f_216_) and stream_3f(stream_217_)) end if (((_G.type(_240_) == "table") and (nil ~= (_240_)[1]) and (nil ~= (_240_)[2])) and _241_(...)) then local f_216_ = (_240_)[1] local stream_217_ = (_240_)[2] local function _242_(f, stream)


 local function _243_(...) return stream_use_last_value_marker, f(...) end table.insert(stream.funs, _243_)
 return stream end return _242_ else return nil end else return nil end end table.insert((__fn_2a_M__each_dispatch).bodies, _239_) _238_ = M.each end local function _246_() table.insert((__fn_2a_M__each_dispatch).help, "(where [f enumerable] (and (function? f) (enumerable? enumerable)))") local function _247_(...) if (2 == select("#", ...)) then local _248_ = {...} local function _249_(...) local f_218_ = (_248_)[1] local enumerable_219_ = (_248_)[2] return (function_3f(f_218_) and enumerable_3f(enumerable_219_)) end if (((_G.type(_248_) == "table") and (nil ~= (_248_)[1]) and (nil ~= (_248_)[2])) and _249_(...)) then local f_218_ = (_248_)[1] local enumerable_219_ = (_248_)[2] local function _250_(f, enumerable)

 local fx local function _251_(acc, ...)
 f(...)
 return nil end fx = _251_
 return M.reduce(fx, nil, enumerable) end return _250_ else return nil end else return nil end end table.insert((__fn_2a_M__each_dispatch).bodies, _247_) return M.each end do local _ = {_230_, _238_, _246_()} end return M.each end setmetatable({nil, nil}, {__call = _229_})()

 local __fn_2a_M__flatten_dispatch = {bodies = {}, help = {}} local function _255_(...) if (0 == #(__fn_2a_M__flatten_dispatch).bodies) then error(("multi-arity function " .. "M.flatten" .. " has no bodies")) else end local _257_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__flatten_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _257_ = f_74_auto end if (nil ~= _257_) then local f_74_auto = _257_ return f_74_auto(...) elseif (_257_ == nil) then local view_77_auto do local _258_, _259_ = pcall(require, "fennel") if ((_258_ == true) and ((_G.type(_259_) == "table") and (nil ~= (_259_).view))) then local view_77_auto0 = (_259_).view view_77_auto = view_77_auto0 elseif ((_258_ == false) and true) then local __75_auto = _259_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _261_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _261_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.flatten", table.concat(_261_, ", "), table.concat((__fn_2a_M__flatten_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.flatten = _255_ local function _264_() local function _265_() table.insert((__fn_2a_M__flatten_dispatch).help, "(where [seq] (seq? seq))") local function _266_(...) if (1 == select("#", ...)) then local _267_ = {...} local function _268_(...) local seq_254_ = (_267_)[1] return seq_3f(seq_254_) end if (((_G.type(_267_) == "table") and (nil ~= (_267_)[1])) and _268_(...)) then local seq_254_ = (_267_)[1] local function _269_(seq)


 local fx local function _270_(acc, i, v)
 if seq_3f(v) then
 local tbl_17_auto = acc local i_18_auto = #tbl_17_auto for _, vv in ipairs(v) do local val_19_auto = vv if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end return tbl_17_auto else
 return M["append$"](acc, v) end end fx = _270_
 return M.reduce(fx, {}, seq) end return _269_ else return nil end else return nil end end table.insert((__fn_2a_M__flatten_dispatch).bodies, _266_) return M.flatten end do local _ = {_265_()} end return M.flatten end setmetatable({nil, nil}, {__call = _264_})()

 local __fn_2a_M__flat_map_dispatch = {bodies = {}, help = {}} local function _278_(...) if (0 == #(__fn_2a_M__flat_map_dispatch).bodies) then error(("multi-arity function " .. "M.flat-map" .. " has no bodies")) else end local _280_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__flat_map_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _280_ = f_74_auto end if (nil ~= _280_) then local f_74_auto = _280_ return f_74_auto(...) elseif (_280_ == nil) then local view_77_auto do local _281_, _282_ = pcall(require, "fennel") if ((_281_ == true) and ((_G.type(_282_) == "table") and (nil ~= (_282_).view))) then local view_77_auto0 = (_282_).view view_77_auto = view_77_auto0 elseif ((_281_ == false) and true) then local __75_auto = _282_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _284_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _284_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.flat-map", table.concat(_284_, ", "), table.concat((__fn_2a_M__flat_map_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["flat-map"] = _278_ local function _287_() local _288_ do table.insert((__fn_2a_M__flat_map_dispatch).help, "(where [f] (function? f))") local function _289_(...) if (1 == select("#", ...)) then local _290_ = {...} local function _291_(...) local f_275_ = (_290_)[1] return function_3f(f_275_) end if (((_G.type(_290_) == "table") and (nil ~= (_290_)[1])) and _291_(...)) then local f_275_ = (_290_)[1] local function _292_(f)

 local function _293_(_241) return M["flat-map"](f, _241) end return _293_ end return _292_ else return nil end else return nil end end table.insert((__fn_2a_M__flat_map_dispatch).bodies, _289_) _288_ = M["flat-map"] end local function _296_() table.insert((__fn_2a_M__flat_map_dispatch).help, "(where [f enumerable] (and (function? f) (enumerable? enumerable)))") local function _297_(...) if (2 == select("#", ...)) then local _298_ = {...} local function _299_(...) local f_276_ = (_298_)[1] local enumerable_277_ = (_298_)[2] return (function_3f(f_276_) and enumerable_3f(enumerable_277_)) end if (((_G.type(_298_) == "table") and (nil ~= (_298_)[1]) and (nil ~= (_298_)[2])) and _299_(...)) then local f_276_ = (_298_)[1] local enumerable_277_ = (_298_)[2] local function _300_(f, enumerable)

 return M.flatten(M.map(f, enumerable)) end return _300_ else return nil end else return nil end end table.insert((__fn_2a_M__flat_map_dispatch).bodies, _297_) return M["flat-map"] end do local _ = {_288_, _296_()} end return M["flat-map"] end setmetatable({nil, nil}, {__call = _287_})()




 local __fn_2a_M__filter_dispatch = {bodies = {}, help = {}} local function _308_(...) if (0 == #(__fn_2a_M__filter_dispatch).bodies) then error(("multi-arity function " .. "M.filter" .. " has no bodies")) else end local _310_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__filter_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _310_ = f_74_auto end if (nil ~= _310_) then local f_74_auto = _310_ return f_74_auto(...) elseif (_310_ == nil) then local view_77_auto do local _311_, _312_ = pcall(require, "fennel") if ((_311_ == true) and ((_G.type(_312_) == "table") and (nil ~= (_312_).view))) then local view_77_auto0 = (_312_).view view_77_auto = view_77_auto0 elseif ((_311_ == false) and true) then local __75_auto = _312_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _314_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _314_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.filter", table.concat(_314_, ", "), table.concat((__fn_2a_M__filter_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.filter = _308_ local function _317_() local _318_ do table.insert((__fn_2a_M__filter_dispatch).help, "(where [pred] (function? pred))") local function _319_(...) if (1 == select("#", ...)) then local _320_ = {...} local function _321_(...) local pred_303_ = (_320_)[1] return function_3f(pred_303_) end if (((_G.type(_320_) == "table") and (nil ~= (_320_)[1])) and _321_(...)) then local pred_303_ = (_320_)[1] local function _322_(pred)





 local function _323_(_241) return M.filter(pred, _241) end return _323_ end return _322_ else return nil end else return nil end end table.insert((__fn_2a_M__filter_dispatch).bodies, _319_) _318_ = M.filter end local _326_ do table.insert((__fn_2a_M__filter_dispatch).help, "(where [pred stream] (and (function? pred) (stream? stream)))") local function _327_(...) if (2 == select("#", ...)) then local _328_ = {...} local function _329_(...) local pred_304_ = (_328_)[1] local stream_305_ = (_328_)[2] return (function_3f(pred_304_) and stream_3f(stream_305_)) end if (((_G.type(_328_) == "table") and (nil ~= (_328_)[1]) and (nil ~= (_328_)[2])) and _329_(...)) then local pred_304_ = (_328_)[1] local stream_305_ = (_328_)[2] local function _330_(pred, stream)


 local function _331_(...) if pred(...) then
 return stream_use_last_value_marker else
 return stream_halt_marker end end table.insert(stream.funs, _331_)
 return stream end return _330_ else return nil end else return nil end end table.insert((__fn_2a_M__filter_dispatch).bodies, _327_) _326_ = M.filter end local function _335_() table.insert((__fn_2a_M__filter_dispatch).help, "(where [pred t] (and (function? pred) (enumerable? t)))") local function _336_(...) if (2 == select("#", ...)) then local _337_ = {...} local function _338_(...) local pred_306_ = (_337_)[1] local t_307_ = (_337_)[2] return (function_3f(pred_306_) and enumerable_3f(t_307_)) end if (((_G.type(_337_) == "table") and (nil ~= (_337_)[1]) and (nil ~= (_337_)[2])) and _338_(...)) then local pred_306_ = (_337_)[1] local t_307_ = (_337_)[2] local function _339_(pred, t)

 local insert if (seq_3f(t) or function_3f(t)) then
 local function _340_(_241, _242, _243) table.insert(_241, _243) return _241 end insert = _340_ else
 local function _341_(_241, _242, _243) _241[_242] = _243 return _241 end insert = _341_ end local insert_3f
 local function _343_(acc, k, v)
 if pred(k, v) then
 return insert(acc, k, v) else
 return acc end end insert_3f = _343_
 return M.reduce(insert_3f, {}, t) end return _339_ else return nil end else return nil end end table.insert((__fn_2a_M__filter_dispatch).bodies, _336_) return M.filter end do local _ = {_318_, _326_, _335_()} end return M.filter end setmetatable({nil, nil}, {__call = _317_})()

 M.reject = function(pred, ...)

 local function _347_(...) return not pred(...) end return M.filter(_347_, ...) end

 local __fn_2a_M__any_3f_dispatch = {bodies = {}, help = {}} local function _350_(...) if (0 == #(__fn_2a_M__any_3f_dispatch).bodies) then error(("multi-arity function " .. "M.any?" .. " has no bodies")) else end local _352_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__any_3f_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _352_ = f_74_auto end if (nil ~= _352_) then local f_74_auto = _352_ return f_74_auto(...) elseif (_352_ == nil) then local view_77_auto do local _353_, _354_ = pcall(require, "fennel") if ((_353_ == true) and ((_G.type(_354_) == "table") and (nil ~= (_354_).view))) then local view_77_auto0 = (_354_).view view_77_auto = view_77_auto0 elseif ((_353_ == false) and true) then local __75_auto = _354_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _356_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _356_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.any?", table.concat(_356_, ", "), table.concat((__fn_2a_M__any_3f_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["any?"] = _350_ local function _359_() local function _360_() table.insert((__fn_2a_M__any_3f_dispatch).help, "(where [f t] (and (function? f) (enumerable? t)))") local function _361_(...) if (2 == select("#", ...)) then local _362_ = {...} local function _363_(...) local f_348_ = (_362_)[1] local t_349_ = (_362_)[2] return (function_3f(f_348_) and enumerable_3f(t_349_)) end if (((_G.type(_362_) == "table") and (nil ~= (_362_)[1]) and (nil ~= (_362_)[2])) and _363_(...)) then local f_348_ = (_362_)[1] local t_349_ = (_362_)[2] local function _364_(f, t)


 local function _365_(_acc, ...) if f(...) then
 return M.reduced(true) else
 return false end end return M.reduce(_365_, false, t) end return _364_ else return nil end else return nil end end table.insert((__fn_2a_M__any_3f_dispatch).bodies, _361_) return M["any?"] end do local _ = {_360_()} end return M["any?"] end setmetatable({nil, nil}, {__call = _359_})()


 local __fn_2a_M__all_3f_dispatch = {bodies = {}, help = {}} local function _371_(...) if (0 == #(__fn_2a_M__all_3f_dispatch).bodies) then error(("multi-arity function " .. "M.all?" .. " has no bodies")) else end local _373_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__all_3f_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _373_ = f_74_auto end if (nil ~= _373_) then local f_74_auto = _373_ return f_74_auto(...) elseif (_373_ == nil) then local view_77_auto do local _374_, _375_ = pcall(require, "fennel") if ((_374_ == true) and ((_G.type(_375_) == "table") and (nil ~= (_375_).view))) then local view_77_auto0 = (_375_).view view_77_auto = view_77_auto0 elseif ((_374_ == false) and true) then local __75_auto = _375_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _377_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _377_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.all?", table.concat(_377_, ", "), table.concat((__fn_2a_M__all_3f_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["all?"] = _371_ local function _380_() local function _381_() table.insert((__fn_2a_M__all_3f_dispatch).help, "(where [f t] (and (function? f) (enumerable? t)))") local function _382_(...) if (2 == select("#", ...)) then local _383_ = {...} local function _384_(...) local f_369_ = (_383_)[1] local t_370_ = (_383_)[2] return (function_3f(f_369_) and enumerable_3f(t_370_)) end if (((_G.type(_383_) == "table") and (nil ~= (_383_)[1]) and (nil ~= (_383_)[2])) and _384_(...)) then local f_369_ = (_383_)[1] local t_370_ = (_383_)[2] local function _385_(f, t)


 local function _386_(acc, ...) if (acc and f(...)) then
 return true else
 return M.reduced(false) end end return M.reduce(_386_, true, t) end return _385_ else return nil end else return nil end end table.insert((__fn_2a_M__all_3f_dispatch).bodies, _382_) return M["all?"] end do local _ = {_381_()} end return M["all?"] end setmetatable({nil, nil}, {__call = _380_})()


 local __fn_2a_M__find_dispatch = {bodies = {}, help = {}} local function _392_(...) if (0 == #(__fn_2a_M__find_dispatch).bodies) then error(("multi-arity function " .. "M.find" .. " has no bodies")) else end local _394_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__find_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _394_ = f_74_auto end if (nil ~= _394_) then local f_74_auto = _394_ return f_74_auto(...) elseif (_394_ == nil) then local view_77_auto do local _395_, _396_ = pcall(require, "fennel") if ((_395_ == true) and ((_G.type(_396_) == "table") and (nil ~= (_396_).view))) then local view_77_auto0 = (_396_).view view_77_auto = view_77_auto0 elseif ((_395_ == false) and true) then local __75_auto = _396_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _398_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _398_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.find", table.concat(_398_, ", "), table.concat((__fn_2a_M__find_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.find = _392_ local function _401_() local function _402_() table.insert((__fn_2a_M__find_dispatch).help, "(where [f e] (and (function? f) (enumerable? e)))") local function _403_(...) if (2 == select("#", ...)) then local _404_ = {...} local function _405_(...) local f_390_ = (_404_)[1] local e_391_ = (_404_)[2] return (function_3f(f_390_) and enumerable_3f(e_391_)) end if (((_G.type(_404_) == "table") and (nil ~= (_404_)[1]) and (nil ~= (_404_)[2])) and _405_(...)) then local f_390_ = (_404_)[1] local e_391_ = (_404_)[2] local function _406_(f, e)





 local reducer local function _407_(_, ...)
 if f(...) then

 return M.reduced(M.pack(...)) else
 return nil end end reducer = M.reduce(_407_)
 local _409_ = reducer(nil, e) if (nil ~= _409_) then local any = _409_
 return M.unpack(any) elseif (_409_ == nil) then
 return nil else return nil end end return _406_ else return nil end else return nil end end table.insert((__fn_2a_M__find_dispatch).bodies, _403_) return M.find end do local _ = {_402_()} end return M.find end setmetatable({nil, nil}, {__call = _401_})()

 local __fn_2a_M__find_key_dispatch = {bodies = {}, help = {}} local function _415_(...) if (0 == #(__fn_2a_M__find_key_dispatch).bodies) then error(("multi-arity function " .. "M.find-key" .. " has no bodies")) else end local _417_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__find_key_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _417_ = f_74_auto end if (nil ~= _417_) then local f_74_auto = _417_ return f_74_auto(...) elseif (_417_ == nil) then local view_77_auto do local _418_, _419_ = pcall(require, "fennel") if ((_418_ == true) and ((_G.type(_419_) == "table") and (nil ~= (_419_).view))) then local view_77_auto0 = (_419_).view view_77_auto = view_77_auto0 elseif ((_418_ == false) and true) then local __75_auto = _419_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _421_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _421_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.find-key", table.concat(_421_, ", "), table.concat((__fn_2a_M__find_key_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["find-key"] = _415_ local function _424_() local function _425_() table.insert((__fn_2a_M__find_key_dispatch).help, "(where [f t] (and (function? f) (table? t)))") local function _426_(...) if (2 == select("#", ...)) then local _427_ = {...} local function _428_(...) local f_413_ = (_427_)[1] local t_414_ = (_427_)[2] return (function_3f(f_413_) and table_3f(t_414_)) end if (((_G.type(_427_) == "table") and (nil ~= (_427_)[1]) and (nil ~= (_427_)[2])) and _428_(...)) then local f_413_ = (_427_)[1] local t_414_ = (_427_)[2] local function _429_(f, t)


 local _430_, _431_ = M.find(f, t) if ((nil ~= _430_) and true) then local k = _430_ local _ = _431_
 return k elseif true then local _ = _430_
 return nil else return nil end end return _429_ else return nil end else return nil end end table.insert((__fn_2a_M__find_key_dispatch).bodies, _426_) return M["find-key"] end do local _ = {_425_()} end return M["find-key"] end setmetatable({nil, nil}, {__call = _424_})()

 local __fn_2a_M__find_value_dispatch = {bodies = {}, help = {}} local function _437_(...) if (0 == #(__fn_2a_M__find_value_dispatch).bodies) then error(("multi-arity function " .. "M.find-value" .. " has no bodies")) else end local _439_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__find_value_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _439_ = f_74_auto end if (nil ~= _439_) then local f_74_auto = _439_ return f_74_auto(...) elseif (_439_ == nil) then local view_77_auto do local _440_, _441_ = pcall(require, "fennel") if ((_440_ == true) and ((_G.type(_441_) == "table") and (nil ~= (_441_).view))) then local view_77_auto0 = (_441_).view view_77_auto = view_77_auto0 elseif ((_440_ == false) and true) then local __75_auto = _441_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _443_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _443_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.find-value", table.concat(_443_, ", "), table.concat((__fn_2a_M__find_value_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["find-value"] = _437_ local function _446_() local function _447_() table.insert((__fn_2a_M__find_value_dispatch).help, "(where [f t] (and (function? f) (table? t)))") local function _448_(...) if (2 == select("#", ...)) then local _449_ = {...} local function _450_(...) local f_435_ = (_449_)[1] local t_436_ = (_449_)[2] return (function_3f(f_435_) and table_3f(t_436_)) end if (((_G.type(_449_) == "table") and (nil ~= (_449_)[1]) and (nil ~= (_449_)[2])) and _450_(...)) then local f_435_ = (_449_)[1] local t_436_ = (_449_)[2] local function _451_(f, t)


 local _452_, _453_ = M.find(f, t) if (true and (nil ~= _453_)) then local _ = _452_ local v = _453_
 return v elseif true then local _ = _452_
 return nil else return nil end end return _451_ else return nil end else return nil end end table.insert((__fn_2a_M__find_value_dispatch).bodies, _448_) return M["find-value"] end do local _ = {_447_()} end return M["find-value"] end setmetatable({nil, nil}, {__call = _446_})()

 local __fn_2a_M__group_by_dispatch = {bodies = {}, help = {}} local function _462_(...) if (0 == #(__fn_2a_M__group_by_dispatch).bodies) then error(("multi-arity function " .. "M.group-by" .. " has no bodies")) else end local _464_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__group_by_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _464_ = f_74_auto end if (nil ~= _464_) then local f_74_auto = _464_ return f_74_auto(...) elseif (_464_ == nil) then local view_77_auto do local _465_, _466_ = pcall(require, "fennel") if ((_465_ == true) and ((_G.type(_466_) == "table") and (nil ~= (_466_).view))) then local view_77_auto0 = (_466_).view view_77_auto = view_77_auto0 elseif ((_465_ == false) and true) then local __75_auto = _466_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _468_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _468_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.group-by", table.concat(_468_, ", "), table.concat((__fn_2a_M__group_by_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["group-by"] = _462_ local function _471_() local _472_ do table.insert((__fn_2a_M__group_by_dispatch).help, "(where [f] (function? f))") local function _473_(...) if (1 == select("#", ...)) then local _474_ = {...} local function _475_(...) local f_457_ = (_474_)[1] return function_3f(f_457_) end if (((_G.type(_474_) == "table") and (nil ~= (_474_)[1])) and _475_(...)) then local f_457_ = (_474_)[1] local function _476_(f)











 local function _477_(_241) return M["group-by"](f, _241) end return _477_ end return _476_ else return nil end else return nil end end table.insert((__fn_2a_M__group_by_dispatch).bodies, _473_) _472_ = M["group-by"] end local _480_ do table.insert((__fn_2a_M__group_by_dispatch).help, "(where [f e] (and (function? f) (table? e)))") local function _481_(...) if (2 == select("#", ...)) then local _482_ = {...} local function _483_(...) local f_458_ = (_482_)[1] local e_459_ = (_482_)[2] return (function_3f(f_458_) and table_3f(e_459_)) end if (((_G.type(_482_) == "table") and (nil ~= (_482_)[1]) and (nil ~= (_482_)[2])) and _483_(...)) then local f_458_ = (_482_)[1] local e_459_ = (_482_)[2] local function _484_(f, e)



 local function _485_(acc, k, v)
 local key, val = f(k, v)
 local _ = assert((nil ~= key), "group-by key may not be nil")
 local val0 = (val or v)
 local group = (acc[key] or {})
 return M["set$"](acc, key, M["append$"](group, val0)) end return M.reduce(_485_, {}, e) end return _484_ else return nil end else return nil end end table.insert((__fn_2a_M__group_by_dispatch).bodies, _481_) _480_ = M["group-by"] end local function _488_() table.insert((__fn_2a_M__group_by_dispatch).help, "(where [f e] (and (function? f) (function? e)))") local function _489_(...) if (2 == select("#", ...)) then local _490_ = {...} local function _491_(...) local f_460_ = (_490_)[1] local e_461_ = (_490_)[2] return (function_3f(f_460_) and function_3f(e_461_)) end if (((_G.type(_490_) == "table") and (nil ~= (_490_)[1]) and (nil ~= (_490_)[2])) and _491_(...)) then local f_460_ = (_490_)[1] local e_461_ = (_490_)[2] local function _492_(f, e)




 local function _493_(acc, ...)
 local key, val = f(...)
 local _ = assert((nil ~= key), "group-by key may not be nil")
 local _0 = assert((nil ~= val), "group-by on function must return (key value)")

 local group = (acc[key] or {})
 return M["set$"](acc, key, M["append$"](group, val)) end return M.reduce(_493_, {}, e) end return _492_ else return nil end else return nil end end table.insert((__fn_2a_M__group_by_dispatch).bodies, _489_) return M["group-by"] end do local _ = {_472_, _480_, _488_()} end return M["group-by"] end setmetatable({nil, nil}, {__call = _471_})()


 local __fn_2a_take_dispatch = {bodies = {}, help = {}} local take local function _500_(...) if (0 == #(__fn_2a_take_dispatch).bodies) then error(("multi-arity function " .. "take" .. " has no bodies")) else end local _502_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_take_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _502_ = f_74_auto end if (nil ~= _502_) then local f_74_auto = _502_ return f_74_auto(...) elseif (_502_ == nil) then local view_77_auto do local _503_, _504_ = pcall(require, "fennel") if ((_503_ == true) and ((_G.type(_504_) == "table") and (nil ~= (_504_).view))) then local view_77_auto0 = (_504_).view view_77_auto = view_77_auto0 elseif ((_503_ == false) and true) then local __75_auto = _504_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _506_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _506_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "take", table.concat(_506_, ", "), table.concat((__fn_2a_take_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end take = _500_ local function _509_() local _510_ do table.insert((__fn_2a_take_dispatch).help, "(where [e n] (and (seq? e) (number? n)))") local function _511_(...) if (2 == select("#", ...)) then local _512_ = {...} local function _513_(...) local e_496_ = (_512_)[1] local n_497_ = (_512_)[2] return (seq_3f(e_496_) and number_3f(n_497_)) end if (((_G.type(_512_) == "table") and (nil ~= (_512_)[1]) and (nil ~= (_512_)[2])) and _513_(...)) then local e_496_ = (_512_)[1] local n_497_ = (_512_)[2] local function _514_(e, n)

 return error("todo") end return _514_ else return nil end else return nil end end table.insert((__fn_2a_take_dispatch).bodies, _511_) _510_ = take end local function _517_() table.insert((__fn_2a_take_dispatch).help, "(where [e n] (and (function? e) (number? n)))") local function _518_(...) if (2 == select("#", ...)) then local _519_ = {...} local function _520_(...) local e_498_ = (_519_)[1] local n_499_ = (_519_)[2] return (function_3f(e_498_) and number_3f(n_499_)) end if (((_G.type(_519_) == "table") and (nil ~= (_519_)[1]) and (nil ~= (_519_)[2])) and _520_(...)) then local e_498_ = (_519_)[1] local n_499_ = (_519_)[2] local function _521_(e, n)

 return error("todo") end return _521_ else return nil end else return nil end end table.insert((__fn_2a_take_dispatch).bodies, _518_) return take end do local _ = {_510_, _517_()} end return take end setmetatable({nil, nil}, {__call = _509_})()

 local __fn_2a_M__pluck_dispatch = {bodies = {}, help = {}} local function _526_(...) if (0 == #(__fn_2a_M__pluck_dispatch).bodies) then error(("multi-arity function " .. "M.pluck" .. " has no bodies")) else end local _528_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__pluck_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _528_ = f_74_auto end if (nil ~= _528_) then local f_74_auto = _528_ return f_74_auto(...) elseif (_528_ == nil) then local view_77_auto do local _529_, _530_ = pcall(require, "fennel") if ((_529_ == true) and ((_G.type(_530_) == "table") and (nil ~= (_530_).view))) then local view_77_auto0 = (_530_).view view_77_auto = view_77_auto0 elseif ((_529_ == false) and true) then local __75_auto = _530_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _532_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _532_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.pluck", table.concat(_532_, ", "), table.concat((__fn_2a_M__pluck_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.pluck = _526_ local function _535_() local function _536_() table.insert((__fn_2a_M__pluck_dispatch).help, "(where [t ks] (and (table? t) (seq? ks)))") local function _537_(...) if (2 == select("#", ...)) then local _538_ = {...} local function _539_(...) local t_524_ = (_538_)[1] local ks_525_ = (_538_)[2] return (table_3f(t_524_) and seq_3f(ks_525_)) end if (((_G.type(_538_) == "table") and (nil ~= (_538_)[1]) and (nil ~= (_538_)[2])) and _539_(...)) then local t_524_ = (_538_)[1] local ks_525_ = (_538_)[2] local function _540_(t, ks)



 local function _541_(_241, _242) return t[_242] end return M.map(_541_, ks) end return _540_ else return nil end else return nil end end table.insert((__fn_2a_M__pluck_dispatch).bodies, _537_) return M.pluck end do local _ = {_536_()} end return M.pluck end setmetatable({nil, nil}, {__call = _535_})()



 local function negable_seq_index(seq, i, ctx)







 assert(ctx, "ind-mod requires :insert or :remove ctx")
 local _544_ = {i, #seq, ctx} local function _545_() local n = (_544_)[2] return (function(_546_,_547_,_548_) return (_546_ < _547_) and (_547_ < _548_) end)(0,i,(n + 1)) end if (((_G.type(_544_) == "table") and ((_544_)[1] == i) and (nil ~= (_544_)[2])) and _545_()) then local n = (_544_)[2]
 return i elseif ((_G.type(_544_) == "table") and ((_544_)[1] == -1) and ((_544_)[2] == 0)) then
 return 1 else local function _549_() local n = (_544_)[2] return (function(_550_,_551_,_552_) return (_550_ <= _551_) and (_551_ <= _552_) end)(((-1 * n) - 1),i,-1) end if (((_G.type(_544_) == "table") and ((_544_)[1] == i) and (nil ~= (_544_)[2]) and ((_544_)[3] == "insert")) and _549_()) then local n = (_544_)[2]

 return (n + 2 + i) else local function _553_() local n = (_544_)[2] return (function(_554_,_555_,_556_) return (_554_ <= _555_) and (_555_ <= _556_) end)((-1 * n),i,-1) end if (((_G.type(_544_) == "table") and ((_544_)[1] == i) and (nil ~= (_544_)[2]) and ((_544_)[3] == "remove")) and _553_()) then local n = (_544_)[2]
 return (n + 1 + i) else local function _557_() local n = (_544_)[2] return (n < i) end if (((_G.type(_544_) == "table") and ((_544_)[1] == i) and (nil ~= (_544_)[2])) and _557_()) then local n = (_544_)[2]
 return error(string.format("index %d overbounds", i, n)) else local function _558_() local n = (_544_)[2] return (i < 0) end if (((_G.type(_544_) == "table") and ((_544_)[1] == i) and (nil ~= (_544_)[2])) and _558_()) then local n = (_544_)[2]
 return error(string.format("index %d underbounds", i, n)) elseif ((_G.type(_544_) == "table") and ((_544_)[1] == 0) and (nil ~= (_544_)[2])) then local n = (_544_)[2]
 return error(string.format("index 0 invalid, use 1 or %d", ((-1 * n) - 1))) else return nil end end end end end end

 local __fn_2a_M__insert_24_dispatch = {bodies = {}, help = {}} local function _563_(...) if (0 == #(__fn_2a_M__insert_24_dispatch).bodies) then error(("multi-arity function " .. "M.insert$" .. " has no bodies")) else end local _565_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__insert_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _565_ = f_74_auto end if (nil ~= _565_) then local f_74_auto = _565_ return f_74_auto(...) elseif (_565_ == nil) then local view_77_auto do local _566_, _567_ = pcall(require, "fennel") if ((_566_ == true) and ((_G.type(_567_) == "table") and (nil ~= (_567_).view))) then local view_77_auto0 = (_567_).view view_77_auto = view_77_auto0 elseif ((_566_ == false) and true) then local __75_auto = _567_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _569_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _569_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.insert$", table.concat(_569_, ", "), table.concat((__fn_2a_M__insert_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["insert$"] = _563_ local function _572_() local function _573_() table.insert((__fn_2a_M__insert_24_dispatch).help, "(where [seq i v] (and (seq? seq) (number? i)))") local function _574_(...) if (3 == select("#", ...)) then local _575_ = {...} local function _576_(...) local seq_560_ = (_575_)[1] local i_561_ = (_575_)[2] local v_562_ = (_575_)[3] return (seq_3f(seq_560_) and number_3f(i_561_)) end if (((_G.type(_575_) == "table") and (nil ~= (_575_)[1]) and (nil ~= (_575_)[2]) and (nil ~= (_575_)[3])) and _576_(...)) then local seq_560_ = (_575_)[1] local i_561_ = (_575_)[2] local v_562_ = (_575_)[3] local function _577_(seq, i, v)


 table.insert(seq, negable_seq_index(seq, i, "insert"), v) return seq end return _577_ else return nil end else return nil end end table.insert((__fn_2a_M__insert_24_dispatch).bodies, _574_) return M["insert$"] end do local _ = {_573_()} end return M["insert$"] end setmetatable({nil, nil}, {__call = _572_})()


 local __fn_2a_M__remove_24_dispatch = {bodies = {}, help = {}} local function _582_(...) if (0 == #(__fn_2a_M__remove_24_dispatch).bodies) then error(("multi-arity function " .. "M.remove$" .. " has no bodies")) else end local _584_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__remove_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _584_ = f_74_auto end if (nil ~= _584_) then local f_74_auto = _584_ return f_74_auto(...) elseif (_584_ == nil) then local view_77_auto do local _585_, _586_ = pcall(require, "fennel") if ((_585_ == true) and ((_G.type(_586_) == "table") and (nil ~= (_586_).view))) then local view_77_auto0 = (_586_).view view_77_auto = view_77_auto0 elseif ((_585_ == false) and true) then local __75_auto = _586_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _588_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _588_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.remove$", table.concat(_588_, ", "), table.concat((__fn_2a_M__remove_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["remove$"] = _582_ local function _591_() local function _592_() table.insert((__fn_2a_M__remove_24_dispatch).help, "(where [seq i] (and (seq? seq) (number? i)))") local function _593_(...) if (2 == select("#", ...)) then local _594_ = {...} local function _595_(...) local seq_580_ = (_594_)[1] local i_581_ = (_594_)[2] return (seq_3f(seq_580_) and number_3f(i_581_)) end if (((_G.type(_594_) == "table") and (nil ~= (_594_)[1]) and (nil ~= (_594_)[2])) and _595_(...)) then local seq_580_ = (_594_)[1] local i_581_ = (_594_)[2] local function _596_(seq, i)


 table.remove(seq, negable_seq_index(seq, i, "remove")) return seq end return _596_ else return nil end else return nil end end table.insert((__fn_2a_M__remove_24_dispatch).bodies, _593_) return M["remove$"] end do local _ = {_592_()} end return M["remove$"] end setmetatable({nil, nil}, {__call = _591_})()


 local __fn_2a_M__append_24_dispatch = {bodies = {}, help = {}} local function _600_(...) if (0 == #(__fn_2a_M__append_24_dispatch).bodies) then error(("multi-arity function " .. "M.append$" .. " has no bodies")) else end local _602_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__append_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _602_ = f_74_auto end if (nil ~= _602_) then local f_74_auto = _602_ return f_74_auto(...) elseif (_602_ == nil) then local view_77_auto do local _603_, _604_ = pcall(require, "fennel") if ((_603_ == true) and ((_G.type(_604_) == "table") and (nil ~= (_604_).view))) then local view_77_auto0 = (_604_).view view_77_auto = view_77_auto0 elseif ((_603_ == false) and true) then local __75_auto = _604_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _606_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _606_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.append$", table.concat(_606_, ", "), table.concat((__fn_2a_M__append_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["append$"] = _600_ local function _609_() local function _610_() table.insert((__fn_2a_M__append_24_dispatch).help, "(where [seq ...] (and (seq? seq) (< 0 (select \"#\" ...))))") local function _611_(...) if (1 <= select("#", ...)) then local _612_ = {...} local function _613_(...) local seq_599_ = (_612_)[1] return (seq_3f(seq_599_) and (0 < select("#", select(2, ...)))) end if (((_G.type(_612_) == "table") and (nil ~= (_612_)[1])) and _613_(...)) then local seq_599_ = (_612_)[1] local function _614_(seq, ...)


 local _let_615_ = M.pack(...) local n = _let_615_["n"] local vals = _let_615_
 for i = 1, n do
 M["insert$"](seq, -1, vals[i]) end
 return seq end return _614_ else return nil end else return nil end end table.insert((__fn_2a_M__append_24_dispatch).bodies, _611_) return M["append$"] end do local _ = {_610_()} end return M["append$"] end setmetatable({nil, nil}, {__call = _609_})()

 local __fn_2a_M__concat_24_dispatch = {bodies = {}, help = {}} local function _623_(...) if (0 == #(__fn_2a_M__concat_24_dispatch).bodies) then error(("multi-arity function " .. "M.concat$" .. " has no bodies")) else end local _625_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__concat_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _625_ = f_74_auto end if (nil ~= _625_) then local f_74_auto = _625_ return f_74_auto(...) elseif (_625_ == nil) then local view_77_auto do local _626_, _627_ = pcall(require, "fennel") if ((_626_ == true) and ((_G.type(_627_) == "table") and (nil ~= (_627_).view))) then local view_77_auto0 = (_627_).view view_77_auto = view_77_auto0 elseif ((_626_ == false) and true) then local __75_auto = _627_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _629_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _629_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.concat$", table.concat(_629_, ", "), table.concat((__fn_2a_M__concat_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["concat$"] = _623_ local function _632_() local _633_ do table.insert((__fn_2a_M__concat_24_dispatch).help, "(where [seq seq-1] (and (seq? seq) (seq? seq-1)))") local function _634_(...) if (2 == select("#", ...)) then local _635_ = {...} local function _636_(...) local seq_618_ = (_635_)[1] local seq_1_619_ = (_635_)[2] return (seq_3f(seq_618_) and seq_3f(seq_1_619_)) end if (((_G.type(_635_) == "table") and (nil ~= (_635_)[1]) and (nil ~= (_635_)[2])) and _636_(...)) then local seq_618_ = (_635_)[1] local seq_1_619_ = (_635_)[2] local function _637_(seq, seq_1)


 local tbl_17_auto = seq local i_18_auto = #tbl_17_auto for _, v in ipairs(seq_1) do local val_19_auto = v if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end return tbl_17_auto end return _637_ else return nil end else return nil end end table.insert((__fn_2a_M__concat_24_dispatch).bodies, _634_) _633_ = M["concat$"] end local function _641_() table.insert((__fn_2a_M__concat_24_dispatch).help, "(where [seq seq-1 seq-2 ...] (and (seq? seq) (seq? seq-1) (seq? seq-2)))") local function _642_(...) if (3 <= select("#", ...)) then local _643_ = {...} local function _644_(...) local seq_620_ = (_643_)[1] local seq_1_621_ = (_643_)[2] local seq_2_622_ = (_643_)[3] return (seq_3f(seq_620_) and seq_3f(seq_1_621_) and seq_3f(seq_2_622_)) end if (((_G.type(_643_) == "table") and (nil ~= (_643_)[1]) and (nil ~= (_643_)[2]) and (nil ~= (_643_)[3])) and _644_(...)) then local seq_620_ = (_643_)[1] local seq_1_621_ = (_643_)[2] local seq_2_622_ = (_643_)[3] local function _645_(seq, seq_1, seq_2, ...)

 return M["concat$"](M["concat$"](seq, seq_1), seq_2, ...) end return _645_ else return nil end else return nil end end table.insert((__fn_2a_M__concat_24_dispatch).bodies, _642_) return M["concat$"] end do local _ = {_633_, _641_()} end return M["concat$"] end setmetatable({nil, nil}, {__call = _632_})()

 local __fn_2a_M__shuffle_24_dispatch = {bodies = {}, help = {}} local function _649_(...) if (0 == #(__fn_2a_M__shuffle_24_dispatch).bodies) then error(("multi-arity function " .. "M.shuffle$" .. " has no bodies")) else end local _651_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__shuffle_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _651_ = f_74_auto end if (nil ~= _651_) then local f_74_auto = _651_ return f_74_auto(...) elseif (_651_ == nil) then local view_77_auto do local _652_, _653_ = pcall(require, "fennel") if ((_652_ == true) and ((_G.type(_653_) == "table") and (nil ~= (_653_).view))) then local view_77_auto0 = (_653_).view view_77_auto = view_77_auto0 elseif ((_652_ == false) and true) then local __75_auto = _653_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _655_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _655_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.shuffle$", table.concat(_655_, ", "), table.concat((__fn_2a_M__shuffle_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["shuffle$"] = _649_ local function _658_() local function _659_() table.insert((__fn_2a_M__shuffle_24_dispatch).help, "(where [seq] (seq? seq))") local function _660_(...) if (1 == select("#", ...)) then local _661_ = {...} local function _662_(...) local seq_648_ = (_661_)[1] return seq_3f(seq_648_) end if (((_G.type(_661_) == "table") and (nil ~= (_661_)[1])) and _662_(...)) then local seq_648_ = (_661_)[1] local function _663_(seq)



 for i = #seq, 1, -1 do
 local j = math.random(1, i)
 local hold = seq[j]
 seq[j] = seq[i]
 seq[i] = hold end
 return seq end return _663_ else return nil end else return nil end end table.insert((__fn_2a_M__shuffle_24_dispatch).bodies, _660_) return M["shuffle$"] end do local _ = {_659_()} end return M["shuffle$"] end setmetatable({nil, nil}, {__call = _658_})()

 local __fn_2a_M__hd_dispatch = {bodies = {}, help = {}} local function _667_(...) if (0 == #(__fn_2a_M__hd_dispatch).bodies) then error(("multi-arity function " .. "M.hd" .. " has no bodies")) else end local _669_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__hd_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _669_ = f_74_auto end if (nil ~= _669_) then local f_74_auto = _669_ return f_74_auto(...) elseif (_669_ == nil) then local view_77_auto do local _670_, _671_ = pcall(require, "fennel") if ((_670_ == true) and ((_G.type(_671_) == "table") and (nil ~= (_671_).view))) then local view_77_auto0 = (_671_).view view_77_auto = view_77_auto0 elseif ((_670_ == false) and true) then local __75_auto = _671_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _673_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _673_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.hd", table.concat(_673_, ", "), table.concat((__fn_2a_M__hd_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.hd = _667_ local function _676_() local function _677_() table.insert((__fn_2a_M__hd_dispatch).help, "(where [seq] (seq? seq))") local function _678_(...) if (1 == select("#", ...)) then local _679_ = {...} local function _680_(...) local seq_666_ = (_679_)[1] return seq_3f(seq_666_) end if (((_G.type(_679_) == "table") and (nil ~= (_679_)[1])) and _680_(...)) then local seq_666_ = (_679_)[1] local function _681_(seq)


 local _let_682_ = seq local h = _let_682_[1]
 return h end return _681_ else return nil end else return nil end end table.insert((__fn_2a_M__hd_dispatch).bodies, _678_) return M.hd end do local _ = {_677_()} end return M.hd end setmetatable({nil, nil}, {__call = _676_})()

 local __fn_2a_M__tl_dispatch = {bodies = {}, help = {}} local function _686_(...) if (0 == #(__fn_2a_M__tl_dispatch).bodies) then error(("multi-arity function " .. "M.tl" .. " has no bodies")) else end local _688_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__tl_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _688_ = f_74_auto end if (nil ~= _688_) then local f_74_auto = _688_ return f_74_auto(...) elseif (_688_ == nil) then local view_77_auto do local _689_, _690_ = pcall(require, "fennel") if ((_689_ == true) and ((_G.type(_690_) == "table") and (nil ~= (_690_).view))) then local view_77_auto0 = (_690_).view view_77_auto = view_77_auto0 elseif ((_689_ == false) and true) then local __75_auto = _690_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _692_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _692_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.tl", table.concat(_692_, ", "), table.concat((__fn_2a_M__tl_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.tl = _686_ local function _695_() local function _696_() table.insert((__fn_2a_M__tl_dispatch).help, "(where [seq] (seq? seq))") local function _697_(...) if (1 == select("#", ...)) then local _698_ = {...} local function _699_(...) local seq_685_ = (_698_)[1] return seq_3f(seq_685_) end if (((_G.type(_698_) == "table") and (nil ~= (_698_)[1])) and _699_(...)) then local seq_685_ = (_698_)[1] local function _700_(seq)


 local _let_701_ = seq local _ = _let_701_[1] local tail = (function (t, k, e) local mt = getmetatable(t) if 'table' == type(mt) and mt.__fennelrest then return mt.__fennelrest(t, k) elseif e then local rest = {} for k, v in pairs(t) do if not e[k] then rest[k] = v end end return rest else return {(table.unpack or unpack)(t, k)} end end)(_let_701_, 2)
 return tail end return _700_ else return nil end else return nil end end table.insert((__fn_2a_M__tl_dispatch).bodies, _697_) return M.tl end do local _ = {_696_()} end return M.tl end setmetatable({nil, nil}, {__call = _695_})()

 local __fn_2a_M__first_dispatch = {bodies = {}, help = {}} local function _705_(...) if (0 == #(__fn_2a_M__first_dispatch).bodies) then error(("multi-arity function " .. "M.first" .. " has no bodies")) else end local _707_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__first_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _707_ = f_74_auto end if (nil ~= _707_) then local f_74_auto = _707_ return f_74_auto(...) elseif (_707_ == nil) then local view_77_auto do local _708_, _709_ = pcall(require, "fennel") if ((_708_ == true) and ((_G.type(_709_) == "table") and (nil ~= (_709_).view))) then local view_77_auto0 = (_709_).view view_77_auto = view_77_auto0 elseif ((_708_ == false) and true) then local __75_auto = _709_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _711_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _711_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.first", table.concat(_711_, ", "), table.concat((__fn_2a_M__first_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.first = _705_ local function _714_() local function _715_() table.insert((__fn_2a_M__first_dispatch).help, "(where [seq] (seq? seq))") local function _716_(...) if (1 == select("#", ...)) then local _717_ = {...} local function _718_(...) local seq_704_ = (_717_)[1] return seq_3f(seq_704_) end if (((_G.type(_717_) == "table") and (nil ~= (_717_)[1])) and _718_(...)) then local seq_704_ = (_717_)[1] local function _719_(seq)


 return M.hd(seq) end return _719_ else return nil end else return nil end end table.insert((__fn_2a_M__first_dispatch).bodies, _716_) return M.first end do local _ = {_715_()} end return M.first end setmetatable({nil, nil}, {__call = _714_})()

 local __fn_2a_M__last_dispatch = {bodies = {}, help = {}} local function _723_(...) if (0 == #(__fn_2a_M__last_dispatch).bodies) then error(("multi-arity function " .. "M.last" .. " has no bodies")) else end local _725_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__last_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _725_ = f_74_auto end if (nil ~= _725_) then local f_74_auto = _725_ return f_74_auto(...) elseif (_725_ == nil) then local view_77_auto do local _726_, _727_ = pcall(require, "fennel") if ((_726_ == true) and ((_G.type(_727_) == "table") and (nil ~= (_727_).view))) then local view_77_auto0 = (_727_).view view_77_auto = view_77_auto0 elseif ((_726_ == false) and true) then local __75_auto = _727_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _729_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _729_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.last", table.concat(_729_, ", "), table.concat((__fn_2a_M__last_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.last = _723_ local function _732_() local function _733_() table.insert((__fn_2a_M__last_dispatch).help, "(where [seq] (seq? seq))") local function _734_(...) if (1 == select("#", ...)) then local _735_ = {...} local function _736_(...) local seq_722_ = (_735_)[1] return seq_3f(seq_722_) end if (((_G.type(_735_) == "table") and (nil ~= (_735_)[1])) and _736_(...)) then local seq_722_ = (_735_)[1] local function _737_(seq)


 return seq[#seq] end return _737_ else return nil end else return nil end end table.insert((__fn_2a_M__last_dispatch).bodies, _734_) return M.last end do local _ = {_733_()} end return M.last end setmetatable({nil, nil}, {__call = _732_})()

 local __fn_2a_M__unique_dispatch = {bodies = {}, help = {}} local function _743_(...) if (0 == #(__fn_2a_M__unique_dispatch).bodies) then error(("multi-arity function " .. "M.unique" .. " has no bodies")) else end local _745_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__unique_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _745_ = f_74_auto end if (nil ~= _745_) then local f_74_auto = _745_ return f_74_auto(...) elseif (_745_ == nil) then local view_77_auto do local _746_, _747_ = pcall(require, "fennel") if ((_746_ == true) and ((_G.type(_747_) == "table") and (nil ~= (_747_).view))) then local view_77_auto0 = (_747_).view view_77_auto = view_77_auto0 elseif ((_746_ == false) and true) then local __75_auto = _747_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _749_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _749_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.unique", table.concat(_749_, ", "), table.concat((__fn_2a_M__unique_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.unique = _743_ local function _752_() local _753_ do table.insert((__fn_2a_M__unique_dispatch).help, "(where [seq] (seq? seq))") local function _754_(...) if (1 == select("#", ...)) then local _755_ = {...} local function _756_(...) local seq_740_ = (_755_)[1] return seq_3f(seq_740_) end if (((_G.type(_755_) == "table") and (nil ~= (_755_)[1])) and _756_(...)) then local seq_740_ = (_755_)[1] local function _757_(seq)







 local function _758_(_241) return _241 end return M.unique(seq, _758_) end return _757_ else return nil end else return nil end end table.insert((__fn_2a_M__unique_dispatch).bodies, _754_) _753_ = M.unique end local function _761_() table.insert((__fn_2a_M__unique_dispatch).help, "(where [seq identity] (and (seq? seq) (function? identity)))") local function _762_(...) if (2 == select("#", ...)) then local _763_ = {...} local function _764_(...) local seq_741_ = (_763_)[1] local identity_742_ = (_763_)[2] return (seq_3f(seq_741_) and function_3f(identity_742_)) end if (((_G.type(_763_) == "table") and (nil ~= (_763_)[1]) and (nil ~= (_763_)[2])) and _764_(...)) then local seq_741_ = (_763_)[1] local identity_742_ = (_763_)[2] local function _765_(seq, identity)

 local function _768_(_766_, _index, value) local _arg_767_ = _766_ local new_seq = _arg_767_[1] local seen = _arg_767_[2]
 local id_key = identity(value)
 if nil_3f(seen[id_key]) then

 seen[id_key] = true
 table.insert(new_seq, value)
 return {new_seq, seen} else
 return {new_seq, seen} end end return M.first(M.reduce(_768_, {{}, {}}, seq)) end return _765_ else return nil end else return nil end end table.insert((__fn_2a_M__unique_dispatch).bodies, _762_) return M.unique end do local _ = {_753_, _761_()} end return M.unique end setmetatable({nil, nil}, {__call = _752_})()



 local __fn_2a_M__split_dispatch = {bodies = {}, help = {}} local function _774_(...) if (0 == #(__fn_2a_M__split_dispatch).bodies) then error(("multi-arity function " .. "M.split" .. " has no bodies")) else end local _776_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__split_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _776_ = f_74_auto end if (nil ~= _776_) then local f_74_auto = _776_ return f_74_auto(...) elseif (_776_ == nil) then local view_77_auto do local _777_, _778_ = pcall(require, "fennel") if ((_777_ == true) and ((_G.type(_778_) == "table") and (nil ~= (_778_).view))) then local view_77_auto0 = (_778_).view view_77_auto = view_77_auto0 elseif ((_777_ == false) and true) then local __75_auto = _778_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _780_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _780_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.split", table.concat(_780_, ", "), table.concat((__fn_2a_M__split_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.split = _774_ local function _783_() local function _784_() table.insert((__fn_2a_M__split_dispatch).help, "(where [seq index] (and (seq? seq) (number? index) (<= 1 index)))") local function _785_(...) if (2 == select("#", ...)) then local _786_ = {...} local function _787_(...) local seq_772_ = (_786_)[1] local index_773_ = (_786_)[2] return (seq_3f(seq_772_) and number_3f(index_773_) and (1 <= index_773_)) end if (((_G.type(_786_) == "table") and (nil ~= (_786_)[1]) and (nil ~= (_786_)[2])) and _787_(...)) then local seq_772_ = (_786_)[1] local index_773_ = (_786_)[2] local function _788_(seq, index)



 local left, right = {}, {} for i, v in ipairs(seq) do
 if (i < index) then
 left, right = M["insert$"](left, -1, v), right else
 left, right = left, M["insert$"](right, -1, v) end end return left, right end return _788_ else return nil end else return nil end end table.insert((__fn_2a_M__split_dispatch).bodies, _785_) return M.split end do local _ = {_784_()} end return M.split end setmetatable({nil, nil}, {__call = _783_})()

 local __fn_2a_M__chunk_every_dispatch = {bodies = {}, help = {}} local function _797_(...) if (0 == #(__fn_2a_M__chunk_every_dispatch).bodies) then error(("multi-arity function " .. "M.chunk-every" .. " has no bodies")) else end local _799_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__chunk_every_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _799_ = f_74_auto end if (nil ~= _799_) then local f_74_auto = _799_ return f_74_auto(...) elseif (_799_ == nil) then local view_77_auto do local _800_, _801_ = pcall(require, "fennel") if ((_800_ == true) and ((_G.type(_801_) == "table") and (nil ~= (_801_).view))) then local view_77_auto0 = (_801_).view view_77_auto = view_77_auto0 elseif ((_800_ == false) and true) then local __75_auto = _801_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _803_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _803_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.chunk-every", table.concat(_803_, ", "), table.concat((__fn_2a_M__chunk_every_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["chunk-every"] = _797_ local function _806_() local _807_ do table.insert((__fn_2a_M__chunk_every_dispatch).help, "(where [seq n] (and (seq? seq) (number? n)))") local function _808_(...) if (2 == select("#", ...)) then local _809_ = {...} local function _810_(...) local seq_792_ = (_809_)[1] local n_793_ = (_809_)[2] return (seq_3f(seq_792_) and number_3f(n_793_)) end if (((_G.type(_809_) == "table") and (nil ~= (_809_)[1]) and (nil ~= (_809_)[2])) and _810_(...)) then local seq_792_ = (_809_)[1] local n_793_ = (_809_)[2] local function _811_(seq, n)


 return M["chunk-every"](seq, n, nil) end return _811_ else return nil end else return nil end end table.insert((__fn_2a_M__chunk_every_dispatch).bodies, _808_) _807_ = M["chunk-every"] end local function _814_() table.insert((__fn_2a_M__chunk_every_dispatch).help, "(where [seq n ?fill] (and (seq? seq) (number? n)))") local function _815_(...) if (3 == select("#", ...)) then local _816_ = {...} local function _817_(...) local seq_794_ = (_816_)[1] local n_795_ = (_816_)[2] local _3ffill_796_ = (_816_)[3] return (seq_3f(seq_794_) and number_3f(n_795_)) end if (((_G.type(_816_) == "table") and (nil ~= (_816_)[1]) and (nil ~= (_816_)[2]) and true) and _817_(...)) then local seq_794_ = (_816_)[1] local n_795_ = (_816_)[2] local _3ffill_796_ = (_816_)[3] local function _818_(seq, n, _3ffill)

 local l = #seq
 if (0 < l) then local tbl_17_auto = {}
 local i_18_auto = #tbl_17_auto for i = 1, #seq, n do local val_19_auto
 do local tbl_17_auto0 = {} local i_18_auto0 = #tbl_17_auto0 for ii = 0, (n - 1) do local val_19_auto0
 do local _819_ = seq[(i + ii)] if (_819_ == nil) then
 val_19_auto0 = _3ffill elseif (nil ~= _819_) then local any = _819_
 val_19_auto0 = any else val_19_auto0 = nil end end if (nil ~= val_19_auto0) then i_18_auto0 = (i_18_auto0 + 1) do end (tbl_17_auto0)[i_18_auto0] = val_19_auto0 else end end val_19_auto = tbl_17_auto0 end if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end return tbl_17_auto else
 return {} end end return _818_ else return nil end else return nil end end table.insert((__fn_2a_M__chunk_every_dispatch).bodies, _815_) return M["chunk-every"] end do local _ = {_807_, _814_()} end return M["chunk-every"] end setmetatable({nil, nil}, {__call = _806_})()



 local __fn_2a_M__set_24_dispatch = {bodies = {}, help = {}} local function _832_(...) if (0 == #(__fn_2a_M__set_24_dispatch).bodies) then error(("multi-arity function " .. "M.set$" .. " has no bodies")) else end local _834_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__set_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _834_ = f_74_auto end if (nil ~= _834_) then local f_74_auto = _834_ return f_74_auto(...) elseif (_834_ == nil) then local view_77_auto do local _835_, _836_ = pcall(require, "fennel") if ((_835_ == true) and ((_G.type(_836_) == "table") and (nil ~= (_836_).view))) then local view_77_auto0 = (_836_).view view_77_auto = view_77_auto0 elseif ((_835_ == false) and true) then local __75_auto = _836_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _838_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _838_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.set$", table.concat(_838_, ", "), table.concat((__fn_2a_M__set_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["set$"] = _832_ local function _841_() local _842_ do table.insert((__fn_2a_M__set_24_dispatch).help, "(where [t k ?v] (table? t))") local function _843_(...) if (3 == select("#", ...)) then local _844_ = {...} local function _845_(...) local t_826_ = (_844_)[1] local k_827_ = (_844_)[2] local _3fv_828_ = (_844_)[3] return table_3f(t_826_) end if (((_G.type(_844_) == "table") and (nil ~= (_844_)[1]) and (nil ~= (_844_)[2]) and true) and _845_(...)) then local t_826_ = (_844_)[1] local k_827_ = (_844_)[2] local _3fv_828_ = (_844_)[3] local function _846_(t, k, _3fv)



 t[k] = _3fv return t end return _846_ else return nil end else return nil end end table.insert((__fn_2a_M__set_24_dispatch).bodies, _843_) _842_ = M["set$"] end local _849_ do table.insert((__fn_2a_M__set_24_dispatch).help, "(where [t] (table? t))") local function _850_(...) if (1 == select("#", ...)) then local _851_ = {...} local function _852_(...) local t_829_ = (_851_)[1] return table_3f(t_829_) end if (((_G.type(_851_) == "table") and (nil ~= (_851_)[1])) and _852_(...)) then local t_829_ = (_851_)[1] local function _853_(t)

 local function _854_(_241, _242) t[_241] = _242 return t end return _854_ end return _853_ else return nil end else return nil end end table.insert((__fn_2a_M__set_24_dispatch).bodies, _850_) _849_ = M["set$"] end local function _857_() table.insert((__fn_2a_M__set_24_dispatch).help, "(where [t k] (table? t))") local function _858_(...) if (2 == select("#", ...)) then local _859_ = {...} local function _860_(...) local t_830_ = (_859_)[1] local k_831_ = (_859_)[2] return table_3f(t_830_) end if (((_G.type(_859_) == "table") and (nil ~= (_859_)[1]) and (nil ~= (_859_)[2])) and _860_(...)) then local t_830_ = (_859_)[1] local k_831_ = (_859_)[2] local function _861_(t, k)

 local function _862_(_241) t[k] = _241 return t end return _862_ end return _861_ else return nil end else return nil end end table.insert((__fn_2a_M__set_24_dispatch).bodies, _858_) return M["set$"] end do local _ = {_842_, _849_, _857_()} end return M["set$"] end setmetatable({nil, nil}, {__call = _841_})()



 local __fn_2a_M__sort_24_dispatch = {bodies = {}, help = {}} local function _869_(...) if (0 == #(__fn_2a_M__sort_24_dispatch).bodies) then error(("multi-arity function " .. "M.sort$" .. " has no bodies")) else end local _871_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__sort_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _871_ = f_74_auto end if (nil ~= _871_) then local f_74_auto = _871_ return f_74_auto(...) elseif (_871_ == nil) then local view_77_auto do local _872_, _873_ = pcall(require, "fennel") if ((_872_ == true) and ((_G.type(_873_) == "table") and (nil ~= (_873_).view))) then local view_77_auto0 = (_873_).view view_77_auto = view_77_auto0 elseif ((_872_ == false) and true) then local __75_auto = _873_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _875_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _875_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.sort$", table.concat(_875_, ", "), table.concat((__fn_2a_M__sort_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["sort$"] = _869_ local function _878_() local _879_ do table.insert((__fn_2a_M__sort_24_dispatch).help, "(where [f] (function? f))") local function _880_(...) if (1 == select("#", ...)) then local _881_ = {...} local function _882_(...) local f_865_ = (_881_)[1] return function_3f(f_865_) end if (((_G.type(_881_) == "table") and (nil ~= (_881_)[1])) and _882_(...)) then local f_865_ = (_881_)[1] local function _883_(f)


 local function _884_(_241) return M["sort$"](f, _241) end return _884_ end return _883_ else return nil end else return nil end end table.insert((__fn_2a_M__sort_24_dispatch).bodies, _880_) _879_ = M["sort$"] end local _887_ do table.insert((__fn_2a_M__sort_24_dispatch).help, "(where [seq] (seq? seq))") local function _888_(...) if (1 == select("#", ...)) then local _889_ = {...} local function _890_(...) local seq_866_ = (_889_)[1] return seq_3f(seq_866_) end if (((_G.type(_889_) == "table") and (nil ~= (_889_)[1])) and _890_(...)) then local seq_866_ = (_889_)[1] local function _891_(seq)

 table.sort(seq) return seq end return _891_ else return nil end else return nil end end table.insert((__fn_2a_M__sort_24_dispatch).bodies, _888_) _887_ = M["sort$"] end local function _894_() table.insert((__fn_2a_M__sort_24_dispatch).help, "(where [f seq] (and (function? f) (seq? seq)))") local function _895_(...) if (2 == select("#", ...)) then local _896_ = {...} local function _897_(...) local f_867_ = (_896_)[1] local seq_868_ = (_896_)[2] return (function_3f(f_867_) and seq_3f(seq_868_)) end if (((_G.type(_896_) == "table") and (nil ~= (_896_)[1]) and (nil ~= (_896_)[2])) and _897_(...)) then local f_867_ = (_896_)[1] local seq_868_ = (_896_)[2] local function _898_(f, seq)

 table.sort(seq, f) return seq end return _898_ else return nil end else return nil end end table.insert((__fn_2a_M__sort_24_dispatch).bodies, _895_) return M["sort$"] end do local _ = {_879_, _887_, _894_()} end return M["sort$"] end setmetatable({nil, nil}, {__call = _878_})()

 local __fn_2a_M__sort_dispatch = {bodies = {}, help = {}} local function _904_(...) if (0 == #(__fn_2a_M__sort_dispatch).bodies) then error(("multi-arity function " .. "M.sort" .. " has no bodies")) else end local _906_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__sort_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _906_ = f_74_auto end if (nil ~= _906_) then local f_74_auto = _906_ return f_74_auto(...) elseif (_906_ == nil) then local view_77_auto do local _907_, _908_ = pcall(require, "fennel") if ((_907_ == true) and ((_G.type(_908_) == "table") and (nil ~= (_908_).view))) then local view_77_auto0 = (_908_).view view_77_auto = view_77_auto0 elseif ((_907_ == false) and true) then local __75_auto = _908_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _910_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _910_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.sort", table.concat(_910_, ", "), table.concat((__fn_2a_M__sort_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.sort = _904_ local function _913_() local _914_ do table.insert((__fn_2a_M__sort_dispatch).help, "(where [f] (function? f))") local function _915_(...) if (1 == select("#", ...)) then local _916_ = {...} local function _917_(...) local f_901_ = (_916_)[1] return function_3f(f_901_) end if (((_G.type(_916_) == "table") and (nil ~= (_916_)[1])) and _917_(...)) then local f_901_ = (_916_)[1] local function _918_(f)


 local function _919_(_241) return M.sort(f, _241) end return _919_ end return _918_ else return nil end else return nil end end table.insert((__fn_2a_M__sort_dispatch).bodies, _915_) _914_ = M.sort end local function _922_() table.insert((__fn_2a_M__sort_dispatch).help, "(where [f seq] (function? f) (seq? seq))") local function _923_(...) if (2 == select("#", ...)) then local _924_ = {...} local function _925_(...) local f_902_ = (_924_)[1] local seq_903_ = (_924_)[2] return function_3f(f_902_) end if (((_G.type(_924_) == "table") and (nil ~= (_924_)[1]) and (nil ~= (_924_)[2])) and _925_(...)) then local f_902_ = (_924_)[1] local seq_903_ = (_924_)[2] local function _926_(f, seq)




 local sorted_keys


 local function _927_(_241) local function _930_(acc, i, _928_) local _arg_929_ = _928_ local oi = _arg_929_[1] local v = _arg_929_[2] return M["set$"](acc, oi, i) end return M.reduce(_930_, {}, _241) end local function _931_(_241) local function _936_(_932_, _934_) local _arg_933_ = _932_ local _ = _arg_933_[1] local a = _arg_933_[2] local _arg_935_ = _934_ local _0 = _arg_935_[1] local b = _arg_935_[2] return f(a, b) end table.sort(_241, _936_) return _241 end sorted_keys = _927_(_931_(M["table->pairs"](seq)))


 local function _937_(acc, i, v) return M["set$"](acc, sorted_keys[i], v) end return M.reduce(_937_, {}, seq) end return _926_ else return nil end else return nil end end table.insert((__fn_2a_M__sort_dispatch).bodies, _923_) return M.sort end do local _ = {_914_, _922_()} end return M.sort end setmetatable({nil, nil}, {__call = _913_})()



 local __fn_2a_M__table__3epairs_dispatch = {bodies = {}, help = {}} local function _941_(...) if (0 == #(__fn_2a_M__table__3epairs_dispatch).bodies) then error(("multi-arity function " .. "M.table->pairs" .. " has no bodies")) else end local _943_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__table__3epairs_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _943_ = f_74_auto end if (nil ~= _943_) then local f_74_auto = _943_ return f_74_auto(...) elseif (_943_ == nil) then local view_77_auto do local _944_, _945_ = pcall(require, "fennel") if ((_944_ == true) and ((_G.type(_945_) == "table") and (nil ~= (_945_).view))) then local view_77_auto0 = (_945_).view view_77_auto = view_77_auto0 elseif ((_944_ == false) and true) then local __75_auto = _945_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _947_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _947_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.table->pairs", table.concat(_947_, ", "), table.concat((__fn_2a_M__table__3epairs_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["table->pairs"] = _941_ local function _950_() local function _951_() table.insert((__fn_2a_M__table__3epairs_dispatch).help, "(where [t] (table? t))") local function _952_(...) if (1 == select("#", ...)) then local _953_ = {...} local function _954_(...) local t_940_ = (_953_)[1] return table_3f(t_940_) end if (((_G.type(_953_) == "table") and (nil ~= (_953_)[1])) and _954_(...)) then local t_940_ = (_953_)[1] local function _955_(t)


 local function _956_(_241, _242) return {_241, _242} end return M.map(_956_, t) end return _955_ else return nil end else return nil end end table.insert((__fn_2a_M__table__3epairs_dispatch).bodies, _952_) return M["table->pairs"] end do local _ = {_951_()} end return M["table->pairs"] end setmetatable({nil, nil}, {__call = _950_})()

 local __fn_2a_M__pairs__3etable_dispatch = {bodies = {}, help = {}} local function _960_(...) if (0 == #(__fn_2a_M__pairs__3etable_dispatch).bodies) then error(("multi-arity function " .. "M.pairs->table" .. " has no bodies")) else end local _962_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__pairs__3etable_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _962_ = f_74_auto end if (nil ~= _962_) then local f_74_auto = _962_ return f_74_auto(...) elseif (_962_ == nil) then local view_77_auto do local _963_, _964_ = pcall(require, "fennel") if ((_963_ == true) and ((_G.type(_964_) == "table") and (nil ~= (_964_).view))) then local view_77_auto0 = (_964_).view view_77_auto = view_77_auto0 elseif ((_963_ == false) and true) then local __75_auto = _964_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _966_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _966_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.pairs->table", table.concat(_966_, ", "), table.concat((__fn_2a_M__pairs__3etable_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["pairs->table"] = _960_ local function _969_() local function _970_() table.insert((__fn_2a_M__pairs__3etable_dispatch).help, "(where [seq] (seq? seq))") local function _971_(...) if (1 == select("#", ...)) then local _972_ = {...} local function _973_(...) local seq_959_ = (_972_)[1] return seq_3f(seq_959_) end if (((_G.type(_972_) == "table") and (nil ~= (_972_)[1])) and _973_(...)) then local seq_959_ = (_972_)[1] local function _974_(seq)


 local function _977_(acc, i, _975_) local _arg_976_ = _975_ local k = _arg_976_[1] local v = _arg_976_[2] return M["set$"](acc, k, v) end return M.reduce(_977_, {}, seq) end return _974_ else return nil end else return nil end end table.insert((__fn_2a_M__pairs__3etable_dispatch).bodies, _971_) return M["pairs->table"] end do local _ = {_970_()} end return M["pairs->table"] end setmetatable({nil, nil}, {__call = _969_})()

 local __fn_2a_M__keys_dispatch = {bodies = {}, help = {}} local function _981_(...) if (0 == #(__fn_2a_M__keys_dispatch).bodies) then error(("multi-arity function " .. "M.keys" .. " has no bodies")) else end local _983_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__keys_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _983_ = f_74_auto end if (nil ~= _983_) then local f_74_auto = _983_ return f_74_auto(...) elseif (_983_ == nil) then local view_77_auto do local _984_, _985_ = pcall(require, "fennel") if ((_984_ == true) and ((_G.type(_985_) == "table") and (nil ~= (_985_).view))) then local view_77_auto0 = (_985_).view view_77_auto = view_77_auto0 elseif ((_984_ == false) and true) then local __75_auto = _985_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _987_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _987_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.keys", table.concat(_987_, ", "), table.concat((__fn_2a_M__keys_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.keys = _981_ local function _990_() local function _991_() table.insert((__fn_2a_M__keys_dispatch).help, "(where [enumerable] (table? enumerable))") local function _992_(...) if (1 == select("#", ...)) then local _993_ = {...} local function _994_(...) local enumerable_980_ = (_993_)[1] return table_3f(enumerable_980_) end if (((_G.type(_993_) == "table") and (nil ~= (_993_)[1])) and _994_(...)) then local enumerable_980_ = (_993_)[1] local function _995_(enumerable)



 local function _996_(_241) return _241 end local function _997_() return pairs(enumerable) end return M.map(_996_, _997_) end return _995_ else return nil end else return nil end end table.insert((__fn_2a_M__keys_dispatch).bodies, _992_) return M.keys end do local _ = {_991_()} end return M.keys end setmetatable({nil, nil}, {__call = _990_})()

 local __fn_2a_M__vals_dispatch = {bodies = {}, help = {}} local function _1001_(...) if (0 == #(__fn_2a_M__vals_dispatch).bodies) then error(("multi-arity function " .. "M.vals" .. " has no bodies")) else end local _1003_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__vals_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1003_ = f_74_auto end if (nil ~= _1003_) then local f_74_auto = _1003_ return f_74_auto(...) elseif (_1003_ == nil) then local view_77_auto do local _1004_, _1005_ = pcall(require, "fennel") if ((_1004_ == true) and ((_G.type(_1005_) == "table") and (nil ~= (_1005_).view))) then local view_77_auto0 = (_1005_).view view_77_auto = view_77_auto0 elseif ((_1004_ == false) and true) then local __75_auto = _1005_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1007_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1007_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.vals", table.concat(_1007_, ", "), table.concat((__fn_2a_M__vals_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.vals = _1001_ local function _1010_() local function _1011_() table.insert((__fn_2a_M__vals_dispatch).help, "(where [enumerable] (table? enumerable))") local function _1012_(...) if (1 == select("#", ...)) then local _1013_ = {...} local function _1014_(...) local enumerable_1000_ = (_1013_)[1] return table_3f(enumerable_1000_) end if (((_G.type(_1013_) == "table") and (nil ~= (_1013_)[1])) and _1014_(...)) then local enumerable_1000_ = (_1013_)[1] local function _1015_(enumerable)



 local function _1016_(_241, _242) return _242 end local function _1017_() return pairs(enumerable) end return M.map(_1016_, _1017_) end return _1015_ else return nil end else return nil end end table.insert((__fn_2a_M__vals_dispatch).bodies, _1012_) return M.vals end do local _ = {_1011_()} end return M.vals end setmetatable({nil, nil}, {__call = _1010_})()

 local __fn_2a_M__intersperse_dispatch = {bodies = {}, help = {}} local function _1022_(...) if (0 == #(__fn_2a_M__intersperse_dispatch).bodies) then error(("multi-arity function " .. "M.intersperse" .. " has no bodies")) else end local _1024_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__intersperse_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1024_ = f_74_auto end if (nil ~= _1024_) then local f_74_auto = _1024_ return f_74_auto(...) elseif (_1024_ == nil) then local view_77_auto do local _1025_, _1026_ = pcall(require, "fennel") if ((_1025_ == true) and ((_G.type(_1026_) == "table") and (nil ~= (_1026_).view))) then local view_77_auto0 = (_1026_).view view_77_auto = view_77_auto0 elseif ((_1025_ == false) and true) then local __75_auto = _1026_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1028_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1028_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.intersperse", table.concat(_1028_, ", "), table.concat((__fn_2a_M__intersperse_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.intersperse = _1022_ local function _1031_() local function _1032_() table.insert((__fn_2a_M__intersperse_dispatch).help, "(where [e inter] (seq? e))") local function _1033_(...) if (2 == select("#", ...)) then local _1034_ = {...} local function _1035_(...) local e_1020_ = (_1034_)[1] local inter_1021_ = (_1034_)[2] return seq_3f(e_1020_) end if (((_G.type(_1034_) == "table") and (nil ~= (_1034_)[1]) and (nil ~= (_1034_)[2])) and _1035_(...)) then local e_1020_ = (_1034_)[1] local inter_1021_ = (_1034_)[2] local function _1036_(e, inter)




 local __fn_2a_fn_2a__anonymous___1037__dispatch = {bodies = {}, help = {}} local fn_2a__anonymous___1037_ local function _1044_(...) if (0 == #(__fn_2a_fn_2a__anonymous___1037__dispatch).bodies) then error(("multi-arity function " .. "fn*__anonymous___1037_" .. " has no bodies")) else end local _1046_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_fn_2a__anonymous___1037__dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1046_ = f_74_auto end if (nil ~= _1046_) then local f_74_auto = _1046_ return f_74_auto(...) elseif (_1046_ == nil) then local view_77_auto do local _1047_, _1048_ = pcall(require, "fennel") if ((_1047_ == true) and ((_G.type(_1048_) == "table") and (nil ~= (_1048_).view))) then local view_77_auto0 = (_1048_).view view_77_auto = view_77_auto0 elseif ((_1047_ == false) and true) then local __75_auto = _1048_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1050_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1050_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "fn*__anonymous___1037_", table.concat(_1050_, ", "), table.concat((__fn_2a_fn_2a__anonymous___1037__dispatch).help, "\n")) return error(msg_78_auto) else return nil end end fn_2a__anonymous___1037_ = _1044_ local function _1053_() local _1054_ do table.insert((__fn_2a_fn_2a__anonymous___1037__dispatch).help, "(where [acc n v] (= n (length ^e)))") local function _1055_(...) if (3 == select("#", ...)) then local _1056_ = {...} local function _1057_(...) local acc_1038_ = (_1056_)[1] local n_1039_ = (_1056_)[2] local v_1040_ = (_1056_)[3] return (n_1039_ == #e) end if (((_G.type(_1056_) == "table") and (nil ~= (_1056_)[1]) and (nil ~= (_1056_)[2]) and (nil ~= (_1056_)[3])) and _1057_(...)) then local acc_1038_ = (_1056_)[1] local n_1039_ = (_1056_)[2] local v_1040_ = (_1056_)[3] local function _1058_(acc, n, v)
 return M["append$"](acc, v) end return _1058_ else return nil end else return nil end end table.insert((__fn_2a_fn_2a__anonymous___1037__dispatch).bodies, _1055_) _1054_ = fn_2a__anonymous___1037_ end local function _1061_() table.insert((__fn_2a_fn_2a__anonymous___1037__dispatch).help, "(where [acc i v])") local function _1062_(...) if (3 == select("#", ...)) then local _1063_ = {...} local function _1064_(...) local acc_1041_ = (_1063_)[1] local i_1042_ = (_1063_)[2] local v_1043_ = (_1063_)[3] return true end if (((_G.type(_1063_) == "table") and (nil ~= (_1063_)[1]) and (nil ~= (_1063_)[2]) and (nil ~= (_1063_)[3])) and _1064_(...)) then local acc_1041_ = (_1063_)[1] local i_1042_ = (_1063_)[2] local v_1043_ = (_1063_)[3] local function _1065_(acc, i, v)
 return M["append$"](acc, v, inter) end return _1065_ else return nil end else return nil end end table.insert((__fn_2a_fn_2a__anonymous___1037__dispatch).bodies, _1062_) return fn_2a__anonymous___1037_ end do local _ = {_1054_, _1061_()} end return fn_2a__anonymous___1037_ end return M.reduce(setmetatable({nil, nil}, {__call = _1053_})(), {}, e) end return _1036_ else return nil end else return nil end end table.insert((__fn_2a_M__intersperse_dispatch).bodies, _1033_) return M.intersperse end do local _ = {_1032_()} end return M.intersperse end setmetatable({nil, nil}, {__call = _1031_})()


 local __fn_2a_M__empty_3f_dispatch = {bodies = {}, help = {}} local function _1071_(...) if (0 == #(__fn_2a_M__empty_3f_dispatch).bodies) then error(("multi-arity function " .. "M.empty?" .. " has no bodies")) else end local _1073_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__empty_3f_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1073_ = f_74_auto end if (nil ~= _1073_) then local f_74_auto = _1073_ return f_74_auto(...) elseif (_1073_ == nil) then local view_77_auto do local _1074_, _1075_ = pcall(require, "fennel") if ((_1074_ == true) and ((_G.type(_1075_) == "table") and (nil ~= (_1075_).view))) then local view_77_auto0 = (_1075_).view view_77_auto = view_77_auto0 elseif ((_1074_ == false) and true) then local __75_auto = _1075_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1077_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1077_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.empty?", table.concat(_1077_, ", "), table.concat((__fn_2a_M__empty_3f_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["empty?"] = _1071_ local function _1080_() local function _1081_() table.insert((__fn_2a_M__empty_3f_dispatch).help, "(where [t] (table? t))") local function _1082_(...) if (1 == select("#", ...)) then local _1083_ = {...} local function _1084_(...) local t_1070_ = (_1083_)[1] return table_3f(t_1070_) end if (((_G.type(_1083_) == "table") and (nil ~= (_1083_)[1])) and _1084_(...)) then local t_1070_ = (_1083_)[1] local function _1085_(t)


 return (nil == next(t)) end return _1085_ else return nil end else return nil end end table.insert((__fn_2a_M__empty_3f_dispatch).bodies, _1082_) return M["empty?"] end do local _ = {_1081_()} end return M["empty?"] end setmetatable({nil, nil}, {__call = _1080_})()

 local __fn_2a_M__stream_dispatch = {bodies = {}, help = {}} local function _1089_(...) if (0 == #(__fn_2a_M__stream_dispatch).bodies) then error(("multi-arity function " .. "M.stream" .. " has no bodies")) else end local _1091_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__stream_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1091_ = f_74_auto end if (nil ~= _1091_) then local f_74_auto = _1091_ return f_74_auto(...) elseif (_1091_ == nil) then local view_77_auto do local _1092_, _1093_ = pcall(require, "fennel") if ((_1092_ == true) and ((_G.type(_1093_) == "table") and (nil ~= (_1093_).view))) then local view_77_auto0 = (_1093_).view view_77_auto = view_77_auto0 elseif ((_1092_ == false) and true) then local __75_auto = _1093_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1095_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1095_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.stream", table.concat(_1095_, ", "), table.concat((__fn_2a_M__stream_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.stream = _1089_ local function _1098_() local function _1099_() table.insert((__fn_2a_M__stream_dispatch).help, "(where [t] (enumerable? t))") local function _1100_(...) if (1 == select("#", ...)) then local _1101_ = {...} local function _1102_(...) local t_1088_ = (_1101_)[1] return enumerable_3f(t_1088_) end if (((_G.type(_1101_) == "table") and (nil ~= (_1101_)[1])) and _1102_(...)) then local t_1088_ = (_1101_)[1] local function _1103_(t)
















 return {enum = t, funs = {}} end return _1103_ else return nil end else return nil end end table.insert((__fn_2a_M__stream_dispatch).bodies, _1100_) return M.stream end do local _ = {_1099_()} end return M.stream end setmetatable({nil, nil}, {__call = _1098_})()

 local __fn_2a_M__stream__3eseq_dispatch = {bodies = {}, help = {}} local function _1108_(...) if (0 == #(__fn_2a_M__stream__3eseq_dispatch).bodies) then error(("multi-arity function " .. "M.stream->seq" .. " has no bodies")) else end local _1110_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__stream__3eseq_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1110_ = f_74_auto end if (nil ~= _1110_) then local f_74_auto = _1110_ return f_74_auto(...) elseif (_1110_ == nil) then local view_77_auto do local _1111_, _1112_ = pcall(require, "fennel") if ((_1111_ == true) and ((_G.type(_1112_) == "table") and (nil ~= (_1112_).view))) then local view_77_auto0 = (_1112_).view view_77_auto = view_77_auto0 elseif ((_1111_ == false) and true) then local __75_auto = _1112_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1114_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1114_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.stream->seq", table.concat(_1114_, ", "), table.concat((__fn_2a_M__stream__3eseq_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["stream->seq"] = _1108_ local function _1117_() local _1118_ do table.insert((__fn_2a_M__stream__3eseq_dispatch).help, "(where [l] (and (stream? l) (or (seq? l.enum) (assoc? l.enum))))") local function _1119_(...) if (1 == select("#", ...)) then local _1120_ = {...} local function _1121_(...) local l_1106_ = (_1120_)[1] return (stream_3f(l_1106_) and (seq_3f(l_1106_.enum) or assoc_3f(l_1106_.enum))) end if (((_G.type(_1120_) == "table") and (nil ~= (_1120_)[1])) and _1121_(...)) then local l_1106_ = (_1120_)[1] local function _1122_(l)


 local function _1123_(k, v)
 local function _1124_(acc, i, f)
 local _1125_ = {f(k, acc)} if ((_G.type(_1125_) == "table") and ((_1125_)[1] == stream_halt_marker)) then

 return M.reduced(nil) elseif ((_G.type(_1125_) == "table") and ((_1125_)[1] == stream_use_last_value_marker)) then

 return acc elseif ((_G.type(_1125_) == "table") and ((_1125_)[1] == stream_use_new_value_marker) and true) then local _3fnew_acc = (_1125_)[2]

 return _3fnew_acc else return nil end end return M.reduce(_1124_, v, l.funs) end return M.map(_1123_, l.enum) end return _1122_ else return nil end else return nil end end table.insert((__fn_2a_M__stream__3eseq_dispatch).bodies, _1119_) _1118_ = M["stream->seq"] end local function _1129_() table.insert((__fn_2a_M__stream__3eseq_dispatch).help, "(where [l] (and (stream? l) (function? l.enum)))") local function _1130_(...) if (1 == select("#", ...)) then local _1131_ = {...} local function _1132_(...) local l_1107_ = (_1131_)[1] return (stream_3f(l_1107_) and function_3f(l_1107_.enum)) end if (((_G.type(_1131_) == "table") and (nil ~= (_1131_)[1])) and _1132_(...)) then local l_1107_ = (_1131_)[1] local function _1133_(l)





 local function _1134_(...)
 local function _1135_(acc, _, f)
 local new = M.pack(f(M.unpack(acc)))
 local _1136_ = new if ((_G.type(_1136_) == "table") and ((_1136_)[1] == stream_halt_marker)) then
 return M.reduced(nil) elseif ((_G.type(_1136_) == "table") and ((_1136_)[1] == stream_use_last_value_marker)) then
 return acc elseif ((_G.type(_1136_) == "table") and ((_1136_)[1] == stream_use_new_value_marker)) then

 return M.pack(M.unpack(new, 2)) else return nil end end return M.reduce(_1135_, M.pack(...), l.funs) end return M.flatten(M.map(_1134_, l.enum)) end return _1133_ else return nil end else return nil end end table.insert((__fn_2a_M__stream__3eseq_dispatch).bodies, _1130_) return M["stream->seq"] end do local _ = {_1118_, _1129_()} end return M["stream->seq"] end setmetatable({nil, nil}, {__call = _1117_})()










 return M