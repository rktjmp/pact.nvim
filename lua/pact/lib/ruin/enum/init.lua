

 local _local_3_, _local_4_ = nil, nil do local _2_ = string local _1_ local function _5_(...) local full_mod_path_2_auto = ... local _6_ = full_mod_path_2_auto local function _7_(...) local path_3_auto = _6_ return ("string" == type(path_3_auto)) end if ((nil ~= _6_) and _7_(...)) then local path_3_auto = _6_ if string.find(full_mod_path_2_auto, "enum") then local _8_ = string.match(full_mod_path_2_auto, ("(.+%.)" .. "enum")) if (_8_ == nil) then return "" elseif (nil ~= _8_) then local root_4_auto = _8_ return root_4_auto else return nil end else return error(string.format("relative-root: no match in &from %q for %q", full_mod_path_2_auto, "enum")) end elseif (_6_ == nil) then return "" else return nil end end _1_ = require(((_5_(...) or "") .. "type")) _local_3_, _local_4_ = _1_, _2_ end local _local_12_ = _local_3_ local t_assoc_3f = _local_12_["assoc?"]
 local function_3f = _local_12_["function?"] local nil_3f = _local_12_["nil?"] local number_3f = _local_12_["number?"] local t_seq_3f = _local_12_["seq?"] local t_table_3f = _local_12_["table?"] local _local_13_ = _local_4_

 local fmt = _local_13_["format"] do local _ = {nil, nil} end

 local M = {}

 local function stream_3f(s)
 local _14_ = s if ((_G.type(_14_) == "table") and (nil ~= (_14_).enum) and (nil ~= (_14_).funs)) then local enum = (_14_).enum local funs = (_14_).funs return true elseif true then local _ = _14_ return false else return nil end end





 local function seq_3f(t) return (t_seq_3f(t) and not stream_3f(t)) end
 local function assoc_3f(t) return (t_assoc_3f(t) and not stream_3f(t)) end
 local function table_3f(t) return (t_table_3f(t) and not stream_3f(t)) end

 local function enumerable_3f(v)

 return (((seq_3f(v) or assoc_3f(v)) and not stream_3f(v)) or function_3f(v)) end





 local stream_halt_marker = {}
 local stream_use_last_value_marker = {}
 local stream_use_new_value_marker = {}
 local reduced_marker = {}



 M.pack = function(...)


 local _16_ = {...} _16_["n"] = select("#", ...) return _16_ end

 local rawunpack = (_G.unpack or table.unpack)
 local __fn_2a_M__unpack_dispatch = {bodies = {}, help = {}} local function _23_(...) if (0 == #(__fn_2a_M__unpack_dispatch).bodies) then error(("multi-arity function " .. "M.unpack" .. " has no bodies")) else end local _25_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__unpack_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _25_ = f_74_auto end if (nil ~= _25_) then local f_74_auto = _25_ return f_74_auto(...) elseif (_25_ == nil) then local view_77_auto do local _26_, _27_ = pcall(require, "fennel") if ((_26_ == true) and ((_G.type(_27_) == "table") and (nil ~= (_27_).view))) then local view_77_auto0 = (_27_).view view_77_auto = view_77_auto0 elseif ((_26_ == false) and true) then local __75_auto = _27_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _29_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _29_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.unpack", table.concat(_29_, ", "), table.concat((__fn_2a_M__unpack_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.unpack = _23_ local function _32_() local _33_ do table.insert((__fn_2a_M__unpack_dispatch).help, "(where [t] (table? t))") local function _34_(...) if (1 == select("#", ...)) then local _35_ = {...} local function _36_(...) local t_17_ = (_35_)[1] return table_3f(t_17_) end if (((_G.type(_35_) == "table") and (nil ~= (_35_)[1])) and _36_(...)) then local t_17_ = (_35_)[1] local function _37_(t)





 return rawunpack(t, 1, t.n) end return _37_ else return nil end else return nil end end table.insert((__fn_2a_M__unpack_dispatch).bodies, _34_) _33_ = M.unpack end local _40_ do table.insert((__fn_2a_M__unpack_dispatch).help, "(where [t i] (and (table? t) (number? i)))") local function _41_(...) if (2 == select("#", ...)) then local _42_ = {...} local function _43_(...) local t_18_ = (_42_)[1] local i_19_ = (_42_)[2] return (table_3f(t_18_) and number_3f(i_19_)) end if (((_G.type(_42_) == "table") and (nil ~= (_42_)[1]) and (nil ~= (_42_)[2])) and _43_(...)) then local t_18_ = (_42_)[1] local i_19_ = (_42_)[2] local function _44_(t, i)

 return rawunpack(t, i, t.n) end return _44_ else return nil end else return nil end end table.insert((__fn_2a_M__unpack_dispatch).bodies, _41_) _40_ = M.unpack end local function _47_() table.insert((__fn_2a_M__unpack_dispatch).help, "(where [t i j] (and (table? t) (number? i) (number? j)))") local function _48_(...) if (3 == select("#", ...)) then local _49_ = {...} local function _50_(...) local t_20_ = (_49_)[1] local i_21_ = (_49_)[2] local j_22_ = (_49_)[3] return (table_3f(t_20_) and number_3f(i_21_) and number_3f(j_22_)) end if (((_G.type(_49_) == "table") and (nil ~= (_49_)[1]) and (nil ~= (_49_)[2]) and (nil ~= (_49_)[3])) and _50_(...)) then local t_20_ = (_49_)[1] local i_21_ = (_49_)[2] local j_22_ = (_49_)[3] local function _51_(t, i, j)

 return rawunpack(t, i, j) end return _51_ else return nil end else return nil end end table.insert((__fn_2a_M__unpack_dispatch).bodies, _48_) return M.unpack end do local _ = {_33_, _40_, _47_()} end return M.unpack end setmetatable({nil, nil}, {__call = _32_})()



 local __fn_2a_M__reduced_dispatch = {bodies = {}, help = {}} local function _55_(...) if (0 == #(__fn_2a_M__reduced_dispatch).bodies) then error(("multi-arity function " .. "M.reduced" .. " has no bodies")) else end local _57_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__reduced_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _57_ = f_74_auto end if (nil ~= _57_) then local f_74_auto = _57_ return f_74_auto(...) elseif (_57_ == nil) then local view_77_auto do local _58_, _59_ = pcall(require, "fennel") if ((_58_ == true) and ((_G.type(_59_) == "table") and (nil ~= (_59_).view))) then local view_77_auto0 = (_59_).view view_77_auto = view_77_auto0 elseif ((_58_ == false) and true) then local __75_auto = _59_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _61_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _61_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.reduced", table.concat(_61_, ", "), table.concat((__fn_2a_M__reduced_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.reduced = _55_ local function _64_() local _65_ do table.insert((__fn_2a_M__reduced_dispatch).help, "(where {})") local function _66_(...) if (0 == select("#", ...)) then local _67_ = {...} local function _68_(...) return true end if ((_G.type(_67_) == "table") and _68_(...)) then local function _69_()


 return reduced_marker end return _69_ else return nil end else return nil end end table.insert((__fn_2a_M__reduced_dispatch).bodies, _66_) _65_ = M.reduced end local _72_ do table.insert((__fn_2a_M__reduced_dispatch).help, "(where [?value])") local function _73_(...) if (1 == select("#", ...)) then local _74_ = {...} local function _75_(...) local _3fvalue_54_ = (_74_)[1] return true end if (((_G.type(_74_) == "table") and true) and _75_(...)) then local _3fvalue_54_ = (_74_)[1] local function _76_(_3fvalue)

 return reduced_marker, _3fvalue end return _76_ else return nil end else return nil end end table.insert((__fn_2a_M__reduced_dispatch).bodies, _73_) _72_ = M.reduced end local function _79_() table.insert((__fn_2a_M__reduced_dispatch).help, "(where _)") local function _80_(...) if true then local _81_ = {...} local function _82_(...) return true end if ((_G.type(_81_) == "table") and _82_(...)) then local function _83_(...)

 return error("reduced accepts only a single value") end return _83_ else return nil end else return nil end end table.insert((__fn_2a_M__reduced_dispatch).bodies, _80_) return M.reduced end do local _ = {_65_, _72_, _79_()} end return M.reduced end setmetatable({nil, nil}, {__call = _64_})()

 local function reduce_order_identity(...) return ... end
 local function reduce_order_v_k(i, v) return v, i end
 local function reduce_order_k_v(k, v) return k, v end

 local function reduce_impl(f, acc, _86_, order_values) local _arg_87_ = _86_ local gen = _arg_87_[1] local invariant = _arg_87_[2] local ctrl = _arg_87_[3]
 local _let_88_ = M.pack(gen(invariant, ctrl)) local n = _let_88_["n"] local vals = _let_88_
 local _89_ = {n, vals} if ((_G.type(_89_) == "table") and ((_89_)[1] == 1) and ((_G.type((_89_)[2]) == "table") and (((_89_)[2])[1] == nil))) then


 return acc elseif ((_G.type(_89_) == "table") and ((_89_)[1] == 0) and true) then local _ = (_89_)[2]




 return acc elseif true then local _ = _89_

 local _let_90_ = vals local ctrl0 = _let_90_[1] local _0 = (function (t, k, e) local mt = getmetatable(t) if 'table' == type(mt) and mt.__fennelrest then return mt.__fennelrest(t, k) elseif e then local rest = {} for k, v in pairs(t) do if not e[k] then rest[k] = v end end return rest else return {(table.unpack or unpack)(t, k)} end end)(_let_90_, 2)
 local _91_, _92_ = f(acc, order_values(M.unpack(vals, 1, n))) if ((_91_ == reduced_marker) and true) then local _3fnew_acc = _92_


 return _3fnew_acc elseif true then local _3fnew_acc = _91_

 return reduce_impl(f, _3fnew_acc, {gen, invariant, ctrl0}, order_values) elseif true then local _1 = _91_
 return error("internal-error: reduce could not match next value") else return nil end else return nil end end

 local __fn_2a_M__reduce_dispatch = {bodies = {}, help = {}} local function _111_(...) if (0 == #(__fn_2a_M__reduce_dispatch).bodies) then error(("multi-arity function " .. "M.reduce" .. " has no bodies")) else end local _113_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__reduce_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _113_ = f_74_auto end if (nil ~= _113_) then local f_74_auto = _113_ return f_74_auto(...) elseif (_113_ == nil) then local view_77_auto do local _114_, _115_ = pcall(require, "fennel") if ((_114_ == true) and ((_G.type(_115_) == "table") and (nil ~= (_115_).view))) then local view_77_auto0 = (_115_).view view_77_auto = view_77_auto0 elseif ((_114_ == false) and true) then local __75_auto = _115_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _117_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _117_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.reduce", table.concat(_117_, ", "), table.concat((__fn_2a_M__reduce_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.reduce = _111_ local function _120_() local _121_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f] (function? f))") local function _122_(...) if (1 == select("#", ...)) then local _123_ = {...} local function _124_(...) local f_95_ = (_123_)[1] return function_3f(f_95_) end if (((_G.type(_123_) == "table") and (nil ~= (_123_)[1])) and _124_(...)) then local f_95_ = (_123_)[1] local function _125_(f)


















 local function _126_(_241, _242) return M.reduce(f, _241, _242) end return _126_ end return _125_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _122_) _121_ = M.reduce end local _129_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f ?initial t] (and (function? f) (seq? t)))") local function _130_(...) if (3 == select("#", ...)) then local _131_ = {...} local function _132_(...) local f_96_ = (_131_)[1] local _3finitial_97_ = (_131_)[2] local t_98_ = (_131_)[3] return (function_3f(f_96_) and seq_3f(t_98_)) end if (((_G.type(_131_) == "table") and (nil ~= (_131_)[1]) and true and (nil ~= (_131_)[3])) and _132_(...)) then local f_96_ = (_131_)[1] local _3finitial_97_ = (_131_)[2] local t_98_ = (_131_)[3] local function _133_(f, _3finitial, t)


 return reduce_impl(f, _3finitial, M.pack(ipairs(t)), reduce_order_v_k) end return _133_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _130_) _129_ = M.reduce end local _136_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f ?initial t] (and (function? f) (assoc? t)))") local function _137_(...) if (3 == select("#", ...)) then local _138_ = {...} local function _139_(...) local f_99_ = (_138_)[1] local _3finitial_100_ = (_138_)[2] local t_101_ = (_138_)[3] return (function_3f(f_99_) and assoc_3f(t_101_)) end if (((_G.type(_138_) == "table") and (nil ~= (_138_)[1]) and true and (nil ~= (_138_)[3])) and _139_(...)) then local f_99_ = (_138_)[1] local _3finitial_100_ = (_138_)[2] local t_101_ = (_138_)[3] local function _140_(f, _3finitial, t)

 return reduce_impl(f, _3finitial, M.pack(pairs(t)), reduce_order_v_k) end return _140_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _137_) _136_ = M.reduce end local _143_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f ?initial generator] (and (function? f) (function? generator)))") local function _144_(...) if (3 == select("#", ...)) then local _145_ = {...} local function _146_(...) local f_102_ = (_145_)[1] local _3finitial_103_ = (_145_)[2] local generator_104_ = (_145_)[3] return (function_3f(f_102_) and function_3f(generator_104_)) end if (((_G.type(_145_) == "table") and (nil ~= (_145_)[1]) and true and (nil ~= (_145_)[3])) and _146_(...)) then local f_102_ = (_145_)[1] local _3finitial_103_ = (_145_)[2] local generator_104_ = (_145_)[3] local function _147_(f, _3finitial, generator)

 return reduce_impl(f, _3finitial, M.pack(generator()), reduce_order_identity) end return _147_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _144_) _143_ = M.reduce end local _150_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f t] (and (function? f) (seq? t)))") local function _151_(...) if (2 == select("#", ...)) then local _152_ = {...} local function _153_(...) local f_105_ = (_152_)[1] local t_106_ = (_152_)[2] return (function_3f(f_105_) and seq_3f(t_106_)) end if (((_G.type(_152_) == "table") and (nil ~= (_152_)[1]) and (nil ~= (_152_)[2])) and _153_(...)) then local f_105_ = (_152_)[1] local t_106_ = (_152_)[2] local function _154_(f, t)


 local iter, a, n = ipairs(t)
 local nn, initial = iter(a, n)
 return reduce_impl(f, initial, M.pack(iter, a, nn), reduce_order_v_k) end return _154_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _151_) _150_ = M.reduce end local _157_ do table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f t] (and (function? f) (assoc? t)))") local function _158_(...) if (2 == select("#", ...)) then local _159_ = {...} local function _160_(...) local f_107_ = (_159_)[1] local t_108_ = (_159_)[2] return (function_3f(f_107_) and assoc_3f(t_108_)) end if (((_G.type(_159_) == "table") and (nil ~= (_159_)[1]) and (nil ~= (_159_)[2])) and _160_(...)) then local f_107_ = (_159_)[1] local t_108_ = (_159_)[2] local function _161_(f, t)

 local iter, a, n = pairs(t)
 local nn, initial = iter(a, n)
 return reduce_impl(f, initial, M.pack(iter, a, nn), reduce_order_v_k) end return _161_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _158_) _157_ = M.reduce end local function _164_() table.insert((__fn_2a_M__reduce_dispatch).help, "(where [f generator] (and (function? f) (function? generator)))") local function _165_(...) if (2 == select("#", ...)) then local _166_ = {...} local function _167_(...) local f_109_ = (_166_)[1] local generator_110_ = (_166_)[2] return (function_3f(f_109_) and function_3f(generator_110_)) end if (((_G.type(_166_) == "table") and (nil ~= (_166_)[1]) and (nil ~= (_166_)[2])) and _167_(...)) then local f_109_ = (_166_)[1] local generator_110_ = (_166_)[2] local function _168_(f, generator)

 local iter, a, n = generator()
 local initial = iter(a, n)
 return reduce_impl(f, initial, M.pack(iter, a, initial), reduce_order_identity) end return _168_ else return nil end else return nil end end table.insert((__fn_2a_M__reduce_dispatch).bodies, _165_) return M.reduce end do local _ = {_121_, _129_, _136_, _143_, _150_, _157_, _164_()} end return M.reduce end setmetatable({nil, nil}, {__call = _120_})()

 local __fn_2a_depth_walk_impl_dispatch = {bodies = {}, help = {}} local depth_walk_impl local function _183_(...) if (0 == #(__fn_2a_depth_walk_impl_dispatch).bodies) then error(("multi-arity function " .. "depth-walk-impl" .. " has no bodies")) else end local _185_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_depth_walk_impl_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _185_ = f_74_auto end if (nil ~= _185_) then local f_74_auto = _185_ return f_74_auto(...) elseif (_185_ == nil) then local view_77_auto do local _186_, _187_ = pcall(require, "fennel") if ((_186_ == true) and ((_G.type(_187_) == "table") and (nil ~= (_187_).view))) then local view_77_auto0 = (_187_).view view_77_auto = view_77_auto0 elseif ((_186_ == false) and true) then local __75_auto = _187_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _189_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _189_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "depth-walk-impl", table.concat(_189_, ", "), table.concat((__fn_2a_depth_walk_impl_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end depth_walk_impl = _183_ local function _192_() local _193_ do table.insert((__fn_2a_depth_walk_impl_dispatch).help, "(where [f node ?list ?acc history next-id] (or (= nil ?list) (= nil (. ?list 1))))") local function _194_(...) if (6 == select("#", ...)) then local _195_ = {...} local function _196_(...) local f_171_ = (_195_)[1] local node_172_ = (_195_)[2] local _3flist_173_ = (_195_)[3] local _3facc_174_ = (_195_)[4] local history_175_ = (_195_)[5] local next_id_176_ = (_195_)[6] return ((nil == _3flist_173_) or (nil == (_3flist_173_)[1])) end if (((_G.type(_195_) == "table") and (nil ~= (_195_)[1]) and (nil ~= (_195_)[2]) and true and true and (nil ~= (_195_)[5]) and (nil ~= (_195_)[6])) and _196_(...)) then local f_171_ = (_195_)[1] local node_172_ = (_195_)[2] local _3flist_173_ = (_195_)[3] local _3facc_174_ = (_195_)[4] local history_175_ = (_195_)[5] local next_id_176_ = (_195_)[6] local function _197_(f, node, _3flist, _3facc, history, next_id)



 return f(_3facc, node, history) end return _197_ else return nil end else return nil end end table.insert((__fn_2a_depth_walk_impl_dispatch).bodies, _194_) _193_ = depth_walk_impl end local function _200_() table.insert((__fn_2a_depth_walk_impl_dispatch).help, "(where [f node list ?acc history next-id])") local function _201_(...) if (6 == select("#", ...)) then local _202_ = {...} local function _203_(...) local f_177_ = (_202_)[1] local node_178_ = (_202_)[2] local list_179_ = (_202_)[3] local _3facc_180_ = (_202_)[4] local history_181_ = (_202_)[5] local next_id_182_ = (_202_)[6] return true end if (((_G.type(_202_) == "table") and (nil ~= (_202_)[1]) and (nil ~= (_202_)[2]) and (nil ~= (_202_)[3]) and true and (nil ~= (_202_)[5]) and (nil ~= (_202_)[6])) and _203_(...)) then local f_177_ = (_202_)[1] local node_178_ = (_202_)[2] local list_179_ = (_202_)[3] local _3facc_180_ = (_202_)[4] local history_181_ = (_202_)[5] local next_id_182_ = (_202_)[6] local function _204_(f, node, list, _3facc, history, next_id)



 local branch_history = M["concat$"]({}, history, {node})
 local function _205_(_241, _242) return depth_walk_impl(f, _242, next_id(_242, branch_history), _241, branch_history, next_id) end return M.reduce(_205_, f(_3facc, node, history), list) end return _204_ else return nil end else return nil end end table.insert((__fn_2a_depth_walk_impl_dispatch).bodies, _201_) return depth_walk_impl end do local _ = {_193_, _200_()} end return depth_walk_impl end setmetatable({nil, nil}, {__call = _192_})()


 local __fn_2a_breadth_walk_impl_dispatch = {bodies = {}, help = {}} local breadth_walk_impl local function _218_(...) if (0 == #(__fn_2a_breadth_walk_impl_dispatch).bodies) then error(("multi-arity function " .. "breadth-walk-impl" .. " has no bodies")) else end local _220_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_breadth_walk_impl_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _220_ = f_74_auto end if (nil ~= _220_) then local f_74_auto = _220_ return f_74_auto(...) elseif (_220_ == nil) then local view_77_auto do local _221_, _222_ = pcall(require, "fennel") if ((_221_ == true) and ((_G.type(_222_) == "table") and (nil ~= (_222_).view))) then local view_77_auto0 = (_222_).view view_77_auto = view_77_auto0 elseif ((_221_ == false) and true) then local __75_auto = _222_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _224_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _224_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "breadth-walk-impl", table.concat(_224_, ", "), table.concat((__fn_2a_breadth_walk_impl_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end breadth_walk_impl = _218_ local function _227_() local _228_ do table.insert((__fn_2a_breadth_walk_impl_dispatch).help, "(where [f ?list ?acc history next-id] (or (= nil ?list) (= nil (. ?list 1))))") local function _229_(...) if (5 == select("#", ...)) then local _230_ = {...} local function _231_(...) local f_208_ = (_230_)[1] local _3flist_209_ = (_230_)[2] local _3facc_210_ = (_230_)[3] local history_211_ = (_230_)[4] local next_id_212_ = (_230_)[5] return ((nil == _3flist_209_) or (nil == (_3flist_209_)[1])) end if (((_G.type(_230_) == "table") and (nil ~= (_230_)[1]) and true and true and (nil ~= (_230_)[4]) and (nil ~= (_230_)[5])) and _231_(...)) then local f_208_ = (_230_)[1] local _3flist_209_ = (_230_)[2] local _3facc_210_ = (_230_)[3] local history_211_ = (_230_)[4] local next_id_212_ = (_230_)[5] local function _232_(f, _3flist, _3facc, history, next_id)


 return _3facc end return _232_ else return nil end else return nil end end table.insert((__fn_2a_breadth_walk_impl_dispatch).bodies, _229_) _228_ = breadth_walk_impl end local function _235_() table.insert((__fn_2a_breadth_walk_impl_dispatch).help, "(where [f list ?acc history next-id])") local function _236_(...) if (5 == select("#", ...)) then local _237_ = {...} local function _238_(...) local f_213_ = (_237_)[1] local list_214_ = (_237_)[2] local _3facc_215_ = (_237_)[3] local history_216_ = (_237_)[4] local next_id_217_ = (_237_)[5] return true end if (((_G.type(_237_) == "table") and (nil ~= (_237_)[1]) and (nil ~= (_237_)[2]) and true and (nil ~= (_237_)[4]) and (nil ~= (_237_)[5])) and _238_(...)) then local f_213_ = (_237_)[1] local list_214_ = (_237_)[2] local _3facc_215_ = (_237_)[3] local history_216_ = (_237_)[4] local next_id_217_ = (_237_)[5] local function _239_(f, list, _3facc, history, next_id)


 local next_list local function _240_(_241) return next_id(_241) end next_list = M["flat-map"](_240_, list)
 local history0 = M["append$"](history, {})


 local function _241_(_241, _242) local acc = f(_241, _242, history0)
 do local _242_ = M.last(history0) M["append$"](_242_, _242) end

 return acc end return breadth_walk_impl(f, next_list, M.reduce(_241_, _3facc, list), history0, next_id) end return _239_ else return nil end else return nil end end table.insert((__fn_2a_breadth_walk_impl_dispatch).bodies, _236_) return breadth_walk_impl end do local _ = {_228_, _235_()} end return breadth_walk_impl end setmetatable({nil, nil}, {__call = _227_})()



 local __fn_2a_M__depth_walk_dispatch = {bodies = {}, help = {}} local function _252_(...) if (0 == #(__fn_2a_M__depth_walk_dispatch).bodies) then error(("multi-arity function " .. "M.depth-walk" .. " has no bodies")) else end local _254_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__depth_walk_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _254_ = f_74_auto end if (nil ~= _254_) then local f_74_auto = _254_ return f_74_auto(...) elseif (_254_ == nil) then local view_77_auto do local _255_, _256_ = pcall(require, "fennel") if ((_255_ == true) and ((_G.type(_256_) == "table") and (nil ~= (_256_).view))) then local view_77_auto0 = (_256_).view view_77_auto = view_77_auto0 elseif ((_255_ == false) and true) then local __75_auto = _256_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _258_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _258_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.depth-walk", table.concat(_258_, ", "), table.concat((__fn_2a_M__depth_walk_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["depth-walk"] = _252_ local function _261_() local _262_ do table.insert((__fn_2a_M__depth_walk_dispatch).help, "(where [f node next-identity] (and (function? f) (table? node) (function? next-identity)))") local function _263_(...) if (3 == select("#", ...)) then local _264_ = {...} local function _265_(...) local f_245_ = (_264_)[1] local node_246_ = (_264_)[2] local next_identity_247_ = (_264_)[3] return (function_3f(f_245_) and table_3f(node_246_) and function_3f(next_identity_247_)) end if (((_G.type(_264_) == "table") and (nil ~= (_264_)[1]) and (nil ~= (_264_)[2]) and (nil ~= (_264_)[3])) and _265_(...)) then local f_245_ = (_264_)[1] local node_246_ = (_264_)[2] local next_identity_247_ = (_264_)[3] local function _266_(f, node, next_identity)















 local function _267_(_241, _242, _243) return f(_242, _243) end return depth_walk_impl(_267_, node, next_identity(node, {}), nil, {}, next_identity) end return _266_ else return nil end else return nil end end table.insert((__fn_2a_M__depth_walk_dispatch).bodies, _263_) _262_ = M["depth-walk"] end local function _270_() table.insert((__fn_2a_M__depth_walk_dispatch).help, "(where [f node ?acc next-identity] (and (function? f) (table? node) (function? next-identity)))") local function _271_(...) if (4 == select("#", ...)) then local _272_ = {...} local function _273_(...) local f_248_ = (_272_)[1] local node_249_ = (_272_)[2] local _3facc_250_ = (_272_)[3] local next_identity_251_ = (_272_)[4] return (function_3f(f_248_) and table_3f(node_249_) and function_3f(next_identity_251_)) end if (((_G.type(_272_) == "table") and (nil ~= (_272_)[1]) and (nil ~= (_272_)[2]) and true and (nil ~= (_272_)[4])) and _273_(...)) then local f_248_ = (_272_)[1] local node_249_ = (_272_)[2] local _3facc_250_ = (_272_)[3] local next_identity_251_ = (_272_)[4] local function _274_(f, node, _3facc, next_identity)

 return depth_walk_impl(f, node, next_identity(node, {}), _3facc, {}, next_identity) end return _274_ else return nil end else return nil end end table.insert((__fn_2a_M__depth_walk_dispatch).bodies, _271_) return M["depth-walk"] end do local _ = {_262_, _270_()} end return M["depth-walk"] end setmetatable({nil, nil}, {__call = _261_})()

 local __fn_2a_M__breadth_walk_dispatch = {bodies = {}, help = {}} local function _284_(...) if (0 == #(__fn_2a_M__breadth_walk_dispatch).bodies) then error(("multi-arity function " .. "M.breadth-walk" .. " has no bodies")) else end local _286_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__breadth_walk_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _286_ = f_74_auto end if (nil ~= _286_) then local f_74_auto = _286_ return f_74_auto(...) elseif (_286_ == nil) then local view_77_auto do local _287_, _288_ = pcall(require, "fennel") if ((_287_ == true) and ((_G.type(_288_) == "table") and (nil ~= (_288_).view))) then local view_77_auto0 = (_288_).view view_77_auto = view_77_auto0 elseif ((_287_ == false) and true) then local __75_auto = _288_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _290_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _290_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.breadth-walk", table.concat(_290_, ", "), table.concat((__fn_2a_M__breadth_walk_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["breadth-walk"] = _284_ local function _293_() local _294_ do table.insert((__fn_2a_M__breadth_walk_dispatch).help, "(where [f node next-identity] (and (function? f) (table? node) (function? next-identity)))") local function _295_(...) if (3 == select("#", ...)) then local _296_ = {...} local function _297_(...) local f_277_ = (_296_)[1] local node_278_ = (_296_)[2] local next_identity_279_ = (_296_)[3] return (function_3f(f_277_) and table_3f(node_278_) and function_3f(next_identity_279_)) end if (((_G.type(_296_) == "table") and (nil ~= (_296_)[1]) and (nil ~= (_296_)[2]) and (nil ~= (_296_)[3])) and _297_(...)) then local f_277_ = (_296_)[1] local node_278_ = (_296_)[2] local next_identity_279_ = (_296_)[3] local function _298_(f, node, next_identity)







 local function _299_(_241, _242, _243) return f(_242, _243) end return breadth_walk_impl(_299_, {node}, nil, {}, next_identity) end return _298_ else return nil end else return nil end end table.insert((__fn_2a_M__breadth_walk_dispatch).bodies, _295_) _294_ = M["breadth-walk"] end local function _302_() table.insert((__fn_2a_M__breadth_walk_dispatch).help, "(where [f node ?acc next-identity] (and (function? f) (table? node) (function? next-identity)))") local function _303_(...) if (4 == select("#", ...)) then local _304_ = {...} local function _305_(...) local f_280_ = (_304_)[1] local node_281_ = (_304_)[2] local _3facc_282_ = (_304_)[3] local next_identity_283_ = (_304_)[4] return (function_3f(f_280_) and table_3f(node_281_) and function_3f(next_identity_283_)) end if (((_G.type(_304_) == "table") and (nil ~= (_304_)[1]) and (nil ~= (_304_)[2]) and true and (nil ~= (_304_)[4])) and _305_(...)) then local f_280_ = (_304_)[1] local node_281_ = (_304_)[2] local _3facc_282_ = (_304_)[3] local next_identity_283_ = (_304_)[4] local function _306_(f, node, _3facc, next_identity)

 return breadth_walk_impl(f, {node}, _3facc, {}, next_identity) end return _306_ else return nil end else return nil end end table.insert((__fn_2a_M__breadth_walk_dispatch).bodies, _303_) return M["breadth-walk"] end do local _ = {_294_, _302_()} end return M["breadth-walk"] end setmetatable({nil, nil}, {__call = _293_})()



 local __fn_2a_M__map_dispatch = {bodies = {}, help = {}} local function _314_(...) if (0 == #(__fn_2a_M__map_dispatch).bodies) then error(("multi-arity function " .. "M.map" .. " has no bodies")) else end local _316_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__map_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _316_ = f_74_auto end if (nil ~= _316_) then local f_74_auto = _316_ return f_74_auto(...) elseif (_316_ == nil) then local view_77_auto do local _317_, _318_ = pcall(require, "fennel") if ((_317_ == true) and ((_G.type(_318_) == "table") and (nil ~= (_318_).view))) then local view_77_auto0 = (_318_).view view_77_auto = view_77_auto0 elseif ((_317_ == false) and true) then local __75_auto = _318_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _320_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _320_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.map", table.concat(_320_, ", "), table.concat((__fn_2a_M__map_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.map = _314_ local function _323_() local _324_ do table.insert((__fn_2a_M__map_dispatch).help, "(where [f] (function? f))") local function _325_(...) if (1 == select("#", ...)) then local _326_ = {...} local function _327_(...) local f_309_ = (_326_)[1] return function_3f(f_309_) end if (((_G.type(_326_) == "table") and (nil ~= (_326_)[1])) and _327_(...)) then local f_309_ = (_326_)[1] local function _328_(f)







 local function _329_(_241) return M.map(f, _241) end return _329_ end return _328_ else return nil end else return nil end end table.insert((__fn_2a_M__map_dispatch).bodies, _325_) _324_ = M.map end local _332_ do table.insert((__fn_2a_M__map_dispatch).help, "(where [f stream] (and (function? f) (stream? stream)))") local function _333_(...) if (2 == select("#", ...)) then local _334_ = {...} local function _335_(...) local f_310_ = (_334_)[1] local stream_311_ = (_334_)[2] return (function_3f(f_310_) and stream_3f(stream_311_)) end if (((_G.type(_334_) == "table") and (nil ~= (_334_)[1]) and (nil ~= (_334_)[2])) and _335_(...)) then local f_310_ = (_334_)[1] local stream_311_ = (_334_)[2] local function _336_(f, stream)


 local function _337_(...) return stream_use_new_value_marker, f(...) end table.insert(stream.funs, _337_)
 return stream end return _336_ else return nil end else return nil end end table.insert((__fn_2a_M__map_dispatch).bodies, _333_) _332_ = M.map end local function _340_() table.insert((__fn_2a_M__map_dispatch).help, "(where [f enumerable] (and (function? f) (enumerable? enumerable)))") local function _341_(...) if (2 == select("#", ...)) then local _342_ = {...} local function _343_(...) local f_312_ = (_342_)[1] local enumerable_313_ = (_342_)[2] return (function_3f(f_312_) and enumerable_3f(enumerable_313_)) end if (((_G.type(_342_) == "table") and (nil ~= (_342_)[1]) and (nil ~= (_342_)[2])) and _343_(...)) then local f_312_ = (_342_)[1] local enumerable_313_ = (_342_)[2] local function _344_(f, enumerable)

 local fx local function _345_(acc, ...)
 local _346_ = f(...) if (nil ~= _346_) then local val = _346_
 return M["insert$"](acc, -1, val) elseif (_346_ == nil) then
 return acc else return nil end end fx = _345_
 return M.reduce(fx, {}, enumerable) end return _344_ else return nil end else return nil end end table.insert((__fn_2a_M__map_dispatch).bodies, _341_) return M.map end do local _ = {_324_, _332_, _340_()} end return M.map end setmetatable({nil, nil}, {__call = _323_})()

 local __fn_2a_M__each_dispatch = {bodies = {}, help = {}} local function _355_(...) if (0 == #(__fn_2a_M__each_dispatch).bodies) then error(("multi-arity function " .. "M.each" .. " has no bodies")) else end local _357_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__each_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _357_ = f_74_auto end if (nil ~= _357_) then local f_74_auto = _357_ return f_74_auto(...) elseif (_357_ == nil) then local view_77_auto do local _358_, _359_ = pcall(require, "fennel") if ((_358_ == true) and ((_G.type(_359_) == "table") and (nil ~= (_359_).view))) then local view_77_auto0 = (_359_).view view_77_auto = view_77_auto0 elseif ((_358_ == false) and true) then local __75_auto = _359_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _361_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _361_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.each", table.concat(_361_, ", "), table.concat((__fn_2a_M__each_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.each = _355_ local function _364_() local _365_ do table.insert((__fn_2a_M__each_dispatch).help, "(where [f] (function? f))") local function _366_(...) if (1 == select("#", ...)) then local _367_ = {...} local function _368_(...) local f_350_ = (_367_)[1] return function_3f(f_350_) end if (((_G.type(_367_) == "table") and (nil ~= (_367_)[1])) and _368_(...)) then local f_350_ = (_367_)[1] local function _369_(f)




 local function _370_(_241) return M.each(f, _241) end return _370_ end return _369_ else return nil end else return nil end end table.insert((__fn_2a_M__each_dispatch).bodies, _366_) _365_ = M.each end local _373_ do table.insert((__fn_2a_M__each_dispatch).help, "(where [f stream] (and (function? f) (stream? stream)))") local function _374_(...) if (2 == select("#", ...)) then local _375_ = {...} local function _376_(...) local f_351_ = (_375_)[1] local stream_352_ = (_375_)[2] return (function_3f(f_351_) and stream_3f(stream_352_)) end if (((_G.type(_375_) == "table") and (nil ~= (_375_)[1]) and (nil ~= (_375_)[2])) and _376_(...)) then local f_351_ = (_375_)[1] local stream_352_ = (_375_)[2] local function _377_(f, stream)


 local function _378_(...) return stream_use_last_value_marker, f(...) end table.insert(stream.funs, _378_)
 return stream end return _377_ else return nil end else return nil end end table.insert((__fn_2a_M__each_dispatch).bodies, _374_) _373_ = M.each end local function _381_() table.insert((__fn_2a_M__each_dispatch).help, "(where [f enumerable] (and (function? f) (enumerable? enumerable)))") local function _382_(...) if (2 == select("#", ...)) then local _383_ = {...} local function _384_(...) local f_353_ = (_383_)[1] local enumerable_354_ = (_383_)[2] return (function_3f(f_353_) and enumerable_3f(enumerable_354_)) end if (((_G.type(_383_) == "table") and (nil ~= (_383_)[1]) and (nil ~= (_383_)[2])) and _384_(...)) then local f_353_ = (_383_)[1] local enumerable_354_ = (_383_)[2] local function _385_(f, enumerable)

 local fx local function _386_(acc, ...)
 f(...)
 return nil end fx = _386_
 return M.reduce(fx, nil, enumerable) end return _385_ else return nil end else return nil end end table.insert((__fn_2a_M__each_dispatch).bodies, _382_) return M.each end do local _ = {_365_, _373_, _381_()} end return M.each end setmetatable({nil, nil}, {__call = _364_})()

 local __fn_2a_M__flatten_dispatch = {bodies = {}, help = {}} local function _390_(...) if (0 == #(__fn_2a_M__flatten_dispatch).bodies) then error(("multi-arity function " .. "M.flatten" .. " has no bodies")) else end local _392_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__flatten_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _392_ = f_74_auto end if (nil ~= _392_) then local f_74_auto = _392_ return f_74_auto(...) elseif (_392_ == nil) then local view_77_auto do local _393_, _394_ = pcall(require, "fennel") if ((_393_ == true) and ((_G.type(_394_) == "table") and (nil ~= (_394_).view))) then local view_77_auto0 = (_394_).view view_77_auto = view_77_auto0 elseif ((_393_ == false) and true) then local __75_auto = _394_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _396_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _396_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.flatten", table.concat(_396_, ", "), table.concat((__fn_2a_M__flatten_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.flatten = _390_ local function _399_() local function _400_() table.insert((__fn_2a_M__flatten_dispatch).help, "(where [seq] (seq? seq))") local function _401_(...) if (1 == select("#", ...)) then local _402_ = {...} local function _403_(...) local seq_389_ = (_402_)[1] return seq_3f(seq_389_) end if (((_G.type(_402_) == "table") and (nil ~= (_402_)[1])) and _403_(...)) then local seq_389_ = (_402_)[1] local function _404_(seq)


 local fx local function _405_(acc, v, i)
 if seq_3f(v) then
 local tbl_17_auto = acc local i_18_auto = #tbl_17_auto for _, vv in ipairs(v) do local val_19_auto = vv if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end return tbl_17_auto else
 return M["append$"](acc, v) end end fx = _405_
 return M.reduce(fx, {}, seq) end return _404_ else return nil end else return nil end end table.insert((__fn_2a_M__flatten_dispatch).bodies, _401_) return M.flatten end do local _ = {_400_()} end return M.flatten end setmetatable({nil, nil}, {__call = _399_})()

 local __fn_2a_M__flat_map_dispatch = {bodies = {}, help = {}} local function _413_(...) if (0 == #(__fn_2a_M__flat_map_dispatch).bodies) then error(("multi-arity function " .. "M.flat-map" .. " has no bodies")) else end local _415_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__flat_map_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _415_ = f_74_auto end if (nil ~= _415_) then local f_74_auto = _415_ return f_74_auto(...) elseif (_415_ == nil) then local view_77_auto do local _416_, _417_ = pcall(require, "fennel") if ((_416_ == true) and ((_G.type(_417_) == "table") and (nil ~= (_417_).view))) then local view_77_auto0 = (_417_).view view_77_auto = view_77_auto0 elseif ((_416_ == false) and true) then local __75_auto = _417_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _419_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _419_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.flat-map", table.concat(_419_, ", "), table.concat((__fn_2a_M__flat_map_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["flat-map"] = _413_ local function _422_() local _423_ do table.insert((__fn_2a_M__flat_map_dispatch).help, "(where [f] (function? f))") local function _424_(...) if (1 == select("#", ...)) then local _425_ = {...} local function _426_(...) local f_410_ = (_425_)[1] return function_3f(f_410_) end if (((_G.type(_425_) == "table") and (nil ~= (_425_)[1])) and _426_(...)) then local f_410_ = (_425_)[1] local function _427_(f)

 local function _428_(_241) return M["flat-map"](f, _241) end return _428_ end return _427_ else return nil end else return nil end end table.insert((__fn_2a_M__flat_map_dispatch).bodies, _424_) _423_ = M["flat-map"] end local function _431_() table.insert((__fn_2a_M__flat_map_dispatch).help, "(where [f enumerable] (and (function? f) (enumerable? enumerable)))") local function _432_(...) if (2 == select("#", ...)) then local _433_ = {...} local function _434_(...) local f_411_ = (_433_)[1] local enumerable_412_ = (_433_)[2] return (function_3f(f_411_) and enumerable_3f(enumerable_412_)) end if (((_G.type(_433_) == "table") and (nil ~= (_433_)[1]) and (nil ~= (_433_)[2])) and _434_(...)) then local f_411_ = (_433_)[1] local enumerable_412_ = (_433_)[2] local function _435_(f, enumerable)

 return M.flatten(M.map(f, enumerable)) end return _435_ else return nil end else return nil end end table.insert((__fn_2a_M__flat_map_dispatch).bodies, _432_) return M["flat-map"] end do local _ = {_423_, _431_()} end return M["flat-map"] end setmetatable({nil, nil}, {__call = _422_})()




 local __fn_2a_M__filter_dispatch = {bodies = {}, help = {}} local function _443_(...) if (0 == #(__fn_2a_M__filter_dispatch).bodies) then error(("multi-arity function " .. "M.filter" .. " has no bodies")) else end local _445_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__filter_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _445_ = f_74_auto end if (nil ~= _445_) then local f_74_auto = _445_ return f_74_auto(...) elseif (_445_ == nil) then local view_77_auto do local _446_, _447_ = pcall(require, "fennel") if ((_446_ == true) and ((_G.type(_447_) == "table") and (nil ~= (_447_).view))) then local view_77_auto0 = (_447_).view view_77_auto = view_77_auto0 elseif ((_446_ == false) and true) then local __75_auto = _447_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _449_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _449_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.filter", table.concat(_449_, ", "), table.concat((__fn_2a_M__filter_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.filter = _443_ local function _452_() local _453_ do table.insert((__fn_2a_M__filter_dispatch).help, "(where [pred] (function? pred))") local function _454_(...) if (1 == select("#", ...)) then local _455_ = {...} local function _456_(...) local pred_438_ = (_455_)[1] return function_3f(pred_438_) end if (((_G.type(_455_) == "table") and (nil ~= (_455_)[1])) and _456_(...)) then local pred_438_ = (_455_)[1] local function _457_(pred)







 local function _458_(_241) return M.filter(pred, _241) end return _458_ end return _457_ else return nil end else return nil end end table.insert((__fn_2a_M__filter_dispatch).bodies, _454_) _453_ = M.filter end local _461_ do table.insert((__fn_2a_M__filter_dispatch).help, "(where [pred stream] (and (function? pred) (stream? stream)))") local function _462_(...) if (2 == select("#", ...)) then local _463_ = {...} local function _464_(...) local pred_439_ = (_463_)[1] local stream_440_ = (_463_)[2] return (function_3f(pred_439_) and stream_3f(stream_440_)) end if (((_G.type(_463_) == "table") and (nil ~= (_463_)[1]) and (nil ~= (_463_)[2])) and _464_(...)) then local pred_439_ = (_463_)[1] local stream_440_ = (_463_)[2] local function _465_(pred, stream)


 local function _466_(...) if pred(...) then
 return stream_use_last_value_marker else
 return stream_halt_marker end end table.insert(stream.funs, _466_)
 return stream end return _465_ else return nil end else return nil end end table.insert((__fn_2a_M__filter_dispatch).bodies, _462_) _461_ = M.filter end local function _470_() table.insert((__fn_2a_M__filter_dispatch).help, "(where [pred t] (and (function? pred) (or (seq? t) (assoc? t))))") local function _471_(...) if (2 == select("#", ...)) then local _472_ = {...} local function _473_(...) local pred_441_ = (_472_)[1] local t_442_ = (_472_)[2] return (function_3f(pred_441_) and (seq_3f(t_442_) or assoc_3f(t_442_))) end if (((_G.type(_472_) == "table") and (nil ~= (_472_)[1]) and (nil ~= (_472_)[2])) and _473_(...)) then local pred_441_ = (_472_)[1] local t_442_ = (_472_)[2] local function _474_(pred, t)

 local insert if seq_3f(t) then
 local function _475_(_241, _242) table.insert(_241, _242) return _241 end insert = _475_ else
 local function _476_(_241, _242, _243) _241[_243] = _242 return _241 end insert = _476_ end local insert_3f
 local function _478_(acc, k, v)
 if pred(k, v) then
 return insert(acc, k, v) else
 return acc end end insert_3f = _478_
 return M.reduce(insert_3f, {}, t) end return _474_ else return nil end else return nil end end table.insert((__fn_2a_M__filter_dispatch).bodies, _471_) return M.filter end do local _ = {_453_, _461_, _470_()} end return M.filter end setmetatable({nil, nil}, {__call = _452_})()

 M.reject = function(pred, ...)

 local function _482_(...) return not pred(...) end return M.filter(_482_, ...) end

 local __fn_2a_M__any_3f_dispatch = {bodies = {}, help = {}} local function _485_(...) if (0 == #(__fn_2a_M__any_3f_dispatch).bodies) then error(("multi-arity function " .. "M.any?" .. " has no bodies")) else end local _487_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__any_3f_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _487_ = f_74_auto end if (nil ~= _487_) then local f_74_auto = _487_ return f_74_auto(...) elseif (_487_ == nil) then local view_77_auto do local _488_, _489_ = pcall(require, "fennel") if ((_488_ == true) and ((_G.type(_489_) == "table") and (nil ~= (_489_).view))) then local view_77_auto0 = (_489_).view view_77_auto = view_77_auto0 elseif ((_488_ == false) and true) then local __75_auto = _489_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _491_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _491_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.any?", table.concat(_491_, ", "), table.concat((__fn_2a_M__any_3f_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["any?"] = _485_ local function _494_() local function _495_() table.insert((__fn_2a_M__any_3f_dispatch).help, "(where [f t] (and (function? f) (enumerable? t)))") local function _496_(...) if (2 == select("#", ...)) then local _497_ = {...} local function _498_(...) local f_483_ = (_497_)[1] local t_484_ = (_497_)[2] return (function_3f(f_483_) and enumerable_3f(t_484_)) end if (((_G.type(_497_) == "table") and (nil ~= (_497_)[1]) and (nil ~= (_497_)[2])) and _498_(...)) then local f_483_ = (_497_)[1] local t_484_ = (_497_)[2] local function _499_(f, t)


 local function _500_(_acc, ...) if f(...) then
 return M.reduced(true) else
 return false end end return M.reduce(_500_, false, t) end return _499_ else return nil end else return nil end end table.insert((__fn_2a_M__any_3f_dispatch).bodies, _496_) return M["any?"] end do local _ = {_495_()} end return M["any?"] end setmetatable({nil, nil}, {__call = _494_})()


 local __fn_2a_M__all_3f_dispatch = {bodies = {}, help = {}} local function _506_(...) if (0 == #(__fn_2a_M__all_3f_dispatch).bodies) then error(("multi-arity function " .. "M.all?" .. " has no bodies")) else end local _508_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__all_3f_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _508_ = f_74_auto end if (nil ~= _508_) then local f_74_auto = _508_ return f_74_auto(...) elseif (_508_ == nil) then local view_77_auto do local _509_, _510_ = pcall(require, "fennel") if ((_509_ == true) and ((_G.type(_510_) == "table") and (nil ~= (_510_).view))) then local view_77_auto0 = (_510_).view view_77_auto = view_77_auto0 elseif ((_509_ == false) and true) then local __75_auto = _510_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _512_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _512_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.all?", table.concat(_512_, ", "), table.concat((__fn_2a_M__all_3f_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["all?"] = _506_ local function _515_() local function _516_() table.insert((__fn_2a_M__all_3f_dispatch).help, "(where [f t] (and (function? f) (enumerable? t)))") local function _517_(...) if (2 == select("#", ...)) then local _518_ = {...} local function _519_(...) local f_504_ = (_518_)[1] local t_505_ = (_518_)[2] return (function_3f(f_504_) and enumerable_3f(t_505_)) end if (((_G.type(_518_) == "table") and (nil ~= (_518_)[1]) and (nil ~= (_518_)[2])) and _519_(...)) then local f_504_ = (_518_)[1] local t_505_ = (_518_)[2] local function _520_(f, t)


 local function _521_(acc, ...) if (acc and f(...)) then
 return true else
 return M.reduced(false) end end return M.reduce(_521_, true, t) end return _520_ else return nil end else return nil end end table.insert((__fn_2a_M__all_3f_dispatch).bodies, _517_) return M["all?"] end do local _ = {_516_()} end return M["all?"] end setmetatable({nil, nil}, {__call = _515_})()


 local __fn_2a_M__find_dispatch = {bodies = {}, help = {}} local function _527_(...) if (0 == #(__fn_2a_M__find_dispatch).bodies) then error(("multi-arity function " .. "M.find" .. " has no bodies")) else end local _529_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__find_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _529_ = f_74_auto end if (nil ~= _529_) then local f_74_auto = _529_ return f_74_auto(...) elseif (_529_ == nil) then local view_77_auto do local _530_, _531_ = pcall(require, "fennel") if ((_530_ == true) and ((_G.type(_531_) == "table") and (nil ~= (_531_).view))) then local view_77_auto0 = (_531_).view view_77_auto = view_77_auto0 elseif ((_530_ == false) and true) then local __75_auto = _531_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _533_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _533_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.find", table.concat(_533_, ", "), table.concat((__fn_2a_M__find_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.find = _527_ local function _536_() local function _537_() table.insert((__fn_2a_M__find_dispatch).help, "(where [f e] (and (function? f) (enumerable? e)))") local function _538_(...) if (2 == select("#", ...)) then local _539_ = {...} local function _540_(...) local f_525_ = (_539_)[1] local e_526_ = (_539_)[2] return (function_3f(f_525_) and enumerable_3f(e_526_)) end if (((_G.type(_539_) == "table") and (nil ~= (_539_)[1]) and (nil ~= (_539_)[2])) and _540_(...)) then local f_525_ = (_539_)[1] local e_526_ = (_539_)[2] local function _541_(f, e)





 local reducer local function _542_(_, ...)
 if f(...) then

 return M.reduced(M.pack(...)) else
 return nil end end reducer = M.reduce(_542_)
 local _544_ = reducer(nil, e) if (nil ~= _544_) then local any = _544_
 return M.unpack(any) elseif (_544_ == nil) then
 return nil else return nil end end return _541_ else return nil end else return nil end end table.insert((__fn_2a_M__find_dispatch).bodies, _538_) return M.find end do local _ = {_537_()} end return M.find end setmetatable({nil, nil}, {__call = _536_})()

















 local __fn_2a_M__group_by_dispatch = {bodies = {}, help = {}} local function _553_(...) if (0 == #(__fn_2a_M__group_by_dispatch).bodies) then error(("multi-arity function " .. "M.group-by" .. " has no bodies")) else end local _555_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__group_by_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _555_ = f_74_auto end if (nil ~= _555_) then local f_74_auto = _555_ return f_74_auto(...) elseif (_555_ == nil) then local view_77_auto do local _556_, _557_ = pcall(require, "fennel") if ((_556_ == true) and ((_G.type(_557_) == "table") and (nil ~= (_557_).view))) then local view_77_auto0 = (_557_).view view_77_auto = view_77_auto0 elseif ((_556_ == false) and true) then local __75_auto = _557_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _559_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _559_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.group-by", table.concat(_559_, ", "), table.concat((__fn_2a_M__group_by_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["group-by"] = _553_ local function _562_() local _563_ do table.insert((__fn_2a_M__group_by_dispatch).help, "(where [f] (function? f))") local function _564_(...) if (1 == select("#", ...)) then local _565_ = {...} local function _566_(...) local f_548_ = (_565_)[1] return function_3f(f_548_) end if (((_G.type(_565_) == "table") and (nil ~= (_565_)[1])) and _566_(...)) then local f_548_ = (_565_)[1] local function _567_(f)











 local function _568_(_241) return M["group-by"](f, _241) end return _568_ end return _567_ else return nil end else return nil end end table.insert((__fn_2a_M__group_by_dispatch).bodies, _564_) _563_ = M["group-by"] end local _571_ do table.insert((__fn_2a_M__group_by_dispatch).help, "(where [f e] (and (function? f) (table? e)))") local function _572_(...) if (2 == select("#", ...)) then local _573_ = {...} local function _574_(...) local f_549_ = (_573_)[1] local e_550_ = (_573_)[2] return (function_3f(f_549_) and table_3f(e_550_)) end if (((_G.type(_573_) == "table") and (nil ~= (_573_)[1]) and (nil ~= (_573_)[2])) and _574_(...)) then local f_549_ = (_573_)[1] local e_550_ = (_573_)[2] local function _575_(f, e)



 local function _576_(acc, v, k)
 local key, val = f(v, k)
 local _ = assert((nil ~= key), "group-by key may not be nil")
 local val0 = (val or v)
 local group = (acc[key] or {})
 return M["set$"](acc, key, M["append$"](group, val0)) end return M.reduce(_576_, {}, e) end return _575_ else return nil end else return nil end end table.insert((__fn_2a_M__group_by_dispatch).bodies, _572_) _571_ = M["group-by"] end local function _579_() table.insert((__fn_2a_M__group_by_dispatch).help, "(where [f e] (and (function? f) (function? e)))") local function _580_(...) if (2 == select("#", ...)) then local _581_ = {...} local function _582_(...) local f_551_ = (_581_)[1] local e_552_ = (_581_)[2] return (function_3f(f_551_) and function_3f(e_552_)) end if (((_G.type(_581_) == "table") and (nil ~= (_581_)[1]) and (nil ~= (_581_)[2])) and _582_(...)) then local f_551_ = (_581_)[1] local e_552_ = (_581_)[2] local function _583_(f, e)




 local function _584_(acc, ...)
 local key, val = f(...)
 local _ = assert((nil ~= key), "group-by key may not be nil")
 local _0 = assert((nil ~= val), "group-by on function must return (key value)")

 local group = (acc[key] or {})
 return M["set$"](acc, key, M["append$"](group, val)) end return M.reduce(_584_, {}, e) end return _583_ else return nil end else return nil end end table.insert((__fn_2a_M__group_by_dispatch).bodies, _580_) return M["group-by"] end do local _ = {_563_, _571_, _579_()} end return M["group-by"] end setmetatable({nil, nil}, {__call = _562_})()


 local __fn_2a_take_dispatch = {bodies = {}, help = {}} local take local function _591_(...) if (0 == #(__fn_2a_take_dispatch).bodies) then error(("multi-arity function " .. "take" .. " has no bodies")) else end local _593_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_take_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _593_ = f_74_auto end if (nil ~= _593_) then local f_74_auto = _593_ return f_74_auto(...) elseif (_593_ == nil) then local view_77_auto do local _594_, _595_ = pcall(require, "fennel") if ((_594_ == true) and ((_G.type(_595_) == "table") and (nil ~= (_595_).view))) then local view_77_auto0 = (_595_).view view_77_auto = view_77_auto0 elseif ((_594_ == false) and true) then local __75_auto = _595_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _597_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _597_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "take", table.concat(_597_, ", "), table.concat((__fn_2a_take_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end take = _591_ local function _600_() local _601_ do table.insert((__fn_2a_take_dispatch).help, "(where [e n] (and (seq? e) (number? n)))") local function _602_(...) if (2 == select("#", ...)) then local _603_ = {...} local function _604_(...) local e_587_ = (_603_)[1] local n_588_ = (_603_)[2] return (seq_3f(e_587_) and number_3f(n_588_)) end if (((_G.type(_603_) == "table") and (nil ~= (_603_)[1]) and (nil ~= (_603_)[2])) and _604_(...)) then local e_587_ = (_603_)[1] local n_588_ = (_603_)[2] local function _605_(e, n)

 return error("todo") end return _605_ else return nil end else return nil end end table.insert((__fn_2a_take_dispatch).bodies, _602_) _601_ = take end local function _608_() table.insert((__fn_2a_take_dispatch).help, "(where [e n] (and (function? e) (number? n)))") local function _609_(...) if (2 == select("#", ...)) then local _610_ = {...} local function _611_(...) local e_589_ = (_610_)[1] local n_590_ = (_610_)[2] return (function_3f(e_589_) and number_3f(n_590_)) end if (((_G.type(_610_) == "table") and (nil ~= (_610_)[1]) and (nil ~= (_610_)[2])) and _611_(...)) then local e_589_ = (_610_)[1] local n_590_ = (_610_)[2] local function _612_(e, n)

 return error("todo") end return _612_ else return nil end else return nil end end table.insert((__fn_2a_take_dispatch).bodies, _609_) return take end do local _ = {_601_, _608_()} end return take end setmetatable({nil, nil}, {__call = _600_})()

 local __fn_2a_M__pluck_dispatch = {bodies = {}, help = {}} local function _617_(...) if (0 == #(__fn_2a_M__pluck_dispatch).bodies) then error(("multi-arity function " .. "M.pluck" .. " has no bodies")) else end local _619_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__pluck_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _619_ = f_74_auto end if (nil ~= _619_) then local f_74_auto = _619_ return f_74_auto(...) elseif (_619_ == nil) then local view_77_auto do local _620_, _621_ = pcall(require, "fennel") if ((_620_ == true) and ((_G.type(_621_) == "table") and (nil ~= (_621_).view))) then local view_77_auto0 = (_621_).view view_77_auto = view_77_auto0 elseif ((_620_ == false) and true) then local __75_auto = _621_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _623_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _623_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.pluck", table.concat(_623_, ", "), table.concat((__fn_2a_M__pluck_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.pluck = _617_ local function _626_() local function _627_() table.insert((__fn_2a_M__pluck_dispatch).help, "(where [t ks] (and (table? t) (seq? ks)))") local function _628_(...) if (2 == select("#", ...)) then local _629_ = {...} local function _630_(...) local t_615_ = (_629_)[1] local ks_616_ = (_629_)[2] return (table_3f(t_615_) and seq_3f(ks_616_)) end if (((_G.type(_629_) == "table") and (nil ~= (_629_)[1]) and (nil ~= (_629_)[2])) and _630_(...)) then local t_615_ = (_629_)[1] local ks_616_ = (_629_)[2] local function _631_(t, ks)



 local function _632_(_241) return t[_241] end return M.map(_632_, ks) end return _631_ else return nil end else return nil end end table.insert((__fn_2a_M__pluck_dispatch).bodies, _628_) return M.pluck end do local _ = {_627_()} end return M.pluck end setmetatable({nil, nil}, {__call = _626_})()

 local __fn_2a_M__dot_dispatch = {bodies = {}, help = {}} local function _638_(...) if (0 == #(__fn_2a_M__dot_dispatch).bodies) then error(("multi-arity function " .. "M.dot" .. " has no bodies")) else end local _640_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__dot_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _640_ = f_74_auto end if (nil ~= _640_) then local f_74_auto = _640_ return f_74_auto(...) elseif (_640_ == nil) then local view_77_auto do local _641_, _642_ = pcall(require, "fennel") if ((_641_ == true) and ((_G.type(_642_) == "table") and (nil ~= (_642_).view))) then local view_77_auto0 = (_642_).view view_77_auto = view_77_auto0 elseif ((_641_ == false) and true) then local __75_auto = _642_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _644_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _644_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.dot", table.concat(_644_, ", "), table.concat((__fn_2a_M__dot_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.dot = _638_ local function _647_() local _648_ do table.insert((__fn_2a_M__dot_dispatch).help, "(where [k])") local function _649_(...) if (1 == select("#", ...)) then local _650_ = {...} local function _651_(...) local k_635_ = (_650_)[1] return true end if (((_G.type(_650_) == "table") and (nil ~= (_650_)[1])) and _651_(...)) then local k_635_ = (_650_)[1] local function _652_(k)


 local function _653_(_241) return M.dot(k, _241) end return _653_ end return _652_ else return nil end else return nil end end table.insert((__fn_2a_M__dot_dispatch).bodies, _649_) _648_ = M.dot end local function _656_() table.insert((__fn_2a_M__dot_dispatch).help, "(where [k t] (table? t))") local function _657_(...) if (2 == select("#", ...)) then local _658_ = {...} local function _659_(...) local k_636_ = (_658_)[1] local t_637_ = (_658_)[2] return table_3f(t_637_) end if (((_G.type(_658_) == "table") and (nil ~= (_658_)[1]) and (nil ~= (_658_)[2])) and _659_(...)) then local k_636_ = (_658_)[1] local t_637_ = (_658_)[2] local function _660_(k, t)

 return t[k] end return _660_ else return nil end else return nil end end table.insert((__fn_2a_M__dot_dispatch).bodies, _657_) return M.dot end do local _ = {_648_, _656_()} end return M.dot end setmetatable({nil, nil}, {__call = _647_})()



 local function negable_seq_index(seq, i, ctx)







 assert(ctx, "ind-mod requires :insert or :remove ctx")
 local _663_ = {i, #seq, ctx} local function _664_() local n = (_663_)[2] return (function(_665_,_666_,_667_) return (_665_ < _666_) and (_666_ < _667_) end)(0,i,(n + 1)) end if (((_G.type(_663_) == "table") and ((_663_)[1] == i) and (nil ~= (_663_)[2])) and _664_()) then local n = (_663_)[2]
 return i elseif ((_G.type(_663_) == "table") and ((_663_)[1] == -1) and ((_663_)[2] == 0)) then
 return 1 else local function _668_() local n = (_663_)[2] return (function(_669_,_670_,_671_) return (_669_ <= _670_) and (_670_ <= _671_) end)(((-1 * n) - 1),i,-1) end if (((_G.type(_663_) == "table") and ((_663_)[1] == i) and (nil ~= (_663_)[2]) and ((_663_)[3] == "insert")) and _668_()) then local n = (_663_)[2]

 return (n + 2 + i) else local function _672_() local n = (_663_)[2] return (function(_673_,_674_,_675_) return (_673_ <= _674_) and (_674_ <= _675_) end)((-1 * n),i,-1) end if (((_G.type(_663_) == "table") and ((_663_)[1] == i) and (nil ~= (_663_)[2]) and ((_663_)[3] == "remove")) and _672_()) then local n = (_663_)[2]
 return (n + 1 + i) else local function _676_() local n = (_663_)[2] return (n < i) end if (((_G.type(_663_) == "table") and ((_663_)[1] == i) and (nil ~= (_663_)[2])) and _676_()) then local n = (_663_)[2]
 return error(string.format("index %d overbounds", i, n)) else local function _677_() local n = (_663_)[2] return (i < 0) end if (((_G.type(_663_) == "table") and ((_663_)[1] == i) and (nil ~= (_663_)[2])) and _677_()) then local n = (_663_)[2]
 return error(string.format("index %d underbounds", i, n)) elseif ((_G.type(_663_) == "table") and ((_663_)[1] == 0) and (nil ~= (_663_)[2])) then local n = (_663_)[2]
 return error(string.format("index 0 invalid, use 1 or %d", ((-1 * n) - 1))) else return nil end end end end end end

 local __fn_2a_M__insert_24_dispatch = {bodies = {}, help = {}} local function _682_(...) if (0 == #(__fn_2a_M__insert_24_dispatch).bodies) then error(("multi-arity function " .. "M.insert$" .. " has no bodies")) else end local _684_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__insert_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _684_ = f_74_auto end if (nil ~= _684_) then local f_74_auto = _684_ return f_74_auto(...) elseif (_684_ == nil) then local view_77_auto do local _685_, _686_ = pcall(require, "fennel") if ((_685_ == true) and ((_G.type(_686_) == "table") and (nil ~= (_686_).view))) then local view_77_auto0 = (_686_).view view_77_auto = view_77_auto0 elseif ((_685_ == false) and true) then local __75_auto = _686_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _688_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _688_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.insert$", table.concat(_688_, ", "), table.concat((__fn_2a_M__insert_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["insert$"] = _682_ local function _691_() local function _692_() table.insert((__fn_2a_M__insert_24_dispatch).help, "(where [seq i v] (and (seq? seq) (number? i)))") local function _693_(...) if (3 == select("#", ...)) then local _694_ = {...} local function _695_(...) local seq_679_ = (_694_)[1] local i_680_ = (_694_)[2] local v_681_ = (_694_)[3] return (seq_3f(seq_679_) and number_3f(i_680_)) end if (((_G.type(_694_) == "table") and (nil ~= (_694_)[1]) and (nil ~= (_694_)[2]) and (nil ~= (_694_)[3])) and _695_(...)) then local seq_679_ = (_694_)[1] local i_680_ = (_694_)[2] local v_681_ = (_694_)[3] local function _696_(seq, i, v)


 table.insert(seq, negable_seq_index(seq, i, "insert"), v) return seq end return _696_ else return nil end else return nil end end table.insert((__fn_2a_M__insert_24_dispatch).bodies, _693_) return M["insert$"] end do local _ = {_692_()} end return M["insert$"] end setmetatable({nil, nil}, {__call = _691_})()


 local __fn_2a_M__remove_24_dispatch = {bodies = {}, help = {}} local function _701_(...) if (0 == #(__fn_2a_M__remove_24_dispatch).bodies) then error(("multi-arity function " .. "M.remove$" .. " has no bodies")) else end local _703_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__remove_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _703_ = f_74_auto end if (nil ~= _703_) then local f_74_auto = _703_ return f_74_auto(...) elseif (_703_ == nil) then local view_77_auto do local _704_, _705_ = pcall(require, "fennel") if ((_704_ == true) and ((_G.type(_705_) == "table") and (nil ~= (_705_).view))) then local view_77_auto0 = (_705_).view view_77_auto = view_77_auto0 elseif ((_704_ == false) and true) then local __75_auto = _705_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _707_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _707_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.remove$", table.concat(_707_, ", "), table.concat((__fn_2a_M__remove_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["remove$"] = _701_ local function _710_() local function _711_() table.insert((__fn_2a_M__remove_24_dispatch).help, "(where [seq i] (and (seq? seq) (number? i)))") local function _712_(...) if (2 == select("#", ...)) then local _713_ = {...} local function _714_(...) local seq_699_ = (_713_)[1] local i_700_ = (_713_)[2] return (seq_3f(seq_699_) and number_3f(i_700_)) end if (((_G.type(_713_) == "table") and (nil ~= (_713_)[1]) and (nil ~= (_713_)[2])) and _714_(...)) then local seq_699_ = (_713_)[1] local i_700_ = (_713_)[2] local function _715_(seq, i)


 table.remove(seq, negable_seq_index(seq, i, "remove")) return seq end return _715_ else return nil end else return nil end end table.insert((__fn_2a_M__remove_24_dispatch).bodies, _712_) return M["remove$"] end do local _ = {_711_()} end return M["remove$"] end setmetatable({nil, nil}, {__call = _710_})()


 local __fn_2a_M__append_24_dispatch = {bodies = {}, help = {}} local function _719_(...) if (0 == #(__fn_2a_M__append_24_dispatch).bodies) then error(("multi-arity function " .. "M.append$" .. " has no bodies")) else end local _721_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__append_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _721_ = f_74_auto end if (nil ~= _721_) then local f_74_auto = _721_ return f_74_auto(...) elseif (_721_ == nil) then local view_77_auto do local _722_, _723_ = pcall(require, "fennel") if ((_722_ == true) and ((_G.type(_723_) == "table") and (nil ~= (_723_).view))) then local view_77_auto0 = (_723_).view view_77_auto = view_77_auto0 elseif ((_722_ == false) and true) then local __75_auto = _723_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _725_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _725_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.append$", table.concat(_725_, ", "), table.concat((__fn_2a_M__append_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["append$"] = _719_ local function _728_() local function _729_() table.insert((__fn_2a_M__append_24_dispatch).help, "(where [seq ...] (and (seq? seq) (< 0 (select \"#\" ...))))") local function _730_(...) if (1 <= select("#", ...)) then local _731_ = {...} local function _732_(...) local seq_718_ = (_731_)[1] return (seq_3f(seq_718_) and (0 < select("#", select(2, ...)))) end if (((_G.type(_731_) == "table") and (nil ~= (_731_)[1])) and _732_(...)) then local seq_718_ = (_731_)[1] local function _733_(seq, ...)


 local _let_734_ = M.pack(...) local n = _let_734_["n"] local vals = _let_734_
 for i = 1, n do
 M["insert$"](seq, -1, vals[i]) end
 return seq end return _733_ else return nil end else return nil end end table.insert((__fn_2a_M__append_24_dispatch).bodies, _730_) return M["append$"] end do local _ = {_729_()} end return M["append$"] end setmetatable({nil, nil}, {__call = _728_})()

 local __fn_2a_M__concat_24_dispatch = {bodies = {}, help = {}} local function _742_(...) if (0 == #(__fn_2a_M__concat_24_dispatch).bodies) then error(("multi-arity function " .. "M.concat$" .. " has no bodies")) else end local _744_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__concat_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _744_ = f_74_auto end if (nil ~= _744_) then local f_74_auto = _744_ return f_74_auto(...) elseif (_744_ == nil) then local view_77_auto do local _745_, _746_ = pcall(require, "fennel") if ((_745_ == true) and ((_G.type(_746_) == "table") and (nil ~= (_746_).view))) then local view_77_auto0 = (_746_).view view_77_auto = view_77_auto0 elseif ((_745_ == false) and true) then local __75_auto = _746_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _748_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _748_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.concat$", table.concat(_748_, ", "), table.concat((__fn_2a_M__concat_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["concat$"] = _742_ local function _751_() local _752_ do table.insert((__fn_2a_M__concat_24_dispatch).help, "(where [seq seq-1] (and (seq? seq) (seq? seq-1)))") local function _753_(...) if (2 == select("#", ...)) then local _754_ = {...} local function _755_(...) local seq_737_ = (_754_)[1] local seq_1_738_ = (_754_)[2] return (seq_3f(seq_737_) and seq_3f(seq_1_738_)) end if (((_G.type(_754_) == "table") and (nil ~= (_754_)[1]) and (nil ~= (_754_)[2])) and _755_(...)) then local seq_737_ = (_754_)[1] local seq_1_738_ = (_754_)[2] local function _756_(seq, seq_1)


 local tbl_17_auto = seq local i_18_auto = #tbl_17_auto for _, v in ipairs(seq_1) do local val_19_auto = v if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end return tbl_17_auto end return _756_ else return nil end else return nil end end table.insert((__fn_2a_M__concat_24_dispatch).bodies, _753_) _752_ = M["concat$"] end local function _760_() table.insert((__fn_2a_M__concat_24_dispatch).help, "(where [seq seq-1 seq-2 ...] (and (seq? seq) (seq? seq-1) (seq? seq-2)))") local function _761_(...) if (3 <= select("#", ...)) then local _762_ = {...} local function _763_(...) local seq_739_ = (_762_)[1] local seq_1_740_ = (_762_)[2] local seq_2_741_ = (_762_)[3] return (seq_3f(seq_739_) and seq_3f(seq_1_740_) and seq_3f(seq_2_741_)) end if (((_G.type(_762_) == "table") and (nil ~= (_762_)[1]) and (nil ~= (_762_)[2]) and (nil ~= (_762_)[3])) and _763_(...)) then local seq_739_ = (_762_)[1] local seq_1_740_ = (_762_)[2] local seq_2_741_ = (_762_)[3] local function _764_(seq, seq_1, seq_2, ...)

 return M["concat$"](M["concat$"](seq, seq_1), seq_2, ...) end return _764_ else return nil end else return nil end end table.insert((__fn_2a_M__concat_24_dispatch).bodies, _761_) return M["concat$"] end do local _ = {_752_, _760_()} end return M["concat$"] end setmetatable({nil, nil}, {__call = _751_})()






 local __fn_2a_M__shuffle_24_dispatch = {bodies = {}, help = {}} local function _768_(...) if (0 == #(__fn_2a_M__shuffle_24_dispatch).bodies) then error(("multi-arity function " .. "M.shuffle$" .. " has no bodies")) else end local _770_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__shuffle_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _770_ = f_74_auto end if (nil ~= _770_) then local f_74_auto = _770_ return f_74_auto(...) elseif (_770_ == nil) then local view_77_auto do local _771_, _772_ = pcall(require, "fennel") if ((_771_ == true) and ((_G.type(_772_) == "table") and (nil ~= (_772_).view))) then local view_77_auto0 = (_772_).view view_77_auto = view_77_auto0 elseif ((_771_ == false) and true) then local __75_auto = _772_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _774_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _774_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.shuffle$", table.concat(_774_, ", "), table.concat((__fn_2a_M__shuffle_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["shuffle$"] = _768_ local function _777_() local function _778_() table.insert((__fn_2a_M__shuffle_24_dispatch).help, "(where [seq] (seq? seq))") local function _779_(...) if (1 == select("#", ...)) then local _780_ = {...} local function _781_(...) local seq_767_ = (_780_)[1] return seq_3f(seq_767_) end if (((_G.type(_780_) == "table") and (nil ~= (_780_)[1])) and _781_(...)) then local seq_767_ = (_780_)[1] local function _782_(seq)



 for i = #seq, 1, -1 do
 local j = math.random(1, i)
 local hold = seq[j]
 seq[j] = seq[i]
 seq[i] = hold end
 return seq end return _782_ else return nil end else return nil end end table.insert((__fn_2a_M__shuffle_24_dispatch).bodies, _779_) return M["shuffle$"] end do local _ = {_778_()} end return M["shuffle$"] end setmetatable({nil, nil}, {__call = _777_})()

 local __fn_2a_M__hd_dispatch = {bodies = {}, help = {}} local function _786_(...) if (0 == #(__fn_2a_M__hd_dispatch).bodies) then error(("multi-arity function " .. "M.hd" .. " has no bodies")) else end local _788_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__hd_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _788_ = f_74_auto end if (nil ~= _788_) then local f_74_auto = _788_ return f_74_auto(...) elseif (_788_ == nil) then local view_77_auto do local _789_, _790_ = pcall(require, "fennel") if ((_789_ == true) and ((_G.type(_790_) == "table") and (nil ~= (_790_).view))) then local view_77_auto0 = (_790_).view view_77_auto = view_77_auto0 elseif ((_789_ == false) and true) then local __75_auto = _790_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _792_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _792_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.hd", table.concat(_792_, ", "), table.concat((__fn_2a_M__hd_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.hd = _786_ local function _795_() local function _796_() table.insert((__fn_2a_M__hd_dispatch).help, "(where [seq] (seq? seq))") local function _797_(...) if (1 == select("#", ...)) then local _798_ = {...} local function _799_(...) local seq_785_ = (_798_)[1] return seq_3f(seq_785_) end if (((_G.type(_798_) == "table") and (nil ~= (_798_)[1])) and _799_(...)) then local seq_785_ = (_798_)[1] local function _800_(seq)


 local _let_801_ = seq local h = _let_801_[1]
 return h end return _800_ else return nil end else return nil end end table.insert((__fn_2a_M__hd_dispatch).bodies, _797_) return M.hd end do local _ = {_796_()} end return M.hd end setmetatable({nil, nil}, {__call = _795_})()

 local __fn_2a_M__tl_dispatch = {bodies = {}, help = {}} local function _805_(...) if (0 == #(__fn_2a_M__tl_dispatch).bodies) then error(("multi-arity function " .. "M.tl" .. " has no bodies")) else end local _807_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__tl_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _807_ = f_74_auto end if (nil ~= _807_) then local f_74_auto = _807_ return f_74_auto(...) elseif (_807_ == nil) then local view_77_auto do local _808_, _809_ = pcall(require, "fennel") if ((_808_ == true) and ((_G.type(_809_) == "table") and (nil ~= (_809_).view))) then local view_77_auto0 = (_809_).view view_77_auto = view_77_auto0 elseif ((_808_ == false) and true) then local __75_auto = _809_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _811_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _811_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.tl", table.concat(_811_, ", "), table.concat((__fn_2a_M__tl_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.tl = _805_ local function _814_() local function _815_() table.insert((__fn_2a_M__tl_dispatch).help, "(where [seq] (seq? seq))") local function _816_(...) if (1 == select("#", ...)) then local _817_ = {...} local function _818_(...) local seq_804_ = (_817_)[1] return seq_3f(seq_804_) end if (((_G.type(_817_) == "table") and (nil ~= (_817_)[1])) and _818_(...)) then local seq_804_ = (_817_)[1] local function _819_(seq)


 local _let_820_ = seq local _ = _let_820_[1] local tail = (function (t, k, e) local mt = getmetatable(t) if 'table' == type(mt) and mt.__fennelrest then return mt.__fennelrest(t, k) elseif e then local rest = {} for k, v in pairs(t) do if not e[k] then rest[k] = v end end return rest else return {(table.unpack or unpack)(t, k)} end end)(_let_820_, 2)
 return tail end return _819_ else return nil end else return nil end end table.insert((__fn_2a_M__tl_dispatch).bodies, _816_) return M.tl end do local _ = {_815_()} end return M.tl end setmetatable({nil, nil}, {__call = _814_})()

 local __fn_2a_M__first_dispatch = {bodies = {}, help = {}} local function _824_(...) if (0 == #(__fn_2a_M__first_dispatch).bodies) then error(("multi-arity function " .. "M.first" .. " has no bodies")) else end local _826_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__first_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _826_ = f_74_auto end if (nil ~= _826_) then local f_74_auto = _826_ return f_74_auto(...) elseif (_826_ == nil) then local view_77_auto do local _827_, _828_ = pcall(require, "fennel") if ((_827_ == true) and ((_G.type(_828_) == "table") and (nil ~= (_828_).view))) then local view_77_auto0 = (_828_).view view_77_auto = view_77_auto0 elseif ((_827_ == false) and true) then local __75_auto = _828_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _830_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _830_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.first", table.concat(_830_, ", "), table.concat((__fn_2a_M__first_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.first = _824_ local function _833_() local function _834_() table.insert((__fn_2a_M__first_dispatch).help, "(where [seq] (seq? seq))") local function _835_(...) if (1 == select("#", ...)) then local _836_ = {...} local function _837_(...) local seq_823_ = (_836_)[1] return seq_3f(seq_823_) end if (((_G.type(_836_) == "table") and (nil ~= (_836_)[1])) and _837_(...)) then local seq_823_ = (_836_)[1] local function _838_(seq)


 return M.hd(seq) end return _838_ else return nil end else return nil end end table.insert((__fn_2a_M__first_dispatch).bodies, _835_) return M.first end do local _ = {_834_()} end return M.first end setmetatable({nil, nil}, {__call = _833_})()

 local __fn_2a_M__last_dispatch = {bodies = {}, help = {}} local function _842_(...) if (0 == #(__fn_2a_M__last_dispatch).bodies) then error(("multi-arity function " .. "M.last" .. " has no bodies")) else end local _844_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__last_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _844_ = f_74_auto end if (nil ~= _844_) then local f_74_auto = _844_ return f_74_auto(...) elseif (_844_ == nil) then local view_77_auto do local _845_, _846_ = pcall(require, "fennel") if ((_845_ == true) and ((_G.type(_846_) == "table") and (nil ~= (_846_).view))) then local view_77_auto0 = (_846_).view view_77_auto = view_77_auto0 elseif ((_845_ == false) and true) then local __75_auto = _846_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _848_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _848_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.last", table.concat(_848_, ", "), table.concat((__fn_2a_M__last_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.last = _842_ local function _851_() local function _852_() table.insert((__fn_2a_M__last_dispatch).help, "(where [seq] (seq? seq))") local function _853_(...) if (1 == select("#", ...)) then local _854_ = {...} local function _855_(...) local seq_841_ = (_854_)[1] return seq_3f(seq_841_) end if (((_G.type(_854_) == "table") and (nil ~= (_854_)[1])) and _855_(...)) then local seq_841_ = (_854_)[1] local function _856_(seq)


 return seq[#seq] end return _856_ else return nil end else return nil end end table.insert((__fn_2a_M__last_dispatch).bodies, _853_) return M.last end do local _ = {_852_()} end return M.last end setmetatable({nil, nil}, {__call = _851_})()

 local __fn_2a_M__unique_dispatch = {bodies = {}, help = {}} local function _862_(...) if (0 == #(__fn_2a_M__unique_dispatch).bodies) then error(("multi-arity function " .. "M.unique" .. " has no bodies")) else end local _864_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__unique_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _864_ = f_74_auto end if (nil ~= _864_) then local f_74_auto = _864_ return f_74_auto(...) elseif (_864_ == nil) then local view_77_auto do local _865_, _866_ = pcall(require, "fennel") if ((_865_ == true) and ((_G.type(_866_) == "table") and (nil ~= (_866_).view))) then local view_77_auto0 = (_866_).view view_77_auto = view_77_auto0 elseif ((_865_ == false) and true) then local __75_auto = _866_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _868_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _868_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.unique", table.concat(_868_, ", "), table.concat((__fn_2a_M__unique_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.unique = _862_ local function _871_() local _872_ do table.insert((__fn_2a_M__unique_dispatch).help, "(where [seq] (seq? seq))") local function _873_(...) if (1 == select("#", ...)) then local _874_ = {...} local function _875_(...) local seq_859_ = (_874_)[1] return seq_3f(seq_859_) end if (((_G.type(_874_) == "table") and (nil ~= (_874_)[1])) and _875_(...)) then local seq_859_ = (_874_)[1] local function _876_(seq)







 local function _877_(_241) return _241 end return M.unique(seq, _877_) end return _876_ else return nil end else return nil end end table.insert((__fn_2a_M__unique_dispatch).bodies, _873_) _872_ = M.unique end local function _880_() table.insert((__fn_2a_M__unique_dispatch).help, "(where [seq identity] (and (seq? seq) (function? identity)))") local function _881_(...) if (2 == select("#", ...)) then local _882_ = {...} local function _883_(...) local seq_860_ = (_882_)[1] local identity_861_ = (_882_)[2] return (seq_3f(seq_860_) and function_3f(identity_861_)) end if (((_G.type(_882_) == "table") and (nil ~= (_882_)[1]) and (nil ~= (_882_)[2])) and _883_(...)) then local seq_860_ = (_882_)[1] local identity_861_ = (_882_)[2] local function _884_(seq, identity)

 local function _887_(_885_, value, _index) local _arg_886_ = _885_ local new_seq = _arg_886_[1] local seen = _arg_886_[2]
 local id_key = identity(value)
 if nil_3f(seen[id_key]) then

 seen[id_key] = true
 table.insert(new_seq, value)
 return {new_seq, seen} else
 return {new_seq, seen} end end return M.first(M.reduce(_887_, {{}, {}}, seq)) end return _884_ else return nil end else return nil end end table.insert((__fn_2a_M__unique_dispatch).bodies, _881_) return M.unique end do local _ = {_872_, _880_()} end return M.unique end setmetatable({nil, nil}, {__call = _871_})()



 local __fn_2a_M__split_dispatch = {bodies = {}, help = {}} local function _893_(...) if (0 == #(__fn_2a_M__split_dispatch).bodies) then error(("multi-arity function " .. "M.split" .. " has no bodies")) else end local _895_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__split_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _895_ = f_74_auto end if (nil ~= _895_) then local f_74_auto = _895_ return f_74_auto(...) elseif (_895_ == nil) then local view_77_auto do local _896_, _897_ = pcall(require, "fennel") if ((_896_ == true) and ((_G.type(_897_) == "table") and (nil ~= (_897_).view))) then local view_77_auto0 = (_897_).view view_77_auto = view_77_auto0 elseif ((_896_ == false) and true) then local __75_auto = _897_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _899_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _899_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.split", table.concat(_899_, ", "), table.concat((__fn_2a_M__split_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.split = _893_ local function _902_() local function _903_() table.insert((__fn_2a_M__split_dispatch).help, "(where [seq index] (and (seq? seq) (number? index) (<= 1 index)))") local function _904_(...) if (2 == select("#", ...)) then local _905_ = {...} local function _906_(...) local seq_891_ = (_905_)[1] local index_892_ = (_905_)[2] return (seq_3f(seq_891_) and number_3f(index_892_) and (1 <= index_892_)) end if (((_G.type(_905_) == "table") and (nil ~= (_905_)[1]) and (nil ~= (_905_)[2])) and _906_(...)) then local seq_891_ = (_905_)[1] local index_892_ = (_905_)[2] local function _907_(seq, index)



 local left, right = {}, {} for i, v in ipairs(seq) do
 if (i < index) then
 left, right = M["insert$"](left, -1, v), right else
 left, right = left, M["insert$"](right, -1, v) end end return left, right end return _907_ else return nil end else return nil end end table.insert((__fn_2a_M__split_dispatch).bodies, _904_) return M.split end do local _ = {_903_()} end return M.split end setmetatable({nil, nil}, {__call = _902_})()

 local __fn_2a_M__chunk_every_dispatch = {bodies = {}, help = {}} local function _916_(...) if (0 == #(__fn_2a_M__chunk_every_dispatch).bodies) then error(("multi-arity function " .. "M.chunk-every" .. " has no bodies")) else end local _918_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__chunk_every_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _918_ = f_74_auto end if (nil ~= _918_) then local f_74_auto = _918_ return f_74_auto(...) elseif (_918_ == nil) then local view_77_auto do local _919_, _920_ = pcall(require, "fennel") if ((_919_ == true) and ((_G.type(_920_) == "table") and (nil ~= (_920_).view))) then local view_77_auto0 = (_920_).view view_77_auto = view_77_auto0 elseif ((_919_ == false) and true) then local __75_auto = _920_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _922_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _922_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.chunk-every", table.concat(_922_, ", "), table.concat((__fn_2a_M__chunk_every_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["chunk-every"] = _916_ local function _925_() local _926_ do table.insert((__fn_2a_M__chunk_every_dispatch).help, "(where [seq n] (and (seq? seq) (number? n)))") local function _927_(...) if (2 == select("#", ...)) then local _928_ = {...} local function _929_(...) local seq_911_ = (_928_)[1] local n_912_ = (_928_)[2] return (seq_3f(seq_911_) and number_3f(n_912_)) end if (((_G.type(_928_) == "table") and (nil ~= (_928_)[1]) and (nil ~= (_928_)[2])) and _929_(...)) then local seq_911_ = (_928_)[1] local n_912_ = (_928_)[2] local function _930_(seq, n)


 return M["chunk-every"](seq, n, nil) end return _930_ else return nil end else return nil end end table.insert((__fn_2a_M__chunk_every_dispatch).bodies, _927_) _926_ = M["chunk-every"] end local function _933_() table.insert((__fn_2a_M__chunk_every_dispatch).help, "(where [seq n ?fill] (and (seq? seq) (number? n)))") local function _934_(...) if (3 == select("#", ...)) then local _935_ = {...} local function _936_(...) local seq_913_ = (_935_)[1] local n_914_ = (_935_)[2] local _3ffill_915_ = (_935_)[3] return (seq_3f(seq_913_) and number_3f(n_914_)) end if (((_G.type(_935_) == "table") and (nil ~= (_935_)[1]) and (nil ~= (_935_)[2]) and true) and _936_(...)) then local seq_913_ = (_935_)[1] local n_914_ = (_935_)[2] local _3ffill_915_ = (_935_)[3] local function _937_(seq, n, _3ffill)

 local l = #seq
 if (0 < l) then local tbl_17_auto = {}
 local i_18_auto = #tbl_17_auto for i = 1, #seq, n do local val_19_auto
 do local tbl_17_auto0 = {} local i_18_auto0 = #tbl_17_auto0 for ii = 0, (n - 1) do local val_19_auto0
 do local _938_ = seq[(i + ii)] if (_938_ == nil) then
 val_19_auto0 = _3ffill elseif (nil ~= _938_) then local any = _938_
 val_19_auto0 = any else val_19_auto0 = nil end end if (nil ~= val_19_auto0) then i_18_auto0 = (i_18_auto0 + 1) do end (tbl_17_auto0)[i_18_auto0] = val_19_auto0 else end end val_19_auto = tbl_17_auto0 end if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end return tbl_17_auto else
 return {} end end return _937_ else return nil end else return nil end end table.insert((__fn_2a_M__chunk_every_dispatch).bodies, _934_) return M["chunk-every"] end do local _ = {_926_, _933_()} end return M["chunk-every"] end setmetatable({nil, nil}, {__call = _925_})()



 local __fn_2a_M__merge_24_dispatch = {bodies = {}, help = {}} local function _950_(...) if (0 == #(__fn_2a_M__merge_24_dispatch).bodies) then error(("multi-arity function " .. "M.merge$" .. " has no bodies")) else end local _952_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__merge_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _952_ = f_74_auto end if (nil ~= _952_) then local f_74_auto = _952_ return f_74_auto(...) elseif (_952_ == nil) then local view_77_auto do local _953_, _954_ = pcall(require, "fennel") if ((_953_ == true) and ((_G.type(_954_) == "table") and (nil ~= (_954_).view))) then local view_77_auto0 = (_954_).view view_77_auto = view_77_auto0 elseif ((_953_ == false) and true) then local __75_auto = _954_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _956_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _956_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.merge$", table.concat(_956_, ", "), table.concat((__fn_2a_M__merge_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["merge$"] = _950_ local function _959_() local _960_ do table.insert((__fn_2a_M__merge_24_dispatch).help, "(where [a b] (and (table? a) (table? b)))") local function _961_(...) if (2 == select("#", ...)) then local _962_ = {...} local function _963_(...) local a_945_ = (_962_)[1] local b_946_ = (_962_)[2] return (table_3f(a_945_) and table_3f(b_946_)) end if (((_G.type(_962_) == "table") and (nil ~= (_962_)[1]) and (nil ~= (_962_)[2])) and _963_(...)) then local a_945_ = (_962_)[1] local b_946_ = (_962_)[2] local function _964_(a, b)




 local function _965_(_241, _242, _243) return _243 end return M["merge$"](a, b, _965_) end return _964_ else return nil end else return nil end end table.insert((__fn_2a_M__merge_24_dispatch).bodies, _961_) _960_ = M["merge$"] end local function _968_() table.insert((__fn_2a_M__merge_24_dispatch).help, "(where [a b f] (and (table? a) (table? b) (function? f)))") local function _969_(...) if (3 == select("#", ...)) then local _970_ = {...} local function _971_(...) local a_947_ = (_970_)[1] local b_948_ = (_970_)[2] local f_949_ = (_970_)[3] return (table_3f(a_947_) and table_3f(b_948_) and function_3f(f_949_)) end if (((_G.type(_970_) == "table") and (nil ~= (_970_)[1]) and (nil ~= (_970_)[2]) and (nil ~= (_970_)[3])) and _971_(...)) then local a_947_ = (_970_)[1] local b_948_ = (_970_)[2] local f_949_ = (_970_)[3] local function _972_(a, b, f)

 local function _973_(acc, val, key)
 if (nil ~= a[key]) then
 return M["set$"](acc, key, f(key, a[key], b[key])) else
 return M["set$"](acc, key, val) end end return M.reduce(_973_, a, b) end return _972_ else return nil end else return nil end end table.insert((__fn_2a_M__merge_24_dispatch).bodies, _969_) return M["merge$"] end do local _ = {_960_, _968_()} end return M["merge$"] end setmetatable({nil, nil}, {__call = _959_})()


 local __fn_2a_M__set_24_dispatch = {bodies = {}, help = {}} local function _983_(...) if (0 == #(__fn_2a_M__set_24_dispatch).bodies) then error(("multi-arity function " .. "M.set$" .. " has no bodies")) else end local _985_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__set_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _985_ = f_74_auto end if (nil ~= _985_) then local f_74_auto = _985_ return f_74_auto(...) elseif (_985_ == nil) then local view_77_auto do local _986_, _987_ = pcall(require, "fennel") if ((_986_ == true) and ((_G.type(_987_) == "table") and (nil ~= (_987_).view))) then local view_77_auto0 = (_987_).view view_77_auto = view_77_auto0 elseif ((_986_ == false) and true) then local __75_auto = _987_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _989_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _989_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.set$", table.concat(_989_, ", "), table.concat((__fn_2a_M__set_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["set$"] = _983_ local function _992_() local _993_ do table.insert((__fn_2a_M__set_24_dispatch).help, "(where [t k ?v] (table? t))") local function _994_(...) if (3 == select("#", ...)) then local _995_ = {...} local function _996_(...) local t_977_ = (_995_)[1] local k_978_ = (_995_)[2] local _3fv_979_ = (_995_)[3] return table_3f(t_977_) end if (((_G.type(_995_) == "table") and (nil ~= (_995_)[1]) and (nil ~= (_995_)[2]) and true) and _996_(...)) then local t_977_ = (_995_)[1] local k_978_ = (_995_)[2] local _3fv_979_ = (_995_)[3] local function _997_(t, k, _3fv)





 t[k] = _3fv return t end return _997_ else return nil end else return nil end end table.insert((__fn_2a_M__set_24_dispatch).bodies, _994_) _993_ = M["set$"] end local _1000_ do table.insert((__fn_2a_M__set_24_dispatch).help, "(where [t] (table? t))") local function _1001_(...) if (1 == select("#", ...)) then local _1002_ = {...} local function _1003_(...) local t_980_ = (_1002_)[1] return table_3f(t_980_) end if (((_G.type(_1002_) == "table") and (nil ~= (_1002_)[1])) and _1003_(...)) then local t_980_ = (_1002_)[1] local function _1004_(t)

 local function _1005_(_241, _242) t[_241] = _242 return t end return _1005_ end return _1004_ else return nil end else return nil end end table.insert((__fn_2a_M__set_24_dispatch).bodies, _1001_) _1000_ = M["set$"] end local function _1008_() table.insert((__fn_2a_M__set_24_dispatch).help, "(where [t k] (table? t))") local function _1009_(...) if (2 == select("#", ...)) then local _1010_ = {...} local function _1011_(...) local t_981_ = (_1010_)[1] local k_982_ = (_1010_)[2] return table_3f(t_981_) end if (((_G.type(_1010_) == "table") and (nil ~= (_1010_)[1]) and (nil ~= (_1010_)[2])) and _1011_(...)) then local t_981_ = (_1010_)[1] local k_982_ = (_1010_)[2] local function _1012_(t, k)

 local function _1013_(_241) t[k] = _241 return t end return _1013_ end return _1012_ else return nil end else return nil end end table.insert((__fn_2a_M__set_24_dispatch).bodies, _1009_) return M["set$"] end do local _ = {_993_, _1000_, _1008_()} end return M["set$"] end setmetatable({nil, nil}, {__call = _992_})()



 local __fn_2a_M__sort_24_dispatch = {bodies = {}, help = {}} local function _1020_(...) if (0 == #(__fn_2a_M__sort_24_dispatch).bodies) then error(("multi-arity function " .. "M.sort$" .. " has no bodies")) else end local _1022_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__sort_24_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1022_ = f_74_auto end if (nil ~= _1022_) then local f_74_auto = _1022_ return f_74_auto(...) elseif (_1022_ == nil) then local view_77_auto do local _1023_, _1024_ = pcall(require, "fennel") if ((_1023_ == true) and ((_G.type(_1024_) == "table") and (nil ~= (_1024_).view))) then local view_77_auto0 = (_1024_).view view_77_auto = view_77_auto0 elseif ((_1023_ == false) and true) then local __75_auto = _1024_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1026_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1026_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.sort$", table.concat(_1026_, ", "), table.concat((__fn_2a_M__sort_24_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["sort$"] = _1020_ local function _1029_() local _1030_ do table.insert((__fn_2a_M__sort_24_dispatch).help, "(where [f] (function? f))") local function _1031_(...) if (1 == select("#", ...)) then local _1032_ = {...} local function _1033_(...) local f_1016_ = (_1032_)[1] return function_3f(f_1016_) end if (((_G.type(_1032_) == "table") and (nil ~= (_1032_)[1])) and _1033_(...)) then local f_1016_ = (_1032_)[1] local function _1034_(f)


 local function _1035_(_241) return M["sort$"](f, _241) end return _1035_ end return _1034_ else return nil end else return nil end end table.insert((__fn_2a_M__sort_24_dispatch).bodies, _1031_) _1030_ = M["sort$"] end local _1038_ do table.insert((__fn_2a_M__sort_24_dispatch).help, "(where [seq] (seq? seq))") local function _1039_(...) if (1 == select("#", ...)) then local _1040_ = {...} local function _1041_(...) local seq_1017_ = (_1040_)[1] return seq_3f(seq_1017_) end if (((_G.type(_1040_) == "table") and (nil ~= (_1040_)[1])) and _1041_(...)) then local seq_1017_ = (_1040_)[1] local function _1042_(seq)

 table.sort(seq) return seq end return _1042_ else return nil end else return nil end end table.insert((__fn_2a_M__sort_24_dispatch).bodies, _1039_) _1038_ = M["sort$"] end local function _1045_() table.insert((__fn_2a_M__sort_24_dispatch).help, "(where [f seq] (and (function? f) (seq? seq)))") local function _1046_(...) if (2 == select("#", ...)) then local _1047_ = {...} local function _1048_(...) local f_1018_ = (_1047_)[1] local seq_1019_ = (_1047_)[2] return (function_3f(f_1018_) and seq_3f(seq_1019_)) end if (((_G.type(_1047_) == "table") and (nil ~= (_1047_)[1]) and (nil ~= (_1047_)[2])) and _1048_(...)) then local f_1018_ = (_1047_)[1] local seq_1019_ = (_1047_)[2] local function _1049_(f, seq)

 table.sort(seq, f) return seq end return _1049_ else return nil end else return nil end end table.insert((__fn_2a_M__sort_24_dispatch).bodies, _1046_) return M["sort$"] end do local _ = {_1030_, _1038_, _1045_()} end return M["sort$"] end setmetatable({nil, nil}, {__call = _1029_})()

 local __fn_2a_M__sort_dispatch = {bodies = {}, help = {}} local function _1055_(...) if (0 == #(__fn_2a_M__sort_dispatch).bodies) then error(("multi-arity function " .. "M.sort" .. " has no bodies")) else end local _1057_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__sort_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1057_ = f_74_auto end if (nil ~= _1057_) then local f_74_auto = _1057_ return f_74_auto(...) elseif (_1057_ == nil) then local view_77_auto do local _1058_, _1059_ = pcall(require, "fennel") if ((_1058_ == true) and ((_G.type(_1059_) == "table") and (nil ~= (_1059_).view))) then local view_77_auto0 = (_1059_).view view_77_auto = view_77_auto0 elseif ((_1058_ == false) and true) then local __75_auto = _1059_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1061_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1061_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.sort", table.concat(_1061_, ", "), table.concat((__fn_2a_M__sort_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.sort = _1055_ local function _1064_() local _1065_ do table.insert((__fn_2a_M__sort_dispatch).help, "(where [f] (function? f))") local function _1066_(...) if (1 == select("#", ...)) then local _1067_ = {...} local function _1068_(...) local f_1052_ = (_1067_)[1] return function_3f(f_1052_) end if (((_G.type(_1067_) == "table") and (nil ~= (_1067_)[1])) and _1068_(...)) then local f_1052_ = (_1067_)[1] local function _1069_(f)


 local function _1070_(_241) return M.sort(f, _241) end return _1070_ end return _1069_ else return nil end else return nil end end table.insert((__fn_2a_M__sort_dispatch).bodies, _1066_) _1065_ = M.sort end local function _1073_() table.insert((__fn_2a_M__sort_dispatch).help, "(where [f seq] (function? f) (seq? seq))") local function _1074_(...) if (2 == select("#", ...)) then local _1075_ = {...} local function _1076_(...) local f_1053_ = (_1075_)[1] local seq_1054_ = (_1075_)[2] return function_3f(f_1053_) end if (((_G.type(_1075_) == "table") and (nil ~= (_1075_)[1]) and (nil ~= (_1075_)[2])) and _1076_(...)) then local f_1053_ = (_1075_)[1] local seq_1054_ = (_1075_)[2] local function _1077_(f, seq)




 local sorted_keys


 local function _1078_(_241) local function _1081_(acc, _1079_, i) local _arg_1080_ = _1079_ local oi = _arg_1080_[1] local v = _arg_1080_[2] return M["set$"](acc, oi, i) end return M.reduce(_1081_, {}, _241) end local function _1082_(_241) local function _1087_(_1083_, _1085_) local _arg_1084_ = _1083_ local _ = _arg_1084_[1] local a = _arg_1084_[2] local _arg_1086_ = _1085_ local _0 = _arg_1086_[1] local b = _arg_1086_[2] return f(a, b) end table.sort(_241, _1087_) return _241 end sorted_keys = _1078_(_1082_(M["table->pairs"](seq)))


 local function _1088_(acc, v, i) return M["set$"](acc, sorted_keys[i], v) end return M.reduce(_1088_, {}, seq) end return _1077_ else return nil end else return nil end end table.insert((__fn_2a_M__sort_dispatch).bodies, _1074_) return M.sort end do local _ = {_1065_, _1073_()} end return M.sort end setmetatable({nil, nil}, {__call = _1064_})()



 local __fn_2a_M__table__3epairs_dispatch = {bodies = {}, help = {}} local function _1092_(...) if (0 == #(__fn_2a_M__table__3epairs_dispatch).bodies) then error(("multi-arity function " .. "M.table->pairs" .. " has no bodies")) else end local _1094_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__table__3epairs_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1094_ = f_74_auto end if (nil ~= _1094_) then local f_74_auto = _1094_ return f_74_auto(...) elseif (_1094_ == nil) then local view_77_auto do local _1095_, _1096_ = pcall(require, "fennel") if ((_1095_ == true) and ((_G.type(_1096_) == "table") and (nil ~= (_1096_).view))) then local view_77_auto0 = (_1096_).view view_77_auto = view_77_auto0 elseif ((_1095_ == false) and true) then local __75_auto = _1096_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1098_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1098_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.table->pairs", table.concat(_1098_, ", "), table.concat((__fn_2a_M__table__3epairs_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["table->pairs"] = _1092_ local function _1101_() local function _1102_() table.insert((__fn_2a_M__table__3epairs_dispatch).help, "(where [t] (table? t))") local function _1103_(...) if (1 == select("#", ...)) then local _1104_ = {...} local function _1105_(...) local t_1091_ = (_1104_)[1] return table_3f(t_1091_) end if (((_G.type(_1104_) == "table") and (nil ~= (_1104_)[1])) and _1105_(...)) then local t_1091_ = (_1104_)[1] local function _1106_(t)


 local function _1107_(_241, _242) return {_242, _241} end return M.map(_1107_, t) end return _1106_ else return nil end else return nil end end table.insert((__fn_2a_M__table__3epairs_dispatch).bodies, _1103_) return M["table->pairs"] end do local _ = {_1102_()} end return M["table->pairs"] end setmetatable({nil, nil}, {__call = _1101_})()

 local __fn_2a_M__pairs__3etable_dispatch = {bodies = {}, help = {}} local function _1111_(...) if (0 == #(__fn_2a_M__pairs__3etable_dispatch).bodies) then error(("multi-arity function " .. "M.pairs->table" .. " has no bodies")) else end local _1113_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__pairs__3etable_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1113_ = f_74_auto end if (nil ~= _1113_) then local f_74_auto = _1113_ return f_74_auto(...) elseif (_1113_ == nil) then local view_77_auto do local _1114_, _1115_ = pcall(require, "fennel") if ((_1114_ == true) and ((_G.type(_1115_) == "table") and (nil ~= (_1115_).view))) then local view_77_auto0 = (_1115_).view view_77_auto = view_77_auto0 elseif ((_1114_ == false) and true) then local __75_auto = _1115_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1117_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1117_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.pairs->table", table.concat(_1117_, ", "), table.concat((__fn_2a_M__pairs__3etable_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["pairs->table"] = _1111_ local function _1120_() local function _1121_() table.insert((__fn_2a_M__pairs__3etable_dispatch).help, "(where [seq] (seq? seq))") local function _1122_(...) if (1 == select("#", ...)) then local _1123_ = {...} local function _1124_(...) local seq_1110_ = (_1123_)[1] return seq_3f(seq_1110_) end if (((_G.type(_1123_) == "table") and (nil ~= (_1123_)[1])) and _1124_(...)) then local seq_1110_ = (_1123_)[1] local function _1125_(seq)


 local function _1128_(acc, _1126_) local _arg_1127_ = _1126_ local k = _arg_1127_[1] local v = _arg_1127_[2] return M["set$"](acc, k, v) end return M.reduce(_1128_, {}, seq) end return _1125_ else return nil end else return nil end end table.insert((__fn_2a_M__pairs__3etable_dispatch).bodies, _1122_) return M["pairs->table"] end do local _ = {_1121_()} end return M["pairs->table"] end setmetatable({nil, nil}, {__call = _1120_})()

 local __fn_2a_M__keys_dispatch = {bodies = {}, help = {}} local function _1132_(...) if (0 == #(__fn_2a_M__keys_dispatch).bodies) then error(("multi-arity function " .. "M.keys" .. " has no bodies")) else end local _1134_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__keys_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1134_ = f_74_auto end if (nil ~= _1134_) then local f_74_auto = _1134_ return f_74_auto(...) elseif (_1134_ == nil) then local view_77_auto do local _1135_, _1136_ = pcall(require, "fennel") if ((_1135_ == true) and ((_G.type(_1136_) == "table") and (nil ~= (_1136_).view))) then local view_77_auto0 = (_1136_).view view_77_auto = view_77_auto0 elseif ((_1135_ == false) and true) then local __75_auto = _1136_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1138_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1138_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.keys", table.concat(_1138_, ", "), table.concat((__fn_2a_M__keys_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.keys = _1132_ local function _1141_() local function _1142_() table.insert((__fn_2a_M__keys_dispatch).help, "(where [enumerable] (table? enumerable))") local function _1143_(...) if (1 == select("#", ...)) then local _1144_ = {...} local function _1145_(...) local enumerable_1131_ = (_1144_)[1] return table_3f(enumerable_1131_) end if (((_G.type(_1144_) == "table") and (nil ~= (_1144_)[1])) and _1145_(...)) then local enumerable_1131_ = (_1144_)[1] local function _1146_(enumerable)



 local function _1147_(_241) return _241 end local function _1148_() return pairs(enumerable) end return M.map(_1147_, _1148_) end return _1146_ else return nil end else return nil end end table.insert((__fn_2a_M__keys_dispatch).bodies, _1143_) return M.keys end do local _ = {_1142_()} end return M.keys end setmetatable({nil, nil}, {__call = _1141_})()

 local __fn_2a_M__vals_dispatch = {bodies = {}, help = {}} local function _1152_(...) if (0 == #(__fn_2a_M__vals_dispatch).bodies) then error(("multi-arity function " .. "M.vals" .. " has no bodies")) else end local _1154_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__vals_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1154_ = f_74_auto end if (nil ~= _1154_) then local f_74_auto = _1154_ return f_74_auto(...) elseif (_1154_ == nil) then local view_77_auto do local _1155_, _1156_ = pcall(require, "fennel") if ((_1155_ == true) and ((_G.type(_1156_) == "table") and (nil ~= (_1156_).view))) then local view_77_auto0 = (_1156_).view view_77_auto = view_77_auto0 elseif ((_1155_ == false) and true) then local __75_auto = _1156_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1158_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1158_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.vals", table.concat(_1158_, ", "), table.concat((__fn_2a_M__vals_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.vals = _1152_ local function _1161_() local function _1162_() table.insert((__fn_2a_M__vals_dispatch).help, "(where [enumerable] (table? enumerable))") local function _1163_(...) if (1 == select("#", ...)) then local _1164_ = {...} local function _1165_(...) local enumerable_1151_ = (_1164_)[1] return table_3f(enumerable_1151_) end if (((_G.type(_1164_) == "table") and (nil ~= (_1164_)[1])) and _1165_(...)) then local enumerable_1151_ = (_1164_)[1] local function _1166_(enumerable)



 local function _1167_(_241, _242) return _242 end local function _1168_() return pairs(enumerable) end return M.map(_1167_, _1168_) end return _1166_ else return nil end else return nil end end table.insert((__fn_2a_M__vals_dispatch).bodies, _1163_) return M.vals end do local _ = {_1162_()} end return M.vals end setmetatable({nil, nil}, {__call = _1161_})()

 local __fn_2a_M__intersperse_dispatch = {bodies = {}, help = {}} local function _1173_(...) if (0 == #(__fn_2a_M__intersperse_dispatch).bodies) then error(("multi-arity function " .. "M.intersperse" .. " has no bodies")) else end local _1175_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__intersperse_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1175_ = f_74_auto end if (nil ~= _1175_) then local f_74_auto = _1175_ return f_74_auto(...) elseif (_1175_ == nil) then local view_77_auto do local _1176_, _1177_ = pcall(require, "fennel") if ((_1176_ == true) and ((_G.type(_1177_) == "table") and (nil ~= (_1177_).view))) then local view_77_auto0 = (_1177_).view view_77_auto = view_77_auto0 elseif ((_1176_ == false) and true) then local __75_auto = _1177_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1179_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1179_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.intersperse", table.concat(_1179_, ", "), table.concat((__fn_2a_M__intersperse_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.intersperse = _1173_ local function _1182_() local function _1183_() table.insert((__fn_2a_M__intersperse_dispatch).help, "(where [e inter] (seq? e))") local function _1184_(...) if (2 == select("#", ...)) then local _1185_ = {...} local function _1186_(...) local e_1171_ = (_1185_)[1] local inter_1172_ = (_1185_)[2] return seq_3f(e_1171_) end if (((_G.type(_1185_) == "table") and (nil ~= (_1185_)[1]) and (nil ~= (_1185_)[2])) and _1186_(...)) then local e_1171_ = (_1185_)[1] local inter_1172_ = (_1185_)[2] local function _1187_(e, inter)




 local __fn_2a_fn_2a__anonymous___1188__dispatch = {bodies = {}, help = {}} local fn_2a__anonymous___1188_ local function _1195_(...) if (0 == #(__fn_2a_fn_2a__anonymous___1188__dispatch).bodies) then error(("multi-arity function " .. "fn*__anonymous___1188_" .. " has no bodies")) else end local _1197_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_fn_2a__anonymous___1188__dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1197_ = f_74_auto end if (nil ~= _1197_) then local f_74_auto = _1197_ return f_74_auto(...) elseif (_1197_ == nil) then local view_77_auto do local _1198_, _1199_ = pcall(require, "fennel") if ((_1198_ == true) and ((_G.type(_1199_) == "table") and (nil ~= (_1199_).view))) then local view_77_auto0 = (_1199_).view view_77_auto = view_77_auto0 elseif ((_1198_ == false) and true) then local __75_auto = _1199_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1201_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1201_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "fn*__anonymous___1188_", table.concat(_1201_, ", "), table.concat((__fn_2a_fn_2a__anonymous___1188__dispatch).help, "\n")) return error(msg_78_auto) else return nil end end fn_2a__anonymous___1188_ = _1195_ local function _1204_() local _1205_ do table.insert((__fn_2a_fn_2a__anonymous___1188__dispatch).help, "(where [acc v n] (= n (length ^e)))") local function _1206_(...) if (3 == select("#", ...)) then local _1207_ = {...} local function _1208_(...) local acc_1189_ = (_1207_)[1] local v_1190_ = (_1207_)[2] local n_1191_ = (_1207_)[3] return (n_1191_ == #e) end if (((_G.type(_1207_) == "table") and (nil ~= (_1207_)[1]) and (nil ~= (_1207_)[2]) and (nil ~= (_1207_)[3])) and _1208_(...)) then local acc_1189_ = (_1207_)[1] local v_1190_ = (_1207_)[2] local n_1191_ = (_1207_)[3] local function _1209_(acc, v, n)
 return M["append$"](acc, v) end return _1209_ else return nil end else return nil end end table.insert((__fn_2a_fn_2a__anonymous___1188__dispatch).bodies, _1206_) _1205_ = fn_2a__anonymous___1188_ end local function _1212_() table.insert((__fn_2a_fn_2a__anonymous___1188__dispatch).help, "(where [acc v i])") local function _1213_(...) if (3 == select("#", ...)) then local _1214_ = {...} local function _1215_(...) local acc_1192_ = (_1214_)[1] local v_1193_ = (_1214_)[2] local i_1194_ = (_1214_)[3] return true end if (((_G.type(_1214_) == "table") and (nil ~= (_1214_)[1]) and (nil ~= (_1214_)[2]) and (nil ~= (_1214_)[3])) and _1215_(...)) then local acc_1192_ = (_1214_)[1] local v_1193_ = (_1214_)[2] local i_1194_ = (_1214_)[3] local function _1216_(acc, v, i)
 return M["append$"](acc, v, inter) end return _1216_ else return nil end else return nil end end table.insert((__fn_2a_fn_2a__anonymous___1188__dispatch).bodies, _1213_) return fn_2a__anonymous___1188_ end do local _ = {_1205_, _1212_()} end return fn_2a__anonymous___1188_ end return M.reduce(setmetatable({nil, nil}, {__call = _1204_})(), {}, e) end return _1187_ else return nil end else return nil end end table.insert((__fn_2a_M__intersperse_dispatch).bodies, _1184_) return M.intersperse end do local _ = {_1183_()} end return M.intersperse end setmetatable({nil, nil}, {__call = _1182_})()


 local __fn_2a_M__empty_3f_dispatch = {bodies = {}, help = {}} local function _1222_(...) if (0 == #(__fn_2a_M__empty_3f_dispatch).bodies) then error(("multi-arity function " .. "M.empty?" .. " has no bodies")) else end local _1224_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__empty_3f_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1224_ = f_74_auto end if (nil ~= _1224_) then local f_74_auto = _1224_ return f_74_auto(...) elseif (_1224_ == nil) then local view_77_auto do local _1225_, _1226_ = pcall(require, "fennel") if ((_1225_ == true) and ((_G.type(_1226_) == "table") and (nil ~= (_1226_).view))) then local view_77_auto0 = (_1226_).view view_77_auto = view_77_auto0 elseif ((_1225_ == false) and true) then local __75_auto = _1226_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1228_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1228_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.empty?", table.concat(_1228_, ", "), table.concat((__fn_2a_M__empty_3f_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["empty?"] = _1222_ local function _1231_() local function _1232_() table.insert((__fn_2a_M__empty_3f_dispatch).help, "(where [t] (table? t))") local function _1233_(...) if (1 == select("#", ...)) then local _1234_ = {...} local function _1235_(...) local t_1221_ = (_1234_)[1] return table_3f(t_1221_) end if (((_G.type(_1234_) == "table") and (nil ~= (_1234_)[1])) and _1235_(...)) then local t_1221_ = (_1234_)[1] local function _1236_(t)


 return (nil == next(t)) end return _1236_ else return nil end else return nil end end table.insert((__fn_2a_M__empty_3f_dispatch).bodies, _1233_) return M["empty?"] end do local _ = {_1232_()} end return M["empty?"] end setmetatable({nil, nil}, {__call = _1231_})()

 local __fn_2a_M__stream_dispatch = {bodies = {}, help = {}} local function _1240_(...) if (0 == #(__fn_2a_M__stream_dispatch).bodies) then error(("multi-arity function " .. "M.stream" .. " has no bodies")) else end local _1242_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__stream_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1242_ = f_74_auto end if (nil ~= _1242_) then local f_74_auto = _1242_ return f_74_auto(...) elseif (_1242_ == nil) then local view_77_auto do local _1243_, _1244_ = pcall(require, "fennel") if ((_1243_ == true) and ((_G.type(_1244_) == "table") and (nil ~= (_1244_).view))) then local view_77_auto0 = (_1244_).view view_77_auto = view_77_auto0 elseif ((_1243_ == false) and true) then local __75_auto = _1244_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1246_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1246_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.stream", table.concat(_1246_, ", "), table.concat((__fn_2a_M__stream_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M.stream = _1240_ local function _1249_() local function _1250_() table.insert((__fn_2a_M__stream_dispatch).help, "(where [t] (enumerable? t))") local function _1251_(...) if (1 == select("#", ...)) then local _1252_ = {...} local function _1253_(...) local t_1239_ = (_1252_)[1] return enumerable_3f(t_1239_) end if (((_G.type(_1252_) == "table") and (nil ~= (_1252_)[1])) and _1253_(...)) then local t_1239_ = (_1252_)[1] local function _1254_(t)
















 return {enum = t, funs = {}} end return _1254_ else return nil end else return nil end end table.insert((__fn_2a_M__stream_dispatch).bodies, _1251_) return M.stream end do local _ = {_1250_()} end return M.stream end setmetatable({nil, nil}, {__call = _1249_})()

 local __fn_2a_M__stream__3eseq_dispatch = {bodies = {}, help = {}} local function _1259_(...) if (0 == #(__fn_2a_M__stream__3eseq_dispatch).bodies) then error(("multi-arity function " .. "M.stream->seq" .. " has no bodies")) else end local _1261_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_M__stream__3eseq_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _1261_ = f_74_auto end if (nil ~= _1261_) then local f_74_auto = _1261_ return f_74_auto(...) elseif (_1261_ == nil) then local view_77_auto do local _1262_, _1263_ = pcall(require, "fennel") if ((_1262_ == true) and ((_G.type(_1263_) == "table") and (nil ~= (_1263_).view))) then local view_77_auto0 = (_1263_).view view_77_auto = view_77_auto0 elseif ((_1262_ == false) and true) then local __75_auto = _1263_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _1265_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _1265_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.stream->seq", table.concat(_1265_, ", "), table.concat((__fn_2a_M__stream__3eseq_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end M["stream->seq"] = _1259_ local function _1268_() local _1269_ do table.insert((__fn_2a_M__stream__3eseq_dispatch).help, "(where [l] (and (stream? l) (or (seq? l.enum) (assoc? l.enum))))") local function _1270_(...) if (1 == select("#", ...)) then local _1271_ = {...} local function _1272_(...) local l_1257_ = (_1271_)[1] return (stream_3f(l_1257_) and (seq_3f(l_1257_.enum) or assoc_3f(l_1257_.enum))) end if (((_G.type(_1271_) == "table") and (nil ~= (_1271_)[1])) and _1272_(...)) then local l_1257_ = (_1271_)[1] local function _1273_(l)


 local function _1274_(v, k)
 local function _1275_(acc, f)
 local _1276_ = {f(acc, k)} if ((_G.type(_1276_) == "table") and ((_1276_)[1] == stream_halt_marker)) then

 return M.reduced(nil) elseif ((_G.type(_1276_) == "table") and ((_1276_)[1] == stream_use_last_value_marker)) then

 return acc elseif ((_G.type(_1276_) == "table") and ((_1276_)[1] == stream_use_new_value_marker) and true) then local _3fnew_acc = (_1276_)[2]

 return _3fnew_acc else return nil end end return M.reduce(_1275_, v, l.funs) end return M.map(_1274_, l.enum) end return _1273_ else return nil end else return nil end end table.insert((__fn_2a_M__stream__3eseq_dispatch).bodies, _1270_) _1269_ = M["stream->seq"] end local function _1280_() table.insert((__fn_2a_M__stream__3eseq_dispatch).help, "(where [l] (and (stream? l) (function? l.enum)))") local function _1281_(...) if (1 == select("#", ...)) then local _1282_ = {...} local function _1283_(...) local l_1258_ = (_1282_)[1] return (stream_3f(l_1258_) and function_3f(l_1258_.enum)) end if (((_G.type(_1282_) == "table") and (nil ~= (_1282_)[1])) and _1283_(...)) then local l_1258_ = (_1282_)[1] local function _1284_(l)





 local function _1285_(...)
 local function _1286_(acc, f)
 local new = M.pack(f(M.unpack(acc)))
 local _1287_ = new if ((_G.type(_1287_) == "table") and ((_1287_)[1] == stream_halt_marker)) then
 return M.reduced(nil) elseif ((_G.type(_1287_) == "table") and ((_1287_)[1] == stream_use_last_value_marker)) then
 return acc elseif ((_G.type(_1287_) == "table") and ((_1287_)[1] == stream_use_new_value_marker)) then

 return M.pack(M.unpack(new, 2)) else return nil end end return M.reduce(_1286_, M.pack(...), l.funs) end return M.flatten(M.map(_1285_, l.enum)) end return _1284_ else return nil end else return nil end end table.insert((__fn_2a_M__stream__3eseq_dispatch).bodies, _1281_) return M["stream->seq"] end do local _ = {_1269_, _1280_()} end return M["stream->seq"] end setmetatable({nil, nil}, {__call = _1268_})()










 return M