

 local _local_2_ do local _1_ local function _3_(...) local full_mod_path_2_auto = ... local _4_ = full_mod_path_2_auto local function _5_(...) local path_3_auto = _4_ return ("string" == type(path_3_auto)) end if ((nil ~= _4_) and _5_(...)) then local path_3_auto = _4_ if string.find(full_mod_path_2_auto, "iter") then local _6_ = string.match(full_mod_path_2_auto, ("(.+%.)" .. "iter")) if (_6_ == nil) then return "" elseif (nil ~= _6_) then local root_4_auto = _6_ return root_4_auto else return nil end else return error(string.format("relative-root: no match in &from %q for %q", full_mod_path_2_auto, "iter")) end elseif (_4_ == nil) then return "" else return nil end end _1_ = require(((_3_(...) or "") .. "type")) _local_2_ = _1_ end local _local_10_ = _local_2_
 local number_3f = _local_10_["number?"] local seq_3f = _local_10_["seq?"] do local _ = {nil, nil} end

 local M = {}

 local __fn_2a_M__range_dispatch = {bodies = {}, help = {}} local function _16_(...) if (0 == #(__fn_2a_M__range_dispatch).bodies) then error(("multi-arity function " .. "M.range" .. " has no bodies")) else end local _18_ do local f_78_auto = nil for __79_auto, match_3f_80_auto in ipairs((__fn_2a_M__range_dispatch).bodies) do if f_78_auto then break end f_78_auto = match_3f_80_auto(...) end _18_ = f_78_auto end if (nil ~= _18_) then local f_78_auto = _18_ return f_78_auto(...) elseif (_18_ == nil) then local view_81_auto do local _19_, _20_ = pcall(require, "fennel") if ((_19_ == true) and ((_G.type(_20_) == "table") and (nil ~= (_20_).view))) then local view_81_auto0 = (_20_).view view_81_auto = view_81_auto0 elseif ((_19_ == false) and true) then local __79_auto = _20_ view_81_auto = (_G.vim.inspect or print) else view_81_auto = nil end end local msg_82_auto local _22_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_83_auto = 1, select("#", ...) do local val_19_auto = view_81_auto(({...})[i_83_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _22_ = tbl_17_auto end msg_82_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.range", table.concat(_22_, ", "), table.concat((__fn_2a_M__range_dispatch).help, "\n")) return error(msg_82_auto) else return nil end end M.range = _16_ local function _25_() local _26_ do table.insert((__fn_2a_M__range_dispatch).help, "(where [start stop] (and (number? start) (number? stop)))") local function _27_(...) if (2 == select("#", ...)) then local _28_ = {...} local function _29_(...) local start_11_ = (_28_)[1] local stop_12_ = (_28_)[2] return (number_3f(start_11_) and number_3f(stop_12_)) end if (((_G.type(_28_) == "table") and (nil ~= (_28_)[1]) and (nil ~= (_28_)[2])) and _29_(...)) then local start_11_ = (_28_)[1] local stop_12_ = (_28_)[2] local function _30_(start, stop)



 return M.range(start, stop, 1) end return _30_ else return nil end else return nil end end table.insert((__fn_2a_M__range_dispatch).bodies, _27_) _26_ = M.range end local function _33_() table.insert((__fn_2a_M__range_dispatch).help, "(where [start stop step] (and (number? start) (number? stop) (number? step) (<= 1 step)))") local function _34_(...) if (3 == select("#", ...)) then local _35_ = {...} local function _36_(...) local start_13_ = (_35_)[1] local stop_14_ = (_35_)[2] local step_15_ = (_35_)[3] return (number_3f(start_13_) and number_3f(stop_14_) and number_3f(step_15_) and (1 <= step_15_)) end if (((_G.type(_35_) == "table") and (nil ~= (_35_)[1]) and (nil ~= (_35_)[2]) and (nil ~= (_35_)[3])) and _36_(...)) then local start_13_ = (_35_)[1] local stop_14_ = (_35_)[2] local step_15_ = (_35_)[3] local function _37_(start, stop, step)


 local function _45_() if (start <= stop) then
 local function _39_(_241, _242) return (_241 + _242) end local function _40_(_241, _242) return (_241 - _242) end local function _41_(_241, _242) return (_241 <= _242) end return {_39_, _40_, _41_} else
 local function _42_(_241, _242) return (_241 - _242) end local function _43_(_241, _242) return (_241 + _242) end local function _44_(_241, _242) return (_242 <= _241) end return {_42_, _43_, _44_} end end local _local_38_ = _45_() local op = _local_38_[1] local inv_op = _local_38_[2] local check = _local_38_[3]
 local function gen(_46_, last) local _arg_47_ = _46_ local start0 = _arg_47_[1] local stop0 = _arg_47_[2] local step0 = _arg_47_[3]
 local maybe = op(last, step0)
 if check(maybe, stop0) then
 return maybe else
 return nil end end
 return gen, {start, stop, step}, inv_op(start, step) end return _37_ else return nil end else return nil end end table.insert((__fn_2a_M__range_dispatch).bodies, _34_) return M.range end do local _ = {_26_, _33_()} end return M.range end setmetatable({nil, nil}, {__call = _25_})()

 local function ward_impl(seq, step, step_flip, initial_state)


 local step0 = (step_flip * step)
 local function gen(seq0, last)
 local next_i = (last + step0)
 local _51_ = (seq0)[next_i] if (nil ~= _51_) then local val = _51_
 return next_i, val else return nil end end
 return gen, seq, initial_state end

 local __fn_2a_M__fward_dispatch = {bodies = {}, help = {}} local function _56_(...) if (0 == #(__fn_2a_M__fward_dispatch).bodies) then error(("multi-arity function " .. "M.fward" .. " has no bodies")) else end local _58_ do local f_78_auto = nil for __79_auto, match_3f_80_auto in ipairs((__fn_2a_M__fward_dispatch).bodies) do if f_78_auto then break end f_78_auto = match_3f_80_auto(...) end _58_ = f_78_auto end if (nil ~= _58_) then local f_78_auto = _58_ return f_78_auto(...) elseif (_58_ == nil) then local view_81_auto do local _59_, _60_ = pcall(require, "fennel") if ((_59_ == true) and ((_G.type(_60_) == "table") and (nil ~= (_60_).view))) then local view_81_auto0 = (_60_).view view_81_auto = view_81_auto0 elseif ((_59_ == false) and true) then local __79_auto = _60_ view_81_auto = (_G.vim.inspect or print) else view_81_auto = nil end end local msg_82_auto local _62_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_83_auto = 1, select("#", ...) do local val_19_auto = view_81_auto(({...})[i_83_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _62_ = tbl_17_auto end msg_82_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.fward", table.concat(_62_, ", "), table.concat((__fn_2a_M__fward_dispatch).help, "\n")) return error(msg_82_auto) else return nil end end M.fward = _56_ local function _65_() local _66_ do table.insert((__fn_2a_M__fward_dispatch).help, "(where [seq] (seq? seq))") local function _67_(...) if (1 == select("#", ...)) then local _68_ = {...} local function _69_(...) local seq_53_ = (_68_)[1] return seq_3f(seq_53_) end if (((_G.type(_68_) == "table") and (nil ~= (_68_)[1])) and _69_(...)) then local seq_53_ = (_68_)[1] local function _70_(seq)


 return M.fward(seq, 1) end return _70_ else return nil end else return nil end end table.insert((__fn_2a_M__fward_dispatch).bodies, _67_) _66_ = M.fward end local function _73_() table.insert((__fn_2a_M__fward_dispatch).help, "(where [seq step] (and (seq? seq) (number? step) (<= 1 step)))") local function _74_(...) if (2 == select("#", ...)) then local _75_ = {...} local function _76_(...) local seq_54_ = (_75_)[1] local step_55_ = (_75_)[2] return (seq_3f(seq_54_) and number_3f(step_55_) and (1 <= step_55_)) end if (((_G.type(_75_) == "table") and (nil ~= (_75_)[1]) and (nil ~= (_75_)[2])) and _76_(...)) then local seq_54_ = (_75_)[1] local step_55_ = (_75_)[2] local function _77_(seq, step)

 return ward_impl(seq, step, 1, (1 - step)) end return _77_ else return nil end else return nil end end table.insert((__fn_2a_M__fward_dispatch).bodies, _74_) return M.fward end do local _ = {_66_, _73_()} end return M.fward end setmetatable({nil, nil}, {__call = _65_})()

 local __fn_2a_M__bward_dispatch = {bodies = {}, help = {}} local function _83_(...) if (0 == #(__fn_2a_M__bward_dispatch).bodies) then error(("multi-arity function " .. "M.bward" .. " has no bodies")) else end local _85_ do local f_78_auto = nil for __79_auto, match_3f_80_auto in ipairs((__fn_2a_M__bward_dispatch).bodies) do if f_78_auto then break end f_78_auto = match_3f_80_auto(...) end _85_ = f_78_auto end if (nil ~= _85_) then local f_78_auto = _85_ return f_78_auto(...) elseif (_85_ == nil) then local view_81_auto do local _86_, _87_ = pcall(require, "fennel") if ((_86_ == true) and ((_G.type(_87_) == "table") and (nil ~= (_87_).view))) then local view_81_auto0 = (_87_).view view_81_auto = view_81_auto0 elseif ((_86_ == false) and true) then local __79_auto = _87_ view_81_auto = (_G.vim.inspect or print) else view_81_auto = nil end end local msg_82_auto local _89_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_83_auto = 1, select("#", ...) do local val_19_auto = view_81_auto(({...})[i_83_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _89_ = tbl_17_auto end msg_82_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "M.bward", table.concat(_89_, ", "), table.concat((__fn_2a_M__bward_dispatch).help, "\n")) return error(msg_82_auto) else return nil end end M.bward = _83_ local function _92_() local _93_ do table.insert((__fn_2a_M__bward_dispatch).help, "(where [seq] (seq? seq))") local function _94_(...) if (1 == select("#", ...)) then local _95_ = {...} local function _96_(...) local seq_80_ = (_95_)[1] return seq_3f(seq_80_) end if (((_G.type(_95_) == "table") and (nil ~= (_95_)[1])) and _96_(...)) then local seq_80_ = (_95_)[1] local function _97_(seq)


 return M.bward(seq, 1) end return _97_ else return nil end else return nil end end table.insert((__fn_2a_M__bward_dispatch).bodies, _94_) _93_ = M.bward end local function _100_() table.insert((__fn_2a_M__bward_dispatch).help, "(where [seq step] (and (seq? seq) (number? step) (<= 1 step)))") local function _101_(...) if (2 == select("#", ...)) then local _102_ = {...} local function _103_(...) local seq_81_ = (_102_)[1] local step_82_ = (_102_)[2] return (seq_3f(seq_81_) and number_3f(step_82_) and (1 <= step_82_)) end if (((_G.type(_102_) == "table") and (nil ~= (_102_)[1]) and (nil ~= (_102_)[2])) and _103_(...)) then local seq_81_ = (_102_)[1] local step_82_ = (_102_)[2] local function _104_(seq, step)

 return ward_impl(seq, step, -1, (#seq + step)) end return _104_ else return nil end else return nil end end table.insert((__fn_2a_M__bward_dispatch).bodies, _101_) return M.bward end do local _ = {_93_, _100_()} end return M.bward end setmetatable({nil, nil}, {__call = _92_})()

 return M