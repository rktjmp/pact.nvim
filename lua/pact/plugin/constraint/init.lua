
 local _local_6_ = require("pact.lib.ruin.type") local assoc_3f = _local_6_["assoc?"] local boolean_3f = _local_6_["boolean?"] local function_3f = _local_6_["function?"] local nil_3f = _local_6_["nil?"] local not_nil_3f = _local_6_["not-nil?"] local number_3f = _local_6_["number?"] local seq_3f = _local_6_["seq?"] local string_3f = _local_6_["string?"] local table_3f = _local_6_["table?"] local thread_3f = _local_6_["thread?"] local userdata_3f = _local_6_["userdata?"] do local _ = {nil, nil, nil, nil, nil, nil, nil, nil, nil, nil} end


 local _local_12_, enum, _, _local_13_, _local_14_ = nil, nil, nil, nil, nil do local _11_ = require("pact.valid") local _10_ = string local _9_ = require("pact.plugin.constraint.version") local _8_ = require("pact.lib.ruin.enum") local _7_ = require("pact.lib.ruin.type") _local_12_, enum, _, _local_13_, _local_14_ = _7_, _8_, _9_, _10_, _11_ end local _local_15_ = _local_12_
 local string_3f0 = _local_15_["string?"] local table_3f0 = _local_15_["table?"] local _local_16_ = _local_13_


 local fmt = _local_16_["format"] local _local_17_ = _local_14_
 local valid_sha_3f = _local_17_["valid-sha?"] local valid_version_spec_3f = _local_17_["valid-version-spec?"] do local _ = {nil, nil} end

 local function one_of_3f(coll, test)
 local function _18_(_241, _242) return (_242 == test) end return enum["any?"](_18_, coll) end

 local function set_tostring(t)

 local function _21_(_19_) local _arg_20_ = _19_ local _0 = _arg_20_[1] local kind = _arg_20_[2] local spec = _arg_20_[3]
 return (kind .. "#" .. string.gsub(spec, "%s", "")) end return setmetatable(t, {__tostring = _21_}) end

 local __fn_2a_git_3f_dispatch = {bodies = {}, help = {}} local git_3f local function _24_(...) if (0 == #(__fn_2a_git_3f_dispatch).bodies) then error(("multi-arity function " .. "git?" .. " has no bodies")) else end local _26_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_git_3f_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _26_ = f_74_auto end if (nil ~= _26_) then local f_74_auto = _26_ return f_74_auto(...) elseif (_26_ == nil) then local view_77_auto do local _27_, _28_ = pcall(require, "fennel") if ((_27_ == true) and ((_G.type(_28_) == "table") and (nil ~= (_28_).view))) then local view_77_auto0 = (_28_).view view_77_auto = view_77_auto0 elseif ((_27_ == false) and true) then local __75_auto = _28_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _30_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _30_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "git?", table.concat(_30_, ", "), table.concat((__fn_2a_git_3f_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end git_3f = _24_ local function _33_() local _34_ do table.insert((__fn_2a_git_3f_dispatch).help, "(where [[\"git\" kind spec]] (and (one-of? [\"commit\" \"branch\" \"tag\" \"version\"] kind) (string? spec)))") local function _35_(...) if (1 == select("#", ...)) then local _36_ = {...} local function _37_(...) local kind_22_ = ((_36_)[1])[2] local spec_23_ = ((_36_)[1])[3] return (one_of_3f({"commit", "branch", "tag", "version"}, kind_22_) and string_3f0(spec_23_)) end if (((_G.type(_36_) == "table") and ((_G.type((_36_)[1]) == "table") and (((_36_)[1])[1] == "git") and (nil ~= ((_36_)[1])[2]) and (nil ~= ((_36_)[1])[3]))) and _37_(...)) then local kind_22_ = ((_36_)[1])[2] local spec_23_ = ((_36_)[1])[3] local function _40_(_38_)

 local _arg_39_ = _38_ local _0 = _arg_39_[1] local kind = _arg_39_[2] local spec = _arg_39_[3] return true end return _40_ else return nil end else return nil end end table.insert((__fn_2a_git_3f_dispatch).bodies, _35_) _34_ = git_3f end local function _43_() table.insert((__fn_2a_git_3f_dispatch).help, "(where _)") local function _44_(...) if true then local _45_ = {...} local function _46_(...) return true end if ((_G.type(_45_) == "table") and _46_(...)) then local function _47_(...) return false end return _47_ else return nil end else return nil end end table.insert((__fn_2a_git_3f_dispatch).bodies, _44_) return git_3f end do local _ = {_34_, _43_()} end return git_3f end setmetatable({nil, nil}, {__call = _33_})()





 local __fn_2a_git_dispatch = {bodies = {}, help = {}} local git local function _50_(...) if (0 == #(__fn_2a_git_dispatch).bodies) then error(("multi-arity function " .. "git" .. " has no bodies")) else end local _52_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_git_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _52_ = f_74_auto end if (nil ~= _52_) then local f_74_auto = _52_ return f_74_auto(...) elseif (_52_ == nil) then local view_77_auto do local _53_, _54_ = pcall(require, "fennel") if ((_53_ == true) and ((_G.type(_54_) == "table") and (nil ~= (_54_).view))) then local view_77_auto0 = (_54_).view view_77_auto = view_77_auto0 elseif ((_53_ == false) and true) then local __75_auto = _54_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _56_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _56_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "git", table.concat(_56_, ", "), table.concat((__fn_2a_git_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end git = _50_ local function _59_() do local _ = {} end return git end setmetatable({nil, nil}, {__call = _59_})()




 do table.insert((__fn_2a_git_dispatch).help, "(where [\"version\" ver])") local function _61_(...) if (2 == select("#", ...)) then local _62_ = {...} local function _63_(...) local ver_60_ = (_62_)[2] return true end if (((_G.type(_62_) == "table") and ((_62_)[1] == "version") and (nil ~= (_62_)[2])) and _63_(...)) then local ver_60_ = (_62_)[2] local function _64_(_0, ver)
 local _65_ = valid_version_spec_3f(ver) if (_65_ == true) then
 return set_tostring({"git", "version", ver}) elseif (_65_ == false) then
 return nil, "invalid version spec for version constraint" else return nil end end return _64_ else return nil end else return nil end end table.insert((__fn_2a_git_dispatch).bodies, _61_) end

 do table.insert((__fn_2a_git_dispatch).help, "(where [\"commit\" sha])") local function _70_(...) if (2 == select("#", ...)) then local _71_ = {...} local function _72_(...) local sha_69_ = (_71_)[2] return true end if (((_G.type(_71_) == "table") and ((_71_)[1] == "commit") and (nil ~= (_71_)[2])) and _72_(...)) then local sha_69_ = (_71_)[2] local function _73_(_0, sha)
 local _74_ = valid_sha_3f(sha) if (_74_ == true) then
 return set_tostring({"git", "commit", sha}) elseif (_74_ == false) then
 return nil, "invalid sha for commit constraint" else return nil end end return _73_ else return nil end else return nil end end table.insert((__fn_2a_git_dispatch).bodies, _70_) end

 do table.insert((__fn_2a_git_dispatch).help, "(where [kind spec])") local function _80_(...) if (2 == select("#", ...)) then local _81_ = {...} local function _82_(...) local kind_78_ = (_81_)[1] local spec_79_ = (_81_)[2] return true end if (((_G.type(_81_) == "table") and (nil ~= (_81_)[1]) and (nil ~= (_81_)[2])) and _82_(...)) then local kind_78_ = (_81_)[1] local spec_79_ = (_81_)[2] local function _83_(kind, spec) one_of_3f({"branch", "tag"}, kind)
 local _84_ = string_3f0(spec) if (_84_ == true) then
 return set_tostring({"git", kind, spec}) elseif (_84_ == false) then
 return nil, fmt("invalid spec for %s constraint, must be string", kind) else return nil end end return _83_ else return nil end else return nil end end table.insert((__fn_2a_git_dispatch).bodies, _80_) end

 do table.insert((__fn_2a_git_dispatch).help, "(where [...])") local function _88_(...) if (0 <= select("#", ...)) then local _89_ = {...} local function _90_(...) return true end if ((_G.type(_89_) == "table") and _90_(...)) then local function _91_(...)
 return nil, "must provide `commit|branch|tag|version` and appropriate value", ... end return _91_ else return nil end else return nil end end table.insert((__fn_2a_git_dispatch).bodies, _88_) end

 local __fn_2a_satisfies_3f_dispatch = {bodies = {}, help = {}} local satisfies_3f local function _105_(...) if (0 == #(__fn_2a_satisfies_3f_dispatch).bodies) then error(("multi-arity function " .. "satisfies?" .. " has no bodies")) else end local _107_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_satisfies_3f_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _107_ = f_74_auto end if (nil ~= _107_) then local f_74_auto = _107_ return f_74_auto(...) elseif (_107_ == nil) then local view_77_auto do local _108_, _109_ = pcall(require, "fennel") if ((_108_ == true) and ((_G.type(_109_) == "table") and (nil ~= (_109_).view))) then local view_77_auto0 = (_109_).view view_77_auto = view_77_auto0 elseif ((_108_ == false) and true) then local __75_auto = _109_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _111_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _111_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "satisfies?", table.concat(_111_, ", "), table.concat((__fn_2a_satisfies_3f_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end satisfies_3f = _105_ local function _114_() local _115_ do table.insert((__fn_2a_satisfies_3f_dispatch).help, "(where [[\"git\" \"commit\" sha] {:sha sha}])") local function _116_(...) if (2 == select("#", ...)) then local _117_ = {...} local function _118_(...) local sha_95_ = ((_117_)[1])[3] return true end if (((_G.type(_117_) == "table") and ((_G.type((_117_)[1]) == "table") and (((_117_)[1])[1] == "git") and (((_117_)[1])[2] == "commit") and (nil ~= ((_117_)[1])[3])) and ((_G.type((_117_)[2]) == "table") and (((_117_)[1])[3] == ((_117_)[2]).sha))) and _118_(...)) then local sha_95_ = ((_117_)[1])[3] local function _123_(_119_, _121_)
 local _arg_120_ = _119_ local _0 = _arg_120_[1] local _1 = _arg_120_[2] local sha = _arg_120_[3] local _arg_122_ = _121_ local sha0 = _arg_122_["sha"] return true end return _123_ else return nil end else return nil end end table.insert((__fn_2a_satisfies_3f_dispatch).bodies, _116_) _115_ = satisfies_3f end local _126_ do table.insert((__fn_2a_satisfies_3f_dispatch).help, "(where [[\"git\" \"tag\" tag] {:tag tag}])") local function _127_(...) if (2 == select("#", ...)) then local _128_ = {...} local function _129_(...) local tag_97_ = ((_128_)[1])[3] return true end if (((_G.type(_128_) == "table") and ((_G.type((_128_)[1]) == "table") and (((_128_)[1])[1] == "git") and (((_128_)[1])[2] == "tag") and (nil ~= ((_128_)[1])[3])) and ((_G.type((_128_)[2]) == "table") and (((_128_)[1])[3] == ((_128_)[2]).tag))) and _129_(...)) then local tag_97_ = ((_128_)[1])[3] local function _134_(_130_, _132_)

 local _arg_131_ = _130_ local _0 = _arg_131_[1] local _1 = _arg_131_[2] local tag = _arg_131_[3] local _arg_133_ = _132_ local tag0 = _arg_133_["tag"] return true end return _134_ else return nil end else return nil end end table.insert((__fn_2a_satisfies_3f_dispatch).bodies, _127_) _126_ = satisfies_3f end local _137_ do table.insert((__fn_2a_satisfies_3f_dispatch).help, "(where [[\"git\" \"branch\" branch] {:branch branch}])") local function _138_(...) if (2 == select("#", ...)) then local _139_ = {...} local function _140_(...) local branch_99_ = ((_139_)[1])[3] return true end if (((_G.type(_139_) == "table") and ((_G.type((_139_)[1]) == "table") and (((_139_)[1])[1] == "git") and (((_139_)[1])[2] == "branch") and (nil ~= ((_139_)[1])[3])) and ((_G.type((_139_)[2]) == "table") and (((_139_)[1])[3] == ((_139_)[2]).branch))) and _140_(...)) then local branch_99_ = ((_139_)[1])[3] local function _145_(_141_, _143_)

 local _arg_142_ = _141_ local _0 = _arg_142_[1] local _1 = _arg_142_[2] local branch = _arg_142_[3] local _arg_144_ = _143_ local branch0 = _arg_144_["branch"] return true end return _145_ else return nil end else return nil end end table.insert((__fn_2a_satisfies_3f_dispatch).bodies, _138_) _137_ = satisfies_3f end local _148_ do table.insert((__fn_2a_satisfies_3f_dispatch).help, "(where [[\"git\" \"version\" version-spec] {:version version}])") local function _149_(...) if (2 == select("#", ...)) then local _150_ = {...} local function _151_(...) local version_spec_100_ = ((_150_)[1])[3] local version_101_ = ((_150_)[2]).version return true end if (((_G.type(_150_) == "table") and ((_G.type((_150_)[1]) == "table") and (((_150_)[1])[1] == "git") and (((_150_)[1])[2] == "version") and (nil ~= ((_150_)[1])[3])) and ((_G.type((_150_)[2]) == "table") and (nil ~= ((_150_)[2]).version))) and _151_(...)) then local version_spec_100_ = ((_150_)[1])[3] local version_101_ = ((_150_)[2]).version local function _156_(_152_, _154_)

 local _arg_153_ = _152_ local _0 = _arg_153_[1] local _1 = _arg_153_[2] local version_spec = _arg_153_[3] local _arg_155_ = _154_ local version = _arg_155_["version"]
 local _let_157_ = require("pact.plugin.constraint.version") local satisfies_3f0 = _let_157_["satisfies?"]
 return satisfies_3f0(version_spec, version) end return _156_ else return nil end else return nil end end table.insert((__fn_2a_satisfies_3f_dispatch).bodies, _149_) _148_ = satisfies_3f end local _160_ do table.insert((__fn_2a_satisfies_3f_dispatch).help, "(where [[\"git\" _ _] {:sha sha}])") local function _161_(...) if (2 == select("#", ...)) then local _162_ = {...} local function _163_(...) local __103_ = ((_162_)[1])[2] local __103_ = ((_162_)[1])[3] local sha_104_ = ((_162_)[2]).sha return true end if (((_G.type(_162_) == "table") and ((_G.type((_162_)[1]) == "table") and (((_162_)[1])[1] == "git") and true and true) and ((_G.type((_162_)[2]) == "table") and (nil ~= ((_162_)[2]).sha))) and _163_(...)) then local __103_ = ((_162_)[1])[2] local __103_ = ((_162_)[1])[3] local sha_104_ = ((_162_)[2]).sha local function _168_(_164_, _166_)
 local _arg_165_ = _164_ local _0 = _arg_165_[1] local _1 = _arg_165_[2] local _2 = _arg_165_[3] local _arg_167_ = _166_ local sha = _arg_167_["sha"] return false end return _168_ else return nil end else return nil end end table.insert((__fn_2a_satisfies_3f_dispatch).bodies, _161_) _160_ = satisfies_3f end local function _171_() table.insert((__fn_2a_satisfies_3f_dispatch).help, "(where _)") local function _172_(...) if true then local _173_ = {...} local function _174_(...) return true end if ((_G.type(_173_) == "table") and _174_(...)) then local function _175_(...)


 return error("satisfies? requires constraint and commit") end return _175_ else return nil end else return nil end end table.insert((__fn_2a_satisfies_3f_dispatch).bodies, _172_) return satisfies_3f end do local _ = {_115_, _126_, _137_, _148_, _160_, _171_()} end return satisfies_3f end setmetatable({nil, nil}, {__call = _114_})()

 local __fn_2a_solve_dispatch = {bodies = {}, help = {}} local solve local function _178_(...) if (0 == #(__fn_2a_solve_dispatch).bodies) then error(("multi-arity function " .. "solve" .. " has no bodies")) else end local _180_ do local f_74_auto = nil for __75_auto, match_3f_76_auto in ipairs((__fn_2a_solve_dispatch).bodies) do if f_74_auto then break end f_74_auto = match_3f_76_auto(...) end _180_ = f_74_auto end if (nil ~= _180_) then local f_74_auto = _180_ return f_74_auto(...) elseif (_180_ == nil) then local view_77_auto do local _181_, _182_ = pcall(require, "fennel") if ((_181_ == true) and ((_G.type(_182_) == "table") and (nil ~= (_182_).view))) then local view_77_auto0 = (_182_).view view_77_auto = view_77_auto0 elseif ((_181_ == false) and true) then local __75_auto = _182_ view_77_auto = (_G.vim.inspect or print) else view_77_auto = nil end end local msg_78_auto local _184_ do local tbl_17_auto = {} local i_18_auto = #tbl_17_auto for i_79_auto = 1, select("#", ...) do local val_19_auto = view_77_auto(({...})[i_79_auto]) if (nil ~= val_19_auto) then i_18_auto = (i_18_auto + 1) do end (tbl_17_auto)[i_18_auto] = val_19_auto else end end _184_ = tbl_17_auto end msg_78_auto = string.format(("Multi-arity function %s had no matching head " .. "or default defined.\nCalled with: [%s]\nHeads:\n%s"), "solve", table.concat(_184_, ", "), table.concat((__fn_2a_solve_dispatch).help, "\n")) return error(msg_78_auto) else return nil end end solve = _178_ local function _187_() do local _ = {} end return solve end setmetatable({nil, nil}, {__call = _187_})()


 do table.insert((__fn_2a_solve_dispatch).help, "(where [[\"git\" \"commit\" sha] commits] (seq? commits))") local function _190_(...) if (2 == select("#", ...)) then local _191_ = {...} local function _192_(...) local sha_188_ = ((_191_)[1])[3] local commits_189_ = (_191_)[2] return seq_3f(commits_189_) end if (((_G.type(_191_) == "table") and ((_G.type((_191_)[1]) == "table") and (((_191_)[1])[1] == "git") and (((_191_)[1])[2] == "commit") and (nil ~= ((_191_)[1])[3])) and (nil ~= (_191_)[2])) and _192_(...)) then local sha_188_ = ((_191_)[1])[3] local commits_189_ = (_191_)[2] local function _195_(_193_, commits)
 local _arg_194_ = _193_ local _0 = _arg_194_[1] local _1 = _arg_194_[2] local sha = _arg_194_[3]
 local function _196_(_241, _242) return (sha == _242.sha) end return enum["find-value"](_196_, commits) end return _195_ else return nil end else return nil end end table.insert((__fn_2a_solve_dispatch).bodies, _190_) end

 do table.insert((__fn_2a_solve_dispatch).help, "(where [[\"git\" \"tag\" tag] commits] (seq? commits))") local function _201_(...) if (2 == select("#", ...)) then local _202_ = {...} local function _203_(...) local tag_199_ = ((_202_)[1])[3] local commits_200_ = (_202_)[2] return seq_3f(commits_200_) end if (((_G.type(_202_) == "table") and ((_G.type((_202_)[1]) == "table") and (((_202_)[1])[1] == "git") and (((_202_)[1])[2] == "tag") and (nil ~= ((_202_)[1])[3])) and (nil ~= (_202_)[2])) and _203_(...)) then local tag_199_ = ((_202_)[1])[3] local commits_200_ = (_202_)[2] local function _206_(_204_, commits)
 local _arg_205_ = _204_ local _0 = _arg_205_[1] local _1 = _arg_205_[2] local tag = _arg_205_[3]
 local function _207_(_241, _242) return (tag == _242.tag) end return enum["find-value"](_207_, commits) end return _206_ else return nil end else return nil end end table.insert((__fn_2a_solve_dispatch).bodies, _201_) end

 do table.insert((__fn_2a_solve_dispatch).help, "(where [[\"git\" \"branch\" branch] commits] (seq? commits))") local function _212_(...) if (2 == select("#", ...)) then local _213_ = {...} local function _214_(...) local branch_210_ = ((_213_)[1])[3] local commits_211_ = (_213_)[2] return seq_3f(commits_211_) end if (((_G.type(_213_) == "table") and ((_G.type((_213_)[1]) == "table") and (((_213_)[1])[1] == "git") and (((_213_)[1])[2] == "branch") and (nil ~= ((_213_)[1])[3])) and (nil ~= (_213_)[2])) and _214_(...)) then local branch_210_ = ((_213_)[1])[3] local commits_211_ = (_213_)[2] local function _217_(_215_, commits)
 local _arg_216_ = _215_ local _0 = _arg_216_[1] local _1 = _arg_216_[2] local branch = _arg_216_[3]
 local function _218_(_241, _242) return (branch == _242.branch) end return enum["find-value"](_218_, commits) end return _217_ else return nil end else return nil end end table.insert((__fn_2a_solve_dispatch).bodies, _212_) end

 do table.insert((__fn_2a_solve_dispatch).help, "(where [[\"git\" \"version\" version] commits] (seq? commits))") local function _223_(...) if (2 == select("#", ...)) then local _224_ = {...} local function _225_(...) local version_221_ = ((_224_)[1])[3] local commits_222_ = (_224_)[2] return seq_3f(commits_222_) end if (((_G.type(_224_) == "table") and ((_G.type((_224_)[1]) == "table") and (((_224_)[1])[1] == "git") and (((_224_)[1])[2] == "version") and (nil ~= ((_224_)[1])[3])) and (nil ~= (_224_)[2])) and _225_(...)) then local version_221_ = ((_224_)[1])[3] local commits_222_ = (_224_)[2] local function _228_(_226_, commits)
 local _arg_227_ = _226_ local _0 = _arg_227_[1] local _1 = _arg_227_[2] local version = _arg_227_[3]
 local _let_229_ = require("pact.plugin.constraint.version") local solve0 = _let_229_["solve"] local possible_versions
 local function _230_(_241, _242) return _242.version end possible_versions = enum.map(_230_, commits)
 local best_version = enum.first(solve0(version, possible_versions))

 if best_version then
 local function _231_(_241, _242) return (best_version == _242.version) end return enum["find-value"](_231_, commits) else return nil end end return _228_ else return nil end else return nil end end table.insert((__fn_2a_solve_dispatch).bodies, _223_) end

 return {git = git, ["git?"] = git_3f, ["satisfies?"] = satisfies_3f, solve = solve}